opcodes = {
    # Operators: Math Part 1
    "operator_add": {
        "type": "stringReporter",
        "category": "Operators",
        "newOpcode": "(OPERAND1) + (OPERAND2)",
        "inputTypes": {"OPERAND1": "number", "OPERAND2": "number"},
        "inputTranslation": {"NUM1": "OPERAND1", "NUM2": "OPERAND2"},
        "optionTypes": {},
    },
    "operator_subtract": {
        "type": "stringReporter",
        "category": "Operators",
        "newOpcode": "(OPERAND1) - (OPERAND2)",
        "inputTypes": {"OPERAND1": "number", "OPERAND2": "number"},
        "inputTranslation": {"NUM1": "OPERAND1", "NUM2": "OPERAND2"},
        "optionTypes": {},
    },
    "operator_multiply": {
        "type": "stringReporter",
        "category": "Operators",
        "newOpcode": "(OPERAND1) * (OPERAND2)",
        "inputTypes": {"OPERAND1": "number", "OPERAND2": "number"},
        "inputTranslation": {"NUM1": "OPERAND1", "NUM2": "OPERAND2"},
        "optionTypes": {},
    },
    "operator_divide": {
        "type": "stringReporter",
        "category": "Operators",
        "newOpcode": "(OPERAND1) / (OPERAND2)",
        "inputTypes": {"OPERAND1": "number", "OPERAND2": "number"},
        "inputTranslation": {"NUM1": "OPERAND1", "NUM2": "OPERAND2"},
        "optionTypes": {},
    },
    "operator_power": {
        "type": "stringReporter",
        "category": "Operators",
        "newOpcode": "(OPERAND1) ^ (OPERAND2)",
        "inputTypes": {"OPERAND1": "number", "OPERAND2": "number"},
        "inputTranslation": {"NUM1": "OPERAND1", "NUM2": "OPERAND2"},
        "optionTypes": {},
    },
    "operator_advMathExpanded": {
        "type": "stringReporter",
        "category": "Operators",
        "newOpcode": "(OPERAND1) * (OPERAND2) [OPERATION] (OPERAND3)",
        "inputTypes": {"OPERAND1": "number", "OPERAND2": "number", "OPERAND3": "number"},
        "inputTranslation": {"ONE": "OPERAND1", "TWO": "OPERAND2", "THREE": "OPERAND3"},
        "optionTypes": {"OPERATION": "root|log"},
        "optionTranslation": {"OPTION": "OPERATION"},
    },
    "operator_advMath": {
        "type": "stringReporter",
        "category": "Operators",
        "newOpcode": "(OPERAND1) [OPERATION] (OPERAND2)",
        "inputTypes": {"OPERAND1": "number", "OPERAND2": "number"},
        "inputTranslation": {"ONE": "OPERAND1", "TWO": "OPERAND2"},
        "optionTypes": {"OPERATION": "power|root|log"},
        "optionTranslation": {"OPTION": "OPERATION"},
    },
    "operator_random": {
        "type": "stringReporter",
        "category": "Operators",
        "newOpcode": "pick random (OPERAND1) to (OPERAND2)",
        "inputTypes": {"OPERAND1": "number", "OPERAND2": "number"},
        "inputTranslation": {"FROM": "OPERAND1", "TO": "OPERAND2"},
        "optionTypes": {},
    },
    "operator_constrainnumber": {
        "type": "stringReporter",
        "category": "Operators",
        "newOpcode": "constrain (NUM) min (MIN) max (MAX)",
        "inputTypes": {"NUM": "number", "MIN": "number", "MAX": "number"},
        "inputTranslation": {"inp": "NUM", "min": "MIN", "max": "MAX"},
        "optionTypes": {},
    },
    "operator_lerpFunc": {
        "type": "stringReporter",
        "category": "Operators",
        "newOpcode": "interpolate (OPERAND1) to (OPERAND2) by (WEIGHT)",
        "inputTypes": {"OPERAND1": "number", "OPERAND2": "number", "WEIGHT": "number"},
        "inputTranslation": {"ONE": "OPERAND1", "TWO": "OPERAND2", "AMOUNT": "WEIGHT"},
        "optionTypes": {},
    },
    # Operators: Comparators
    "operator_gt": {
        "type": "booleanReporter",
        "category": "Operators",
        "newOpcode": "(OPERAND1) > (OPERAND2)",
        "inputTypes": {"OPERAND1": "text", "OPERAND2": "text"},
        "optionTypes": {},
    },
    "operator_gtorequal": {
        "type": "booleanReporter",
        "category": "Operators",
        "newOpcode": "(OPERAND1) >= (OPERAND2)",
        "inputTypes": {"OPERAND1": "text", "OPERAND2": "text"},
        "optionTypes": {},
    },
    "operator_lt": {
        "type": "booleanReporter",
        "category": "Operators",
        "newOpcode": "(OPERAND1) < (OPERAND2)",
        "inputTypes": {"OPERAND1": "text", "OPERAND2": "text"},
        "optionTypes": {},
    },
    "operator_ltorequal": {
        "type": "booleanReporter",
        "category": "Operators",
        "newOpcode": "(OPERAND1) <= (OPERAND2)",
        "inputTypes": {"OPERAND1": "text", "OPERAND2": "text"},
        "optionTypes": {},
    },
    "operator_equals": {
        "type": "booleanReporter",
        "category": "Operators",
        "newOpcode": "(OPERAND1) = (OPERAND2)",
        "inputTypes": {"OPERAND1": "text", "OPERAND2": "text"},
        "optionTypes": {},
    },
    "operator_notequal": {
        "type": "booleanReporter",
        "category": "Operators",
        "newOpcode": "(OPERAND1) != (OPERAND2)",
        "inputTypes": {"OPERAND1": "text", "OPERAND2": "text"},
        "optionTypes": {},
    },        
    # Operators: True and False
    "operator_trueBoolean": {
        "type": "booleanReporter",
        "category": "Operators",
        "newOpcode": "true",
        "inputTypes": {},
        "optionTypes": {},
    },
    "operator_falseBoolean": {
        "type": "booleanReporter",
        "category": "Operators",
        "newOpcode": "false",
        "inputTypes": {},
        "optionTypes": {},
    },
    # Operators: Boolean Algebra
    "operator_and": {
        "type": "booleanReporter",
        "category": "Operators",
        "newOpcode": "<OPERAND1> and <OPERAND2>",
        "inputTypes": {"OPERAND1": "boolean", "OPERAND2": "boolean"},
        "optionTypes": {},
    },
    "operator_or": {
        "type": "booleanReporter",
        "category": "Operators",
        "newOpcode": "<OPERAND1> or <OPERAND2>",
        "inputTypes": {"OPERAND1": "boolean", "OPERAND2": "boolean"},
        "optionTypes": {},
    },
    "operator_not": {
        "type": "booleanReporter",
        "category": "Operators",
        "newOpcode": "not <OPERAND>",
        "inputTypes": {"OPERAND": "boolean"},
        "optionTypes": {},
    },
    # Operators: Newline and Tab
    "operator_newLine": {
        "type": "stringReporter",
        "category": "Operators",
        "newOpcode": "new line",
        "inputTypes": {},
        "optionTypes": {},
    },
    "operator_tabCharacter": {
        "type": "stringReporter",
        "category": "Operators",
        "newOpcode": "tab character",
        "inputTypes": {},
        "optionTypes": {},
    },
    # Operators: Text Manipulation
    "operator_join": {
        "type": "stringReporter",
        "category": "Operators",
        "newOpcode": "join (STRING1) (STRING2)",
        "inputTypes": {"STRING1": "text", "STRING2": "text"},
        "optionTypes": {},
    },
    "operator_join3": {
        "type": "stringReporter",
        "category": "Operators",
        "newOpcode": "join (STRING1) (STRING2) (STRING3)",
        "inputTypes": {"STRING1": "text", "STRING2": "text", "STRING3": "text"},
        "optionTypes": {},
    },
    "operator_indexOfTextInText": {
        "type": "stringReporter",
        "category": "Operators",
        "newOpcode": "index of (SUBSTRING) in (TEXT)",
        "inputTypes": {"SUBSTRING": "text", "TEXT": "text"},
        "inputTranslation": {"TEXT1": "SUBSTRING", "TEXT2": "TEXT"},
        "optionTypes": {},
    },
    "operator_lastIndexOfTextInText": {
        "type": "stringReporter",
        "category": "Operators",
        "newOpcode": "last index of (SUBSTRING) in (TEXT)",
        "inputTypes": {"SUBSTRING": "text", "TEXT": "text"},
        "inputTranslation": {"TEXT1": "SUBSTRING", "TEXT2": "TEXT"},
        "optionTypes": {},
    },
    "operator_letter_of": {
        "type": "stringReporter",
        "category": "Operators",
        "newOpcode": "letter (LETTER) of (STRING)",
        "inputTypes": {"LETTER": "positive integer", "STRING": "text"},
        "optionTypes": {},
    },
    "operator_getLettersFromIndexToIndexInText": {
        "type": "stringReporter",
        "category": "Operators",
        "newOpcode": "letters from (START) to (STOP) in (TEXT)",
        "inputTypes": {"START": "positive integer", "STOP": "text", "TEXT": "text"},
        "inputTranslation": {"INDEX1": "START", "INDEX2": "STOP"},
        "optionTypes": {},
    },
    "operator_length": {
        "type": "stringReporter",
        "category": "Operators",
        "newOpcode": "length of (TEXT)",
        "inputTypes": {"TEXT": "text"},
        "inputTranslation": {"STRING": "TEXT"},
        "optionTypes": {},
    },
    "operator_contains": {
        "type": "booleanReporter",
        "category": "Operators",
        "newOpcode": "(TEXT) contains (SUBSTRING) ?",
        "inputTypes": {"TEXT": "text", "SUBSTRING": "text"},
        "inputTranslation": {"STRING1": "TEXT", "STRING2": "SUBSTRING"},
        "optionTypes": {},
    },
    "operator_textStartsOrEndsWith": {
        "type": "booleanReporter",
        "category": "Operators",
        "newOpcode": "(TEXT) [OPERATION] with (SUBSTRING) ?",
        "inputTypes": {"TEXT": "text", "SUBSTRING": "text"},
        "inputTranslation": {"TEXT1": "TEXT", "TEXT2": "SUBSTRING"},
        "optionTypes": {"OPERATION": "text method"},
        "optionTranslation": {"OPTION": "OPERATION"},
    },
    "operator_replaceAll": {
        "type": "stringReporter",
        "category": "Operators",
        "newOpcode": "in (TEXT) replace all (OLDVALUE) with (NEWVALUE)",
        "inputTypes": {"TEXT": "text", "OLDVALUE": "text", "NEWVALUE": "text"},
        "inputTranslation": {"text": "TEXT", "term": "OLDVALUE", "res": "NEWVALUE"},
        "optionTypes": {},
    },
    "operator_replaceFirst": {
        "type": "stringReporter",
        "category": "Operators",
        "newOpcode": "in (TEXT) replace first (OLDVALUE) with (NEWVALUE)",
        "inputTypes": {"TEXT": "text", "OLDVALUE": "text", "NEWVALUE": "text"},
        "inputTranslation": {"text": "TEXT", "term": "OLDVALUE", "res": "NEWVALUE"},
        "optionTypes": {},
    },
    "operator_regexmatch": {
        "type": "stringReporter",
        "category": "Operators",
        "newOpcode": "match (TEXT) with regex (REGEX) (MODIFIER)",
        "inputTypes": {"TEXT": "text", "REGEX": "text", "MODIFIER": "text"},
        "inputTranslation": {"text": "TEXT", "reg": "REGEX", "regrule": "MODIFIER"},
        "optionTypes": {},
    },
    "operator_toUpperLowerCase": {
        "type": "stringReporter",
        "category": "Operators",
        "newOpcode": "(TEXT) to [CASE]",
        "inputTypes": {"TEXT": "text"},
        "optionTypes": {"CASE": "text case"},
        "optionTranslation": {"OPTION": "CASE"},
    },
    # Operators: Math Part 2
    "operator_mod": {
        "type": "stringReporter",
        "category": "Operators",
        "newOpcode": "(OPERAND1) mod (OPERAND2)",
        "inputTypes": {"OPERAND1": "text", "OPERAND2": "text"},
        "inputTranslation": {"NUM1": "OPERAND1", "NUM2": "OPERAND2"},
        "optionTypes": {},
    },
    "operator_round": {
        "type": "stringReporter",
        "category": "Operators",
        "newOpcode": "round (NUM)",
        "inputTypes": {"NUM": "number"},
        "optionTypes": {},
    },
    "operator_mathop": {
        "type": "stringReporter",
        "category": "Operators",
        "newOpcode": "[OPERATION] of (NUM)",
        "inputTypes": {"NUM": "number"},
        "optionTypes": {"OPERATION": "unary math operation"},
        "optionTranslation": {"OPERATOR": "OPERATION"},
    },
    "operator_stringify": {
        "type": "stringReporter",
        "category": "Operators",
        "newOpcode": "(VALUE)",
        "inputTypes": {"VALUE": "text"},
        "inputTranslation": {"ONE": "VALUE"},
        "optionTypes": {},
    },
    "operator_boolify": {
        "type": "booleanReporter",
        "category": "Operators",
        "newOpcode": "(VALUE) as a boolean",
        "inputTypes": {"VALUE": "text"},
        "inputTranslation":  {"ONE": "VALUE"},
        "optionTypes": {},
    },
}