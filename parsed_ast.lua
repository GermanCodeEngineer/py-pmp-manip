program:
  comment ('// Name: GPU.sb3')
  comment ('// ID: gpusb3')
  comment ('// Description: Use WebGPU compute shaders to accelerate your projects.')
  comment ('// By: derpygamer2142 <https://scratch.mit.edu/users/insanetaco2000/>')
  comment ('// License: MIT + MPL2.0')
  comment ('/**\n * This project is dual licensed under MPL-2.0 and MIT.\n */')
  expression_statement:
    call_expression:
      parenthesized_expression:
        ( ('(')
        function_expression:
          function ('function')
          formal_parameters:
            ( ('(')
            identifier ('Scratch')
            ) (')')
          statement_block:
            { ('{')
            expression_statement:
              string:
                " ('"')
                string_fragment ('use strict')
                " ('"')
              ; (';')
            lexical_declaration:
              const ('const')
              variable_declarator:
                identifier ('vm')
                = ('=')
                member_expression:
                  identifier ('Scratch')
                  . ('.')
                  property_identifier ('vm')
              ; (';')
            if_statement:
              if ('if')
              parenthesized_expression:
                ( ('(')
                unary_expression:
                  ! ('!')
                  member_expression:
                    member_expression:
                      identifier ('Scratch')
                      . ('.')
                      property_identifier ('extensions')
                    . ('.')
                    property_identifier ('unsandboxed')
                ) (')')
              statement_block:
                { ('{')
                throw_statement:
                  throw ('throw')
                  new_expression:
                    new ('new')
                    identifier ('Error')
                    arguments:
                      ( ('(')
                      string:
                        " ('"')
                        string_fragment ('This extension must run unsandboxed.')
                        " ('"')
                      ) (')')
                  ; (';')
                } ('}')
            lexical_declaration:
              let ('let')
              variable_declarator:
                identifier ('buffersExt')
              ; (';')
            comment ('// let penPlus;')
            comment ('// penPlus = Scratch.vm.runtime.ext_obviousalexc_penPlus')
            comment ('// load exposed extension stuff')
            expression_statement:
              call_expression:
                member_expression:
                  member_expression:
                    member_expression:
                      identifier ('Scratch')
                      . ('.')
                      property_identifier ('vm')
                    . ('.')
                    property_identifier ('runtime')
                  . ('.')
                  property_identifier ('on')
                arguments:
                  ( ('(')
                  string:
                    " ('"')
                    string_fragment ('EXTENSION_ADDED')
                    " ('"')
                  , (',')
                  arrow_function:
                    formal_parameters:
                      ( ('(')
                      ) (')')
                    => ('=>')
                    statement_block:
                      { ('{')
                      expression_statement:
                        assignment_expression:
                          identifier ('buffersExt')
                          = ('=')
                          member_expression:
                            member_expression:
                              member_expression:
                                identifier ('Scratch')
                                . ('.')
                                property_identifier ('vm')
                              . ('.')
                              property_identifier ('runtime')
                            . ('.')
                            property_identifier ('ext_0znzwBuffers')
                        ; (';')
                      } ('}')
                  ) (')')
              ; (';')
            lexical_declaration:
              let ('let')
              variable_declarator:
                identifier ('shaders')
                = ('=')
                object:
                  { ('{')
                  } ('}')
              ; (';')
            lexical_declaration:
              let ('let')
              variable_declarator:
                identifier ('error')
                = ('=')
                object:
                  { ('{')
                  } ('}')
              ; (';')
            lexical_declaration:
              let ('let')
              variable_declarator:
                identifier ('resources')
                = ('=')
                object:
                  { ('{')
                  pair:
                    property_identifier ('buffers')
                    : (':')
                    object:
                      { ('{')
                      } ('}')
                  , (',')
                  pair:
                    property_identifier ('bindGroups')
                    : (':')
                    object:
                      { ('{')
                      } ('}')
                  , (',')
                  pair:
                    property_identifier ('bindGroupLayouts')
                    : (':')
                    object:
                      { ('{')
                      } ('}')
                  , (',')
                  pair:
                    property_identifier ('bufferRefs')
                    : (':')
                    object:
                      { ('{')
                      } ('}')
                  , (',')
                  comment ('// deprecated, not used anywhere anymore')
                  pair:
                    property_identifier ('arrayBuffers')
                    : (':')
                    object:
                      { ('{')
                      } ('}')
                  , (',')
                  pair:
                    property_identifier ('views')
                    : (':')
                    object:
                      { ('{')
                      } ('}')
                  , (',')
                  pair:
                    property_identifier ('textures')
                    : (':')
                    object:
                      { ('{')
                      } ('}')
                  , (',')
                  comment ('// webgpu texture objects, actual images will be yoinked from ~~the pen+ costume library(if available)~~(scrapped idea, too complicated) and costume list')
                  pair:
                    property_identifier ('samplers')
                    : (':')
                    object:
                      { ('{')
                      } ('}')
                  , (',')
                  } ('}')
              ; (';')
            lexical_declaration:
              let ('let')
              variable_declarator:
                identifier ('currentBindGroup')
                = ('=')
                string:
                  " ('"')
                  " ('"')
              ; (';')
            lexical_declaration:
              let ('let')
              variable_declarator:
                identifier ('currentBindGroupLayout')
                = ('=')
                string:
                  " ('"')
                  " ('"')
              ; (';')
            class_declaration:
              class ('class')
              identifier ('GPUSb3')
              class_body:
                { ('{')
                method_definition:
                  property_identifier ('getInfo')
                  formal_parameters:
                    ( ('(')
                    ) (')')
                  statement_block:
                    { ('{')
                    expression_statement:
                      call_expression:
                        member_expression:
                          this ('this')
                          . ('.')
                          property_identifier ('init')
                        arguments:
                          ( ('(')
                          ) (')')
                      ; (';')
                    return_statement:
                      return ('return')
                      object:
                        { ('{')
                        pair:
                          property_identifier ('id')
                          : (':')
                          string:
                            " ('"')
                            string_fragment ('gpusb3')
                            " ('"')
                        , (',')
                        pair:
                          property_identifier ('name')
                          : (':')
                          string:
                            " ('"')
                            string_fragment ('GPU.sb3')
                            " ('"')
                        , (',')
                        pair:
                          property_identifier ('color1')
                          : (':')
                          string:
                            " ('"')
                            string_fragment ('#4287f5')
                            " ('"')
                        , (',')
                        pair:
                          property_identifier ('color2')
                          : (':')
                          string:
                            " ('"')
                            string_fragment ('#166af2')
                            " ('"')
                        , (',')
                        pair:
                          property_identifier ('color3')
                          : (':')
                          string:
                            " ('"')
                            string_fragment ('#032966')
                            " ('"')
                        , (',')
                        pair:
                          property_identifier ('docsURI')
                          : (':')
                          string:
                            " ('"')
                            string_fragment ('https://extensions.derpygamer2142.com/docs/gpusb3')
                            " ('"')
                        , (',')
                        pair:
                          property_identifier ('blocks')
                          : (':')
                          array:
                            [ ('[')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('compileHat')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('EVENT')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Define shader [NAME] using bind group layout [BGL]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('isEdgeActivated')
                                : (':')
                                false ('false')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('NAME')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myShader')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('BGL')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myBindGroupLayout')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('compileStart')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('COMMAND')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('compile shaders ')
                                  " ('"')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('onError')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('EVENT')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('when error thrown')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('isEdgeActivated')
                                : (':')
                                false ('false')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('clearError')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('COMMAND')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('clear current error')
                                  " ('"')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('error')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('REPORTER')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Error')
                                  " ('"')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('init')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('COMMAND')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Reconnect to GPU')
                                  " ('"')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('runGPU')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('COMMAND')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Run shader [GPUFUNC] using bind group [BINDGROUP] dimensions x: [X] y: [Y] z: [Z]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('GPUFUNC')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myShader')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('BINDGROUP')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myBindGroup')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('X')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('1')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('Y')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('1')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('Z')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('1')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('label')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Data input blocks')
                                  " ('"')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('createBindGroupLayout')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('CONDITIONAL')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Create bind group layout called [NAME]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('NAME')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myBindGroupLayout')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('bindGroupLayoutEntry')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('COMMAND')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Add bind group layout entry with binding [BINDING] for type [TYPE] and descriptor [DESC]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('BINDING')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('0')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('TYPE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('menu')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('BGLENTRYTYPES')
                                          " ('"')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('buffer')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('DESC')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('bufferEntryDescriptor')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('REPORTER')
                              , (',')
                              comment ("// note to self: this text is correct, there's a different descriptor for each type")
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Buffer layout entry descriptor with usage type [TYPE]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('TYPE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('menu')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('BUFFERENTRYTYPE')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('textureEntryDescriptor')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('REPORTER')
                              , (',')
                              comment ("// note to self: this text is correct, there's a different descriptor for each type")
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Texture layout entry descriptor with usage type [TYPE] and format [FORMAT]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('TYPE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('menu')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('TEXTUREENTRYTYPE')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('FORMAT')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('menu')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('TEXTURECOLORFORMATS')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('hideFromPalette')
                                : (':')
                                true ('true')
                              , (',')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('samplerEntryDescriptor')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('REPORTER')
                              , (',')
                              comment ("// note to self: this text is correct, there's a different descriptor for each type")
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Sampler layout entry descriptor with sample type [TYPE]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('TYPE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('menu')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('SAMPLERENTRYTYPE')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('createBindGroup')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('CONDITIONAL')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Create bind group called [NAME] using layout [LAYOUT]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('NAME')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myBindGroup')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('LAYOUT')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myBindGroupLayout')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('bindGroupEntry')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('COMMAND')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Add bind group entry with binding [BINDING] of type [TYPE] using resource named [RESOURCE]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('BINDING')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('0')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('TYPE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('menu')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('BGLENTRYTYPES')
                                          " ('"')
                                      , (',')
                                      comment ('// this is named badly ig?')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('buffer')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('RESOURCE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myBuffer')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('COMMAND')
                              , (',')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('createBuffer')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Create buffer called [NAME] with size(in bytes) [SIZE] and usage flags [USAGE]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('NAME')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myBuffer')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('SIZE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('8')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('USAGE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('140')
                                      , (',')
                                      comment ('// GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              comment ('// https://www.w3.org/TR/webgpu/#buffer-usage')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('bufferUsage')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('REPORTER')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Buffer usage [USAGE]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('USAGE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('menu')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('BUFFERUSAGE')
                                          " ('"')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('STORAGE')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('createTexture')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('COMMAND')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Create texture called [NAME] width dimensions [WIDTH] [HEIGHT], color format [FORMAT] and usage [USAGE]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('NAME')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myTexture')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('WIDTH')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('150')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('HEIGHT')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('150')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('FORMAT')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('menu')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('TEXTURECOLORFORMATS')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('USAGE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('6')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              comment ('// https://www.w3.org/TR/webgpu/#buffer-usage')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('textureUsage')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('REPORTER')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Texture usage [USAGE]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('USAGE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('menu')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('TEXTUREUSAGE')
                                          " ('"')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('STORAGE_BINDING')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              comment ("// I found out after implementing this that texture samplers don't work in compute shaders :,)")
                              pair:
                                property_identifier ('hideFromPalette')
                                : (':')
                                true ('true')
                              , (',')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('createSampler')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('COMMAND')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Create texture sampler called [NAME] with U address mode [UMODE] and v address mode [VMODE] and mag filter [MAGFILTER]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('NAME')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('mySampler')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('UMODE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('menu')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('ADDRESSMODES')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('VMODE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('menu')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('ADDRESSMODES')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('MAGFILTER')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('menu')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('FILTERMODES')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('REPORTER')
                              , (',')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('binaryOr')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Usage [A] | [B]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('A')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('128')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('B')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('4')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              comment ('// todo: add more typed arrays and maybe arbitrary data or something idk man')
                              comment ('// https://webidl.spec.whatwg.org/#AllowSharedBufferSource')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('genF32')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('REPORTER')
                              , (',')
                              pair:
                                property_identifier ('hideFromPalette')
                                : (':')
                                true ('true')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('F32 array from array [ARRAY]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('ARRAY')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        call_expression:
                                          member_expression:
                                            identifier ('JSON')
                                            . ('.')
                                            property_identifier ('stringify')
                                          arguments:
                                            ( ('(')
                                            array:
                                              [ ('[')
                                              number ('1')
                                              , (',')
                                              number ('2')
                                              , (',')
                                              number ('3')
                                              ] (']')
                                            ) (')')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('copyTextureToBuffer')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('COMMAND')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Copy texture [TEXTURE] to buffer [BUFFER] with dimensions [WIDTH] [HEIGHT]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('TEXTURE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myTexture')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('BUFFER')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myBuffer')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('WIDTH')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('15')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('HEIGHT')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('15')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('writeBuffer')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('COMMAND')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Write [SIZE] elements of data from arraybuffer [ARRAY] to buffer [BUFFER] from offset [OFF1] to offset [OFF2]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('SIZE')
                                    : (':')
                                    object:
                                      { ('{')
                                      comment ('// https://www.w3.org/TR/webgpu/#dom-gpuqueue-writebuffer')
                                      comment ('// in elements for typesarrays and bytes otherwise')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('3')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('ARRAY')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('BUFFER')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myBuffer')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('OFF1')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('0')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('OFF2')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('0')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              comment ('//hideFromPalette: true,')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('copyBufferToBuffer')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('COMMAND')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Copy [NUMBYTES] bytes of data from buffer [BUF1] from  position [BUF1OFF] to buffer [BUF2] at position [BUF2OFF]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('NUMBYTES')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('256')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('BUF1')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myBuffer1')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('BUF1OFF')
                                    : (':')
                                    object:
                                      { ('{')
                                      comment ('// IMPORTANT: THIS IS IN BYTES!!!!!!!!!')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('0')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('BUF2')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myBuffer2')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('BUF2OFF')
                                    : (':')
                                    object:
                                      { ('{')
                                      comment ('// IMPORTANT: THIS IS IN BYTES!!!!!!!!!')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('0')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('hideFromPalette')
                                : (':')
                                true ('true')
                              , (',')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('clearBuffer')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('COMMAND')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Clear [NUMBYTES] bytes(-1 for all) of buffer [BUFFER] from offset [OFFSET]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('NUMBYTES')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('128')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('BUFFER')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myBuffer')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('OFFSET')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('128')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('readBuffer')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('COMMAND')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Read buffer [BUFFER] to arraybuffer [ARRAYBUFFER]')
                                  " ('"')
                              , (',')
                              comment ('// todo: add an output type here, not just f32s')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('BUFFER')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myBuffer')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('ARRAYBUFFER')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myArrayBuffer')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('writeTexture')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('COMMAND')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Write texture data from [IMAGE] to texture [TEXTURE]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('IMAGE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('menu')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('IMAGELIST')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('TEXTURE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myTexture')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('label')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('ArrayBuffer blocks')
                                  " ('"')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('listABs')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('REPORTER')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('List arraybuffers')
                                  " ('"')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('createAB')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('COMMAND')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Create arraybuffer called [ARRAYBUFFER] with length [LENGTH]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('ARRAYBUFFER')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myArrayBuffer')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('LENGTH')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('16')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('createABFromArray')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('COMMAND')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Create arraybuffer and view called [ARRAYBUFFER] from array [ARRAY] of type [TYPE] ')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('ARRAYBUFFER')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myArrayBuffer')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('ARRAY')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('[1,2,3]')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('TYPE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('menu')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('TYPEDARRAYTYPES')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('deleteAB')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('COMMAND')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Delete arraybuffer [ARRAYBUFFER]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('ARRAYBUFFER')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myArrayBuffer')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('resizeAB')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('COMMAND')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Resize arraybuffer [ARRAYBUFFER] to [SIZE] bytes')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('ARRAYBUFFER')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('menu')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('ARRAYBUFFERS')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('SIZE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('16')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('listViews')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('REPORTER')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('List views')
                                  " ('"')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('createABView')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('COMMAND')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('View arraybuffer [ARRAYBUFFER] as [TYPE] called [NAME]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('ARRAYBUFFER')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('menu')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('ARRAYBUFFERS')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('TYPE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('menu')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('TYPEDARRAYTYPES')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('NAME')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myView')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('deleteView')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('COMMAND')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Delete view [NAME]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('NAME')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myView')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('setItemInView')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('COMMAND')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Set item [INDEX] of view [VIEW] to [VALUE]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('INDEX')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('0')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('VIEW')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myView')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('VALUE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('255')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('setView')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('COMMAND')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Copy data from array [ARRAY] to view [VIEW] from index [INDEX]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('ARRAY')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('[1,2,3]')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('VIEW')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myView')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('INDEX')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('0')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('fillView')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('COMMAND')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Fill items [START] to [END] of view [VIEW] with [VALUE]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('START')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('0')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('END')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('5')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('VIEW')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myView')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('VALUE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('3')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('itemOfView')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('REPORTER')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Item [INDEX] of arraybuffer view [VIEW]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('INDEX')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('0')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('VIEW')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myView')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('sliceView')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('REPORTER')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Items [START] to [END] of view [VIEW]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('START')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('0')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('END')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('3')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('VIEW')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myView')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('viewToArray')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('REPORTER')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Get view [VIEW] as array')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('VIEW')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myView')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('propFromView')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('REPORTER')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('[PROP] of view [VIEW]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('PROP')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('menu')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('TYPEDARRAYPROPS')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('VIEW')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myView')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('label')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('WGSL Blocks')
                                  " ('"')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('declareVar')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('COMMAND')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('declare [VARTYPE] variable as [NAME] with value [VALUE]: [TYPE]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('VARTYPE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('menu')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('VARTYPES')
                                          " ('"')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('var')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('NAME')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('someVariable')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('VALUE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('12')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('TYPE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('menu')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('TYPES')
                                          " ('"')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('auto')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('bindInput')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('COMMAND')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Bind shader resource # [BINDNUM] to variable [VARNAME] with settings [SETTINGS] type [INPUTTYPE]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('BINDNUM')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('0')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('VARNAME')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('data')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('SETTINGS')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('storage, read_write')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('INPUTTYPE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('array<f32>')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('variableUsage')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('REPORTER')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Variable usage [USAGE] next [NEXT]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('USAGE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('menu')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('VARUSAGE')
                                          " ('"')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('read_write')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('NEXT')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('varOp')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('COMMAND')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Variable [VARNAME] [VAROP]  [INPUT]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('VARNAME')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('someVariable')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('VAROP')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('menu')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('VAROPS')
                                          " ('"')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('+=')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('INPUT')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('8')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('getVar')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('REPORTER')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Get variable [NAME]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('NAME')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('someVariable')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('label')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('      ')
                                  " ('"')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('variablePointer')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('REPORTER')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Pointer to variable [VAR]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('VAR')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myVariable')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('indexObject')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('REPORTER')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('In object [ARRAY] get index [INDEX]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('ARRAY')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('someArray')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('INDEX')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('0')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('getProp')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('REPORTER')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('In object [OBJECT] get property [PROP]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('OBJECT')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('someObject')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('PROP')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('constructFromType')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('REPORTER')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Construct type [TYPE] with values [VALUES]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('TYPE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('menu')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('RAWTYPES')
                                          " ('"')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('f32')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('VALUES')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('typeConstructor')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('REPORTER')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Create type [TYPE] of [SUBTYPE], length(array only!) [LENGTH]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('TYPE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('menu')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('CONSTRUCTABLETYPES')
                                          " ('"')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('vec3')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('SUBTYPE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('LENGTH')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('matrixType')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('REPORTER')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Matrix type with [COLUMNS] columns and [ROWS] rows')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('COLUMNS')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('2')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('ROWS')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('2')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('textureType')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('REPORTER')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Texture type of [TYPE] with access [ACCESS]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('TYPE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('menu')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('TEXTURECOLORFORMATS')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('ACCESS')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('menu')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('VARIABLEACCESSTYPES')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('declareStruct')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('CONDITIONAL')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Declare struct called [NAME]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('NAME')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('MyStruct')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('structProperty')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('COMMAND')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Add property called [PROPERTY] with type [TYPE] to struct')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('PROPERTY')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('someProperty')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('TYPE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('f32')
                                          " ('"')
                                      , (',')
                                      pair:
                                        property_identifier ('menu')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('RAWTYPES')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('structType')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('REPORTER')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Type of struct [STRUCT]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('STRUCT')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('MyStruct')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('hideFromPalette')
                                : (':')
                                true ('true')
                              , (',')
                              comment ("// this doesn't work with compute shaders, but if i decide to get freaky and somehow add other shader types(i probably won't) why redo code")
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('samplerType')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('REPORTER')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Sampler type')
                                  " ('"')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('rootType')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('REPORTER')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Base type [TYPE]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('TYPE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('menu')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('RAWTYPES')
                                          " ('"')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('f32')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('label')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('      ')
                                  " ('"')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('wgslFunc')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('REPORTER')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('WGSL builtin [OPERATION] with args [VALUE]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('OPERATION')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('menu')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('WGSLFUNCS')
                                          " ('"')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('trunc')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('VALUE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('12.345')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('funcArgs')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('REPORTER')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Func arg input [ARG], next [NEXT]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('ARG')
                                    : (':')
                                    object:
                                      { ('{')
                                      comment ("// yee haw i'm a pirate")
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('15')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('NEXT')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('computeFunc')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('CONDITIONAL')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Computer shader with workgroup size [WGSIZE]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('WGSIZE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        call_expression:
                                          member_expression:
                                            identifier ('JSON')
                                            . ('.')
                                            property_identifier ('stringify')
                                          arguments:
                                            ( ('(')
                                            array:
                                              [ ('[')
                                              number ('1')
                                              ] (']')
                                            ) (')')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              pair:
                                property_identifier ('branchCount')
                                : (':')
                                number ('1')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('wgslForLoop')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('CONDITIONAL')
                              , (',')
                              comment ("// this isn't a conditional :trol:")
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('For [VARNAME] in range [START], [END]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('VARNAME')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('i')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('START')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('0')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('END')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('10')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              pair:
                                property_identifier ('branchCount')
                                : (':')
                                number ('1')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('wgslWhileLoop')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('CONDITIONAL')
                              , (',')
                              comment ("// this isn't a conditional :trol:")
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('While [COND]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('COND')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              pair:
                                property_identifier ('branchCount')
                                : (':')
                                number ('1')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('break')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('COMMAND')
                              , (',')
                              pair:
                                property_identifier ('isTerminal')
                                : (':')
                                true ('true')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('break')
                                  " ('"')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('continue')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('COMMAND')
                              , (',')
                              pair:
                                property_identifier ('isTerminal')
                                : (':')
                                true ('true')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('continue')
                                  " ('"')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('defFunc')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('CONDITIONAL')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Def function [FUNCNAME] that returns type [TYPE] with args [ARGS]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('FUNCNAME')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myFunc')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('TYPE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('menu')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('FUNCTYPES')
                                          " ('"')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('void')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  comment ('/*,\n                            ARGS: {\n                                type: Scratch.ArgumentType.STRING,\n                                defaultValue: ""\n                            }*/')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('defFuncArgs')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('REPORTER')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Def arg [ARGNAME]: [ARGTYPE], next [NEXTARG]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('ARGNAME')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('someArg')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('ARGTYPE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('menu')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('RAWTYPES')
                                          " ('"')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('i32')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('NEXTARG')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('getFuncArg')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('REPORTER')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Get function arg [ARGNAME]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('ARGNAME')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('someArg')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('funcReturn')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('COMMAND')
                              , (',')
                              pair:
                                property_identifier ('isTerminal')
                                : (':')
                                true ('true')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Return [TORETURN]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('TORETURN')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('c_runFunc')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('COMMAND')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Run function [FUNCNAME] with args [ARGS]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('FUNCNAME')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myFunc')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('ARGS')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('r_runFunc')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('REPORTER')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Run function [FUNCNAME] with args [ARGS]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('FUNCNAME')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myFunc')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('ARGS')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('label')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Thread safety')
                                  " ('"')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('atomicType')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('REPORTER')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Create atomic of type [BASE]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('BASE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('i32')
                                          " ('"')
                                      , (',')
                                      pair:
                                        property_identifier ('menu')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('ATOMICBASES')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('atomicLoad')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('REPORTER')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Load atomic [ATOMIC]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('ATOMIC')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myAtomic')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('c_atomicFunc')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('COMMAND')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Perform operation [OP] on atomic [ATOMIC] with value [VALUE]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('OP')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('menu')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('ATOMICFUNCTIONS')
                                          " ('"')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('atomicStore')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('ATOMIC')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myAtomic')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('VALUE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('15')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('r_atomicFunc')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('REPORTER')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Perform operation [OP] on atomic [ATOMIC] with value [VALUE]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('OP')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('menu')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('ATOMICFUNCTIONS')
                                          " ('"')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('atomicStore')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('ATOMIC')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('myAtomic')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  pair:
                                    property_identifier ('VALUE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('NUMBER')
                                      , (',')
                                      pair:
                                        property_identifier ('defaultValue')
                                        : (':')
                                        number ('15')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('barrier')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('COMMAND')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Barrier [TYPE]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('TYPE')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      pair:
                                        property_identifier ('menu')
                                        : (':')
                                        string:
                                          " ('"')
                                          string_fragment ('BARRIERFUNCTIONS')
                                          " ('"')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('label')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('      ')
                                  " ('"')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('c_arbitraryWGSL')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('COMMAND')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Arbitrary WGSL [TEXT]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('TEXT')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('opcode')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('r_arbitraryWGSL')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('blockType')
                                : (':')
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('BlockType')
                                  . ('.')
                                  property_identifier ('REPORTER')
                              , (',')
                              pair:
                                property_identifier ('text')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('Arbitrary WGSL [TEXT]')
                                  " ('"')
                              , (',')
                              pair:
                                property_identifier ('arguments')
                                : (':')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('TEXT')
                                    : (':')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('type')
                                        : (':')
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('ArgumentType')
                                          . ('.')
                                          property_identifier ('STRING')
                                      , (',')
                                      } ('}')
                                  , (',')
                                  } ('}')
                              , (',')
                              } ('}')
                            , (',')
                            ] (']')
                        , (',')
                        pair:
                          property_identifier ('menus')
                          : (':')
                          object:
                            { ('{')
                            pair:
                              property_identifier ('TYPES')
                              : (':')
                              object:
                                { ('{')
                                pair:
                                  property_identifier ('acceptReporters')
                                  : (':')
                                  true ('true')
                                , (',')
                                comment ("// i don't like this, but with acceptReporters as false it shows up in fields and not inputs.")
                                pair:
                                  property_identifier ('items')
                                  : (':')
                                  array:
                                    [ ('[')
                                    string:
                                      " ('"')
                                      string_fragment ('i32')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('u32')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('f32')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('bool')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('auto')
                                      " ('"')
                                    , (',')
                                    comment ('// f16?')
                                    ] (']')
                                , (',')
                                } ('}')
                            , (',')
                            pair:
                              property_identifier ('VARTYPES')
                              : (':')
                              object:
                                { ('{')
                                pair:
                                  property_identifier ('acceptReporters')
                                  : (':')
                                  true ('true')
                                , (',')
                                pair:
                                  property_identifier ('items')
                                  : (':')
                                  array:
                                    [ ('[')
                                    string:
                                      " ('"')
                                      string_fragment ('var')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('let')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('const')
                                      " ('"')
                                    ] (']')
                                , (',')
                                } ('}')
                            , (',')
                            pair:
                              property_identifier ('VAROPS')
                              : (':')
                              object:
                                { ('{')
                                pair:
                                  property_identifier ('acceptReporters')
                                  : (':')
                                  true ('true')
                                , (',')
                                pair:
                                  property_identifier ('items')
                                  : (':')
                                  array:
                                    [ ('[')
                                    string:
                                      " ('"')
                                      string_fragment ('=')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('+=')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('-=')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('*=')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('/=')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('%=')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('&=')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('|=')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('^=')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('>>=')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('<<=')
                                      " ('"')
                                    , (',')
                                    ] (']')
                                , (',')
                                } ('}')
                            , (',')
                            pair:
                              property_identifier ('WGSLFUNCS')
                              : (':')
                              object:
                                { ('{')
                                comment ('// every WGSL builtin function')
                                pair:
                                  property_identifier ('acceptReporters')
                                  : (':')
                                  true ('true')
                                , (',')
                                pair:
                                  property_identifier ('items')
                                  : (':')
                                  array:
                                    [ ('[')
                                    string:
                                      " ('"')
                                      string_fragment ('all')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('any')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('arrayLength')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('asinh')
                                      " ('"')
                                    , (',')
                                    comment ('// screw atomics, i can add them later')
                                    string:
                                      " ('"')
                                      string_fragment ('bitcast')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('bool')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('cosh')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('countLeadingZeros')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('countOneBits')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('countTrailingZeros')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('degrees')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('determinant')
                                      " ('"')
                                    , (',')
                                    comment ('/*"dpdx",\n                            "dpdxCoarse",\n                            "dpdxFine",\n                            "dpdy",\n                            "dpdyCoarse",\n                            "dpdyFine",*/')
                                    string:
                                      " ('"')
                                      string_fragment ('exp')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('exp2')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('f32')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('firstLeadingBit')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('firstTrailingBit')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('fract')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('frexp')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('i32')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('inverseSqrt')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('length')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('log')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('log2')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('modf')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('normalize')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('pack2x16float')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('pack2x16snorm')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('pack2x16unorm')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('pack4x8snorm')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('pack4x8unorm')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('quantizeToF16')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('radians')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('reverseBits')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('saturate')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('sign')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('sinh')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('tanh')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('textureDimensions')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('textureLoad')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('textureStore')
                                      " ('"')
                                    , (',')
                                    comment ('//"textureSample",')
                                    comment ('// "textureSampleBaseClampToEdge"')
                                    comment ('// "textureSampleBias"')
                                    comment ('// "textureSampleCompare"')
                                    comment ('// "textureSampleCompareLevel"')
                                    string:
                                      " ('"')
                                      string_fragment ('textureNumLayers')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('textureNumLevels')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('textureNumSamples')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('transpose')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('trunc')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('u32')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('unpack2x16float')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('unpack2x16snorm')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('unpack2x16unorm')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('unpack4x8snorm')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('unpack4x8unorm')
                                      " ('"')
                                    , (',')
                                    ] (']')
                                , (',')
                                } ('}')
                            , (',')
                            pair:
                              property_identifier ('FUNCTYPES')
                              : (':')
                              object:
                                { ('{')
                                pair:
                                  property_identifier ('acceptReporters')
                                  : (':')
                                  true ('true')
                                , (',')
                                pair:
                                  property_identifier ('items')
                                  : (':')
                                  array:
                                    [ ('[')
                                    string:
                                      " ('"')
                                      string_fragment ('i32')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('u32')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('f32')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('bool')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('void')
                                      " ('"')
                                    ] (']')
                                , (',')
                                } ('}')
                            , (',')
                            pair:
                              property_identifier ('RAWTYPES')
                              : (':')
                              object:
                                { ('{')
                                pair:
                                  property_identifier ('acceptReporters')
                                  : (':')
                                  true ('true')
                                , (',')
                                pair:
                                  property_identifier ('items')
                                  : (':')
                                  array:
                                    [ ('[')
                                    string:
                                      " ('"')
                                      string_fragment ('i32')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('u32')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('f32')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('bool')
                                      " ('"')
                                    ] (']')
                                , (',')
                                } ('}')
                            , (',')
                            pair:
                              property_identifier ('BGLENTRYTYPES')
                              : (':')
                              object:
                                { ('{')
                                pair:
                                  property_identifier ('acceptReporters')
                                  : (':')
                                  true ('true')
                                , (',')
                                pair:
                                  property_identifier ('items')
                                  : (':')
                                  array:
                                    [ ('[')
                                    string:
                                      " ('"')
                                      string_fragment ('buffer')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('storageTexture')
                                      " ('"')
                                    , (',')
                                    comment ('//"sampler"')
                                    ] (']')
                                , (',')
                                } ('}')
                            , (',')
                            pair:
                              property_identifier ('CONSTRUCTABLETYPES')
                              : (':')
                              object:
                                { ('{')
                                pair:
                                  property_identifier ('acceptReporters')
                                  : (':')
                                  true ('true')
                                , (',')
                                pair:
                                  property_identifier ('items')
                                  : (':')
                                  array:
                                    [ ('[')
                                    string:
                                      " ('"')
                                      string_fragment ('vec2')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('vec3')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('vec4')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('array')
                                      " ('"')
                                    ] (']')
                                , (',')
                                } ('}')
                            , (',')
                            pair:
                              property_identifier ('BUFFERUSAGE')
                              : (':')
                              object:
                                { ('{')
                                pair:
                                  property_identifier ('acceptReporters')
                                  : (':')
                                  true ('true')
                                , (',')
                                pair:
                                  property_identifier ('items')
                                  : (':')
                                  array:
                                    [ ('[')
                                    string:
                                      " ('"')
                                      string_fragment ('COPY_SRC')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('COPY_DST')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('MAP_READ')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('MAP_WRITE')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('QUERY_RESOLVE')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('STORAGE')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('UNIFORM')
                                      " ('"')
                                    , (',')
                                    ] (']')
                                , (',')
                                } ('}')
                            , (',')
                            pair:
                              property_identifier ('BUFFERENTRYTYPE')
                              : (':')
                              object:
                                { ('{')
                                comment ('// why does one buffer need so much data man')
                                pair:
                                  property_identifier ('acceptReporters')
                                  : (':')
                                  true ('true')
                                , (',')
                                pair:
                                  property_identifier ('items')
                                  : (':')
                                  array:
                                    [ ('[')
                                    string:
                                      " ('"')
                                      string_fragment ('read-only-storage')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('storage')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('uniform')
                                      " ('"')
                                    ] (']')
                                , (',')
                                } ('}')
                            , (',')
                            pair:
                              property_identifier ('VARUSAGE')
                              : (':')
                              object:
                                { ('{')
                                pair:
                                  property_identifier ('acceptReporters')
                                  : (':')
                                  true ('true')
                                , (',')
                                comment ('// https://www.w3.org/TR/WGSL/#var-and-value')
                                comment ('// https://www.w3.org/TR/WGSL/#enumerant')
                                comment ('// i hate this documentation so much')
                                comment ('// it took me 20 minutes to find any explanations of what these enumerators do')
                                comment ("// even then they're pretty bad and don't give a concrete answer for each one")
                                comment ('// some of these are just here in case someone wants them')
                                comment ('// who understands how they work better than i do')
                                pair:
                                  property_identifier ('items')
                                  : (':')
                                  array:
                                    [ ('[')
                                    string:
                                      " ('"')
                                      string_fragment ('read')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('write')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('read_write')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('function')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('private')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('workgroup')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('uniform')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('storage')
                                      " ('"')
                                    , (',')
                                    ] (']')
                                , (',')
                                } ('}')
                            , (',')
                            pair:
                              property_identifier ('ATOMICBASES')
                              : (':')
                              object:
                                { ('{')
                                pair:
                                  property_identifier ('acceptReporters')
                                  : (':')
                                  true ('true')
                                , (',')
                                pair:
                                  property_identifier ('items')
                                  : (':')
                                  array:
                                    [ ('[')
                                    string:
                                      " ('"')
                                      string_fragment ('i32')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('u32')
                                      " ('"')
                                    ] (']')
                                , (',')
                                } ('}')
                            , (',')
                            pair:
                              property_identifier ('ATOMICFUNCTIONS')
                              : (':')
                              object:
                                { ('{')
                                pair:
                                  property_identifier ('acceptReporters')
                                  : (':')
                                  true ('true')
                                , (',')
                                pair:
                                  property_identifier ('items')
                                  : (':')
                                  array:
                                    [ ('[')
                                    comment ('//https://www.w3.org/TR/WGSL/#atomic-builtin-functions')
                                    string:
                                      " ('"')
                                      string_fragment ('atomicStore')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('atomicAdd')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('atomicSub')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('atomicMax')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('atomicMin')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('atomicAnd')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('atomicOr')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('atomicXor')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('atomicExchange')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('atomicCompareExchangeWeak')
                                      " ('"')
                                    , (',')
                                    ] (']')
                                , (',')
                                } ('}')
                            , (',')
                            pair:
                              property_identifier ('BARRIERFUNCTIONS')
                              : (':')
                              object:
                                { ('{')
                                pair:
                                  property_identifier ('acceptReporters')
                                  : (':')
                                  true ('true')
                                , (',')
                                pair:
                                  property_identifier ('items')
                                  : (':')
                                  array:
                                    [ ('[')
                                    string:
                                      " ('"')
                                      string_fragment ('storageBarrier')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('workgroupBarrier')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('textureBarrier')
                                      " ('"')
                                    ] (']')
                                , (',')
                                } ('}')
                            , (',')
                            pair:
                              property_identifier ('TYPEDARRAYTYPES')
                              : (':')
                              object:
                                { ('{')
                                pair:
                                  property_identifier ('acceptReporters')
                                  : (':')
                                  true ('true')
                                , (',')
                                pair:
                                  property_identifier ('items')
                                  : (':')
                                  array:
                                    [ ('[')
                                    string:
                                      " ('"')
                                      string_fragment ('Int32Array')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('Uint32Array')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('Float32Array')
                                      " ('"')
                                    , (',')
                                    comment ("// webgpu doesn't support types below this comment, but people may want to access them using those types anyways")
                                    string:
                                      " ('"')
                                      string_fragment ('Int8Array')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('Uint8Array')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('Uint8ClampedArray')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('Int16Array')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('Uint16Array')
                                      " ('"')
                                    , (',')
                                    comment ('// "Float16Array",')
                                    comment ('// float16array is only available in firefox')
                                    string:
                                      " ('"')
                                      string_fragment ('BigInt64Array')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('BigUint64Array')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('Float64Array')
                                      " ('"')
                                    , (',')
                                    ] (']')
                                , (',')
                                } ('}')
                            , (',')
                            pair:
                              property_identifier ('ARRAYBUFFERS')
                              : (':')
                              object:
                                { ('{')
                                pair:
                                  property_identifier ('acceptReporters')
                                  : (':')
                                  true ('true')
                                , (',')
                                pair:
                                  property_identifier ('items')
                                  : (':')
                                  string:
                                    " ('"')
                                    string_fragment ('getArrayBuffersMenu')
                                    " ('"')
                                , (',')
                                } ('}')
                            , (',')
                            pair:
                              property_identifier ('TYPEDARRAYPROPS')
                              : (':')
                              object:
                                { ('{')
                                pair:
                                  property_identifier ('acceptReporters')
                                  : (':')
                                  true ('true')
                                , (',')
                                pair:
                                  property_identifier ('items')
                                  : (':')
                                  array:
                                    [ ('[')
                                    string:
                                      " ('"')
                                      string_fragment ('BYTES_PER_ELEMENT')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('byteLength')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('length')
                                      " ('"')
                                    ] (']')
                                , (',')
                                } ('}')
                            , (',')
                            pair:
                              property_identifier ('TEXTURECOLORFORMATS')
                              : (':')
                              object:
                                { ('{')
                                comment ('// https://www.w3.org/TR/webgpu/#enumdef-gputextureformat')
                                comment ("// some formats aren't supported(i think?), and depth textures aren't usable in compute shaders")
                                pair:
                                  property_identifier ('acceptReporters')
                                  : (':')
                                  true ('true')
                                , (',')
                                pair:
                                  property_identifier ('items')
                                  : (':')
                                  array:
                                    [ ('[')
                                    comment ('// 8-bit formats')
                                    string:
                                      " ('"')
                                      string_fragment ('r8unorm')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('r8snorm')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('r8uint')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('r8sint')
                                      " ('"')
                                    , (',')
                                    comment ('// 16-bit formats')
                                    string:
                                      " ('"')
                                      string_fragment ('r16uint')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('r16sint')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('r16float')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('rg8unorm')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('rg8snorm')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('rg8uint')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('rg8sint')
                                      " ('"')
                                    , (',')
                                    comment ('// 32-bit formats')
                                    string:
                                      " ('"')
                                      string_fragment ('r32uint')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('r32sint')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('r32float')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('rg16uint')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('rg16sint')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('rg16float')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('rgba8unorm')
                                      " ('"')
                                    , (',')
                                    comment ('//"rgba8unorm-srgb",')
                                    string:
                                      " ('"')
                                      string_fragment ('rgba8snorm')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('rgba8uint')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('rgba8sint')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('bgra8unorm')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('bgra8unorm-srgb')
                                      " ('"')
                                    , (',')
                                    comment ('// Packed 32-bit formats')
                                    comment ('// "rgb9e5ufloat",')
                                    comment ('// "rgb10a2uint",')
                                    comment ('// "rgb10a2unorm",')
                                    comment ('// "rg11b10ufloat",')
                                    comment ('// 64-bit formats')
                                    string:
                                      " ('"')
                                      string_fragment ('rg32uint')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('rg32sint')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('rg32float')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('rgba16uint')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('rgba16sint')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('rgba16float')
                                      " ('"')
                                    , (',')
                                    comment ('// 128-bit formats')
                                    string:
                                      " ('"')
                                      string_fragment ('rgba32uint')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('rgba32sint')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('rgba32float')
                                      " ('"')
                                    , (',')
                                    ] (']')
                                , (',')
                                } ('}')
                            , (',')
                            pair:
                              property_identifier ('TEXTUREUSAGE')
                              : (':')
                              object:
                                { ('{')
                                comment ('// https://www.w3.org/TR/webgpu/#dom-gputextureusage-storage_binding')
                                pair:
                                  property_identifier ('acceptReporters')
                                  : (':')
                                  true ('true')
                                , (',')
                                pair:
                                  property_identifier ('items')
                                  : (':')
                                  array:
                                    [ ('[')
                                    string:
                                      " ('"')
                                      string_fragment ('COPY_SRC')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('COPY_DST')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('TEXTURE_BINDING')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('STORAGE_BINDING')
                                      " ('"')
                                    , (',')
                                    comment ('// RENDER_ATTACHMENT intentionally excluded')
                                    ] (']')
                                , (',')
                                } ('}')
                            , (',')
                            pair:
                              property_identifier ('IMAGELIST')
                              : (':')
                              object:
                                { ('{')
                                pair:
                                  property_identifier ('acceptReporters')
                                  : (':')
                                  true ('true')
                                , (',')
                                pair:
                                  property_identifier ('items')
                                  : (':')
                                  string:
                                    " ('"')
                                    string_fragment ('getImageList')
                                    " ('"')
                                , (',')
                                } ('}')
                            , (',')
                            pair:
                              property_identifier ('ADDRESSMODES')
                              : (':')
                              object:
                                { ('{')
                                pair:
                                  property_identifier ('acceptReporters')
                                  : (':')
                                  true ('true')
                                , (',')
                                pair:
                                  property_identifier ('items')
                                  : (':')
                                  array:
                                    [ ('[')
                                    string:
                                      " ('"')
                                      string_fragment ('clamp-to-edge')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('repeat')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('mirror-repeat')
                                      " ('"')
                                    ] (']')
                                , (',')
                                } ('}')
                            , (',')
                            pair:
                              property_identifier ('FILTERMODES')
                              : (':')
                              object:
                                { ('{')
                                pair:
                                  property_identifier ('acceptReporters')
                                  : (':')
                                  true ('true')
                                , (',')
                                pair:
                                  property_identifier ('items')
                                  : (':')
                                  array:
                                    [ ('[')
                                    string:
                                      " ('"')
                                      string_fragment ('nearest')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('filter')
                                      " ('"')
                                    ] (']')
                                , (',')
                                } ('}')
                            , (',')
                            pair:
                              property_identifier ('TEXTUREENTRYTYPE')
                              : (':')
                              object:
                                { ('{')
                                pair:
                                  property_identifier ('acceptReporters')
                                  : (':')
                                  true ('true')
                                , (',')
                                pair:
                                  property_identifier ('items')
                                  : (':')
                                  array:
                                    [ ('[')
                                    string:
                                      " ('"')
                                      string_fragment ('write-only')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('read-only')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('read-write')
                                      " ('"')
                                    ] (']')
                                , (',')
                                } ('}')
                            , (',')
                            pair:
                              property_identifier ('SAMPLERENTRYTYPE')
                              : (':')
                              object:
                                { ('{')
                                pair:
                                  property_identifier ('acceptReporters')
                                  : (':')
                                  true ('true')
                                , (',')
                                pair:
                                  property_identifier ('items')
                                  : (':')
                                  array:
                                    [ ('[')
                                    string:
                                      " ('"')
                                      string_fragment ('float')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('unfilterable-float')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('sint')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('uint')
                                      " ('"')
                                    ] (']')
                                , (',')
                                } ('}')
                            , (',')
                            pair:
                              property_identifier ('TEXTUREBASETYPES')
                              : (':')
                              object:
                                { ('{')
                                pair:
                                  property_identifier ('acceptReporters')
                                  : (':')
                                  true ('true')
                                , (',')
                                pair:
                                  property_identifier ('items')
                                  : (':')
                                  array:
                                    [ ('[')
                                    string:
                                      " ('"')
                                      string_fragment ('f32')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('i32')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('u32')
                                      " ('"')
                                    ] (']')
                                , (',')
                                } ('}')
                            , (',')
                            pair:
                              property_identifier ('VARIABLEACCESSTYPES')
                              : (':')
                              object:
                                { ('{')
                                pair:
                                  property_identifier ('acceptReporters')
                                  : (':')
                                  true ('true')
                                , (',')
                                pair:
                                  property_identifier ('items')
                                  : (':')
                                  array:
                                    [ ('[')
                                    string:
                                      " ('"')
                                      string_fragment ('read')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('write')
                                      " ('"')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('read_write')
                                      " ('"')
                                    ] (']')
                                , (',')
                                } ('}')
                            , (',')
                            } ('}')
                        , (',')
                        } ('}')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('throwError')
                  formal_parameters:
                    ( ('(')
                    identifier ('errorname')
                    , (',')
                    identifier ('errorbody')
                    , (',')
                    identifier ('errorsource')
                    , (',')
                    identifier ('full')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    expression_statement:
                      assignment_expression:
                        identifier ('error')
                        = ('=')
                        object:
                          { ('{')
                          pair:
                            property_identifier ('name')
                            : (':')
                            binary_expression:
                              identifier ('errorname')
                              ?? ('??')
                              string:
                                " ('"')
                                string_fragment ('Undefined. This is an error, please report it!')
                                " ('"')
                          , (',')
                          pair:
                            property_identifier ('body')
                            : (':')
                            binary_expression:
                              identifier ('errorbody')
                              ?? ('??')
                              string:
                                " ('"')
                                string_fragment ('Undefined. This is an error, please report it!')
                                " ('"')
                          , (',')
                          pair:
                            property_identifier ('source')
                            : (':')
                            binary_expression:
                              identifier ('errorsource')
                              ?? ('??')
                              string:
                                " ('"')
                                string_fragment ('Undefined. This is an error, please report it!')
                                " ('"')
                          , (',')
                          pair:
                            property_identifier ('full')
                            : (':')
                            binary_expression:
                              identifier ('full')
                              ?? ('??')
                              string:
                                " ('"')
                                string_fragment ('Undefined. This is an error, please report it!')
                                " ('"')
                          , (',')
                          } ('}')
                      ; (';')
                    expression_statement:
                      call_expression:
                        member_expression:
                          identifier ('console')
                          . ('.')
                          property_identifier ('error')
                        arguments:
                          ( ('(')
                          identifier ('error')
                          ) (')')
                      ; (';')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        identifier ('util')
                        ) (')')
                      statement_block:
                        { ('{')
                        expression_statement:
                          call_expression:
                            member_expression:
                              identifier ('util')
                              . ('.')
                              property_identifier ('startHats')
                            arguments:
                              ( ('(')
                              string:
                                " ('"')
                                string_fragment ('gpusb3_onError')
                                " ('"')
                              ) (')')
                          ; (';')
                        } ('}')
                      else_clause:
                        else ('else')
                        statement_block:
                          { ('{')
                          expression_statement:
                            call_expression:
                              member_expression:
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('vm')
                                  . ('.')
                                  property_identifier ('runtime')
                                . ('.')
                                property_identifier ('startHats')
                              arguments:
                                ( ('(')
                                string:
                                  " ('"')
                                  string_fragment ('gpusb3_onError')
                                  " ('"')
                                ) (')')
                            ; (';')
                          } ('}')
                    } ('}')
                method_definition:
                  async ('async')
                  property_identifier ('init')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    comment ('// @ts-ignore')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        unary_expression:
                          ! ('!')
                          member_expression:
                            identifier ('navigator')
                            . ('.')
                            property_identifier ('gpu')
                        ) (')')
                      statement_block:
                        { ('{')
                        comment ('// why angry red lines >: (')
                        expression_statement:
                          call_expression:
                            identifier ('alert')
                            arguments:
                              ( ('(')
                              string:
                                " ('"')
                                string_fragment ('WebGPU is not supported.')
                                " ('"')
                              ) (')')
                          ; (';')
                        throw_statement:
                          throw ('throw')
                          new_expression:
                            new ('new')
                            identifier ('Error')
                            arguments:
                              ( ('(')
                              string:
                                " ('"')
                                string_fragment ('WebGPU is not supported.')
                                " ('"')
                              ) (')')
                          ; (';')
                        } ('}')
                    comment ('// @ts-ignore')
                    expression_statement:
                      assignment_expression:
                        member_expression:
                          this ('this')
                          . ('.')
                          property_identifier ('adapter')
                        = ('=')
                        await_expression:
                          await ('await')
                          call_expression:
                            member_expression:
                              member_expression:
                                identifier ('navigator')
                                . ('.')
                                property_identifier ('gpu')
                              . ('.')
                              property_identifier ('requestAdapter')
                            arguments:
                              ( ('(')
                              ) (')')
                      ; (';')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        unary_expression:
                          ! ('!')
                          member_expression:
                            this ('this')
                            . ('.')
                            property_identifier ('adapter')
                        ) (')')
                      statement_block:
                        { ('{')
                        expression_statement:
                          call_expression:
                            identifier ('alert')
                            arguments:
                              ( ('(')
                              string:
                                " ('"')
                                string_fragment ('Failed to get WebGPU adapter.')
                                " ('"')
                              ) (')')
                          ; (';')
                        throw_statement:
                          throw ('throw')
                          call_expression:
                            identifier ('Error')
                            arguments:
                              ( ('(')
                              string:
                                " ('"')
                                string_fragment ('Failed to get WebGPU adapter.')
                                " ('"')
                              ) (')')
                          ; (';')
                        } ('}')
                    expression_statement:
                      assignment_expression:
                        member_expression:
                          this ('this')
                          . ('.')
                          property_identifier ('device')
                        = ('=')
                        await_expression:
                          await ('await')
                          call_expression:
                            member_expression:
                              member_expression:
                                this ('this')
                                . ('.')
                                property_identifier ('adapter')
                              . ('.')
                              property_identifier ('requestDevice')
                            arguments:
                              ( ('(')
                              ) (')')
                      ; (';')
                    expression_statement:
                      call_expression:
                        member_expression:
                          member_expression:
                            member_expression:
                              this ('this')
                              . ('.')
                              property_identifier ('device')
                            . ('.')
                            property_identifier ('lost')
                          . ('.')
                          property_identifier ('then')
                        arguments:
                          ( ('(')
                          arrow_function:
                            formal_parameters:
                              ( ('(')
                              identifier ('info')
                              ) (')')
                            => ('=>')
                            statement_block:
                              { ('{')
                              expression_statement:
                                call_expression:
                                  member_expression:
                                    this ('this')
                                    . ('.')
                                    property_identifier ('throwError')
                                  arguments:
                                    ( ('(')
                                    string:
                                      " ('"')
                                      string_fragment ('DeviceLost')
                                      " ('"')
                                    , (',')
                                    member_expression:
                                      identifier ('info')
                                      . ('.')
                                      property_identifier ('message')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('wgpu')
                                      " ('"')
                                    , (',')
                                    identifier ('info')
                                    , (',')
                                    identifier ('util')
                                    ) (')')
                                ; (';')
                              } ('}')
                          ) (')')
                      ; (';')
                    comment ('// note to self: uncomment this on release')
                    comment ('/*this.device.addEventListener("uncapturederror",(event) => {\n                this.throwError("UnclassifiedError",event.error.message,"Unknown",event.error)\n            })*/')
                    } ('}')
                method_definition:
                  property_identifier ('textFromOp')
                  formal_parameters:
                    ( ('(')
                    identifier ('util')
                    , (',')
                    identifier ('blob')
                    , (',')
                    identifier ('unsafe')
                    ) (')')
                  statement_block:
                    { ('{')
                    comment ("// i can't remember if blocks is _blocks, so i'm just getting it again")
                    lexical_declaration:
                      const ('const')
                      variable_declarator:
                        identifier ('_blocks')
                        = ('=')
                        member_expression:
                          member_expression:
                            member_expression:
                              identifier ('util')
                              . ('.')
                              property_identifier ('thread')
                            . ('.')
                            property_identifier ('blockContainer')
                          . ('.')
                          property_identifier ('_blocks')
                      ; (';')
                    switch_statement:
                      switch ('switch')
                      parenthesized_expression:
                        ( ('(')
                        member_expression:
                          identifier ('blob')
                          . ('.')
                          property_identifier ('block')
                        ) (')')
                      switch_body:
                        { ('{')
                        switch_case:
                          case ('case')
                          string:
                            " ('"')
                            string_fragment ('text')
                            " ('"')
                          : (':')
                          statement_block:
                            { ('{')
                            comment ('//console.log(_blocks[blob.id])')
                            return_statement:
                              return ('return')
                              member_expression:
                                member_expression:
                                  member_expression:
                                    subscript_expression:
                                      identifier ('_blocks')
                                      [ ('[')
                                      member_expression:
                                        identifier ('blob')
                                        . ('.')
                                        property_identifier ('id')
                                      ] (']')
                                    . ('.')
                                    property_identifier ('fields')
                                  . ('.')
                                  property_identifier ('TEXT')
                                . ('.')
                                property_identifier ('value')
                              ; (';')
                            } ('}')
                        switch_case:
                          case ('case')
                          string:
                            " ('"')
                            string_fragment ('math_number')
                            " ('"')
                          : (':')
                          statement_block:
                            { ('{')
                            return_statement:
                              return ('return')
                              member_expression:
                                member_expression:
                                  member_expression:
                                    subscript_expression:
                                      identifier ('_blocks')
                                      [ ('[')
                                      member_expression:
                                        identifier ('blob')
                                        . ('.')
                                        property_identifier ('id')
                                      ] (']')
                                    . ('.')
                                    property_identifier ('fields')
                                  . ('.')
                                  property_identifier ('NUM')
                                . ('.')
                                property_identifier ('value')
                              ; (';')
                            } ('}')
                        switch_case:
                          case ('case')
                          string:
                            " ('"')
                            string_fragment ('gpusb3_menu_VARTYPES')
                            " ('"')
                          : (':')
                          statement_block:
                            { ('{')
                            return_statement:
                              return ('return')
                              member_expression:
                                member_expression:
                                  member_expression:
                                    subscript_expression:
                                      identifier ('_blocks')
                                      [ ('[')
                                      member_expression:
                                        identifier ('blob')
                                        . ('.')
                                        property_identifier ('id')
                                      ] (']')
                                    . ('.')
                                    property_identifier ('fields')
                                  . ('.')
                                  property_identifier ('VARTYPES')
                                . ('.')
                                property_identifier ('value')
                              ; (';')
                            } ('}')
                        switch_case:
                          case ('case')
                          string:
                            " ('"')
                            string_fragment ('gpusb3_menu_VAROPS')
                            " ('"')
                          : (':')
                          statement_block:
                            { ('{')
                            return_statement:
                              return ('return')
                              member_expression:
                                member_expression:
                                  member_expression:
                                    subscript_expression:
                                      identifier ('_blocks')
                                      [ ('[')
                                      member_expression:
                                        identifier ('blob')
                                        . ('.')
                                        property_identifier ('id')
                                      ] (']')
                                    . ('.')
                                    property_identifier ('fields')
                                  . ('.')
                                  property_identifier ('VAROPS')
                                . ('.')
                                property_identifier ('value')
                              ; (';')
                            } ('}')
                        switch_case:
                          case ('case')
                          string:
                            " ('"')
                            string_fragment ('gpusb3_menu_TYPES')
                            " ('"')
                          : (':')
                          statement_block:
                            { ('{')
                            return_statement:
                              return ('return')
                              member_expression:
                                member_expression:
                                  member_expression:
                                    subscript_expression:
                                      identifier ('_blocks')
                                      [ ('[')
                                      member_expression:
                                        identifier ('blob')
                                        . ('.')
                                        property_identifier ('id')
                                      ] (']')
                                    . ('.')
                                    property_identifier ('fields')
                                  . ('.')
                                  property_identifier ('TYPES')
                                . ('.')
                                property_identifier ('value')
                              ; (';')
                            } ('}')
                        switch_case:
                          case ('case')
                          string:
                            " ('"')
                            string_fragment ('gpusb3_menu_WGSLFUNCS')
                            " ('"')
                          : (':')
                          statement_block:
                            { ('{')
                            return_statement:
                              return ('return')
                              member_expression:
                                member_expression:
                                  member_expression:
                                    subscript_expression:
                                      identifier ('_blocks')
                                      [ ('[')
                                      member_expression:
                                        identifier ('blob')
                                        . ('.')
                                        property_identifier ('id')
                                      ] (']')
                                    . ('.')
                                    property_identifier ('fields')
                                  . ('.')
                                  property_identifier ('WGSLFUNCS')
                                . ('.')
                                property_identifier ('value')
                              ; (';')
                            } ('}')
                        switch_case:
                          case ('case')
                          string:
                            " ('"')
                            string_fragment ('gpusb3_menu_FUNCTYPES')
                            " ('"')
                          : (':')
                          statement_block:
                            { ('{')
                            return_statement:
                              return ('return')
                              member_expression:
                                member_expression:
                                  member_expression:
                                    subscript_expression:
                                      identifier ('_blocks')
                                      [ ('[')
                                      member_expression:
                                        identifier ('blob')
                                        . ('.')
                                        property_identifier ('id')
                                      ] (']')
                                    . ('.')
                                    property_identifier ('fields')
                                  . ('.')
                                  property_identifier ('FUNCTYPES')
                                . ('.')
                                property_identifier ('value')
                              ; (';')
                            } ('}')
                        switch_case:
                          case ('case')
                          string:
                            " ('"')
                            string_fragment ('gpusb3_menu_RAWTYPES')
                            " ('"')
                          : (':')
                          statement_block:
                            { ('{')
                            return_statement:
                              return ('return')
                              member_expression:
                                member_expression:
                                  member_expression:
                                    subscript_expression:
                                      identifier ('_blocks')
                                      [ ('[')
                                      member_expression:
                                        identifier ('blob')
                                        . ('.')
                                        property_identifier ('id')
                                      ] (']')
                                    . ('.')
                                    property_identifier ('fields')
                                  . ('.')
                                  property_identifier ('RAWTYPES')
                                . ('.')
                                property_identifier ('value')
                              ; (';')
                            } ('}')
                        switch_case:
                          case ('case')
                          string:
                            " ('"')
                            string_fragment ('gpusb3_menu_BGLENTRYTYPES')
                            " ('"')
                          : (':')
                          statement_block:
                            { ('{')
                            return_statement:
                              return ('return')
                              member_expression:
                                member_expression:
                                  member_expression:
                                    subscript_expression:
                                      identifier ('_blocks')
                                      [ ('[')
                                      member_expression:
                                        identifier ('blob')
                                        . ('.')
                                        property_identifier ('id')
                                      ] (']')
                                    . ('.')
                                    property_identifier ('fields')
                                  . ('.')
                                  property_identifier ('BGLENTRYTYPES')
                                . ('.')
                                property_identifier ('value')
                              ; (';')
                            } ('}')
                        switch_case:
                          case ('case')
                          string:
                            " ('"')
                            string_fragment ('gpusb3_menu_CONSTRUCTABLETYPES')
                            " ('"')
                          : (':')
                          statement_block:
                            { ('{')
                            return_statement:
                              return ('return')
                              member_expression:
                                member_expression:
                                  member_expression:
                                    subscript_expression:
                                      identifier ('_blocks')
                                      [ ('[')
                                      member_expression:
                                        identifier ('blob')
                                        . ('.')
                                        property_identifier ('id')
                                      ] (']')
                                    . ('.')
                                    property_identifier ('fields')
                                  . ('.')
                                  property_identifier ('CONSTRUCTABLETYPES')
                                . ('.')
                                property_identifier ('value')
                              ; (';')
                            } ('}')
                        switch_case:
                          case ('case')
                          string:
                            " ('"')
                            string_fragment ('gpusb3_menu_BUFFERUSAGE')
                            " ('"')
                          : (':')
                          statement_block:
                            { ('{')
                            return_statement:
                              return ('return')
                              member_expression:
                                member_expression:
                                  member_expression:
                                    subscript_expression:
                                      identifier ('_blocks')
                                      [ ('[')
                                      member_expression:
                                        identifier ('blob')
                                        . ('.')
                                        property_identifier ('id')
                                      ] (']')
                                    . ('.')
                                    property_identifier ('fields')
                                  . ('.')
                                  property_identifier ('BUFFERUSAGE')
                                . ('.')
                                property_identifier ('value')
                              ; (';')
                            } ('}')
                        switch_case:
                          case ('case')
                          string:
                            " ('"')
                            string_fragment ('gpusb3_menu_BUFFERENTRYTYPE')
                            " ('"')
                          : (':')
                          statement_block:
                            { ('{')
                            return_statement:
                              return ('return')
                              member_expression:
                                member_expression:
                                  member_expression:
                                    subscript_expression:
                                      identifier ('_blocks')
                                      [ ('[')
                                      member_expression:
                                        identifier ('blob')
                                        . ('.')
                                        property_identifier ('id')
                                      ] (']')
                                    . ('.')
                                    property_identifier ('fields')
                                  . ('.')
                                  property_identifier ('BUFFERENTRYTYPE')
                                . ('.')
                                property_identifier ('value')
                              ; (';')
                            } ('}')
                        switch_case:
                          case ('case')
                          string:
                            " ('"')
                            string_fragment ('gpusb3_menu_VARUSAGE')
                            " ('"')
                          : (':')
                          statement_block:
                            { ('{')
                            return_statement:
                              return ('return')
                              member_expression:
                                member_expression:
                                  member_expression:
                                    subscript_expression:
                                      identifier ('_blocks')
                                      [ ('[')
                                      member_expression:
                                        identifier ('blob')
                                        . ('.')
                                        property_identifier ('id')
                                      ] (']')
                                    . ('.')
                                    property_identifier ('fields')
                                  . ('.')
                                  property_identifier ('VARUSAGE')
                                . ('.')
                                property_identifier ('value')
                              ; (';')
                            } ('}')
                        switch_case:
                          case ('case')
                          string:
                            " ('"')
                            string_fragment ('gpusb3_menu_ATOMICBASES')
                            " ('"')
                          : (':')
                          statement_block:
                            { ('{')
                            return_statement:
                              return ('return')
                              member_expression:
                                member_expression:
                                  member_expression:
                                    subscript_expression:
                                      identifier ('_blocks')
                                      [ ('[')
                                      member_expression:
                                        identifier ('blob')
                                        . ('.')
                                        property_identifier ('id')
                                      ] (']')
                                    . ('.')
                                    property_identifier ('fields')
                                  . ('.')
                                  property_identifier ('ATOMICBASES')
                                . ('.')
                                property_identifier ('value')
                              ; (';')
                            } ('}')
                        switch_case:
                          case ('case')
                          string:
                            " ('"')
                            string_fragment ('gpusb3_menu_ATOMICFUNCTIONS')
                            " ('"')
                          : (':')
                          statement_block:
                            { ('{')
                            return_statement:
                              return ('return')
                              member_expression:
                                member_expression:
                                  member_expression:
                                    subscript_expression:
                                      identifier ('_blocks')
                                      [ ('[')
                                      member_expression:
                                        identifier ('blob')
                                        . ('.')
                                        property_identifier ('id')
                                      ] (']')
                                    . ('.')
                                    property_identifier ('fields')
                                  . ('.')
                                  property_identifier ('ATOMICFUNCTIONS')
                                . ('.')
                                property_identifier ('value')
                              ; (';')
                            } ('}')
                        switch_case:
                          case ('case')
                          string:
                            " ('"')
                            string_fragment ('gpusb3_menu_BARRIERFUNCTIONS')
                            " ('"')
                          : (':')
                          statement_block:
                            { ('{')
                            return_statement:
                              return ('return')
                              member_expression:
                                member_expression:
                                  member_expression:
                                    subscript_expression:
                                      identifier ('_blocks')
                                      [ ('[')
                                      member_expression:
                                        identifier ('blob')
                                        . ('.')
                                        property_identifier ('id')
                                      ] (']')
                                    . ('.')
                                    property_identifier ('fields')
                                  . ('.')
                                  property_identifier ('BARRIERFUNCTIONS')
                                . ('.')
                                property_identifier ('value')
                              ; (';')
                            } ('}')
                        switch_case:
                          case ('case')
                          string:
                            " ('"')
                            string_fragment ('gpusb3_menu_TEXTUREBASETYPES')
                            " ('"')
                          : (':')
                          statement_block:
                            { ('{')
                            return_statement:
                              return ('return')
                              member_expression:
                                member_expression:
                                  member_expression:
                                    subscript_expression:
                                      identifier ('_blocks')
                                      [ ('[')
                                      member_expression:
                                        identifier ('blob')
                                        . ('.')
                                        property_identifier ('id')
                                      ] (']')
                                    . ('.')
                                    property_identifier ('fields')
                                  . ('.')
                                  property_identifier ('TEXTUREBASETYPES')
                                . ('.')
                                property_identifier ('value')
                              ; (';')
                            } ('}')
                        switch_case:
                          case ('case')
                          string:
                            " ('"')
                            string_fragment ('gpusb3_samplerType')
                            " ('"')
                          : (':')
                          statement_block:
                            { ('{')
                            return_statement:
                              return ('return')
                              string:
                                " ('"')
                                string_fragment ('sampler')
                                " ('"')
                              ; (';')
                            comment ('// the codesmell here is crazy but this should work well enough')
                            } ('}')
                        switch_case:
                          case ('case')
                          string:
                            " ('"')
                            string_fragment ('gpusb3_menu_VARIABLEACCESSTYPES')
                            " ('"')
                          : (':')
                          statement_block:
                            { ('{')
                            return_statement:
                              return ('return')
                              member_expression:
                                member_expression:
                                  member_expression:
                                    subscript_expression:
                                      identifier ('_blocks')
                                      [ ('[')
                                      member_expression:
                                        identifier ('blob')
                                        . ('.')
                                        property_identifier ('id')
                                      ] (']')
                                    . ('.')
                                    property_identifier ('fields')
                                  . ('.')
                                  property_identifier ('VARIABLEACCESSTYPES')
                                . ('.')
                                property_identifier ('value')
                              ; (';')
                            } ('}')
                        switch_case:
                          case ('case')
                          string:
                            " ('"')
                            string_fragment ('gpusb3_menu_TEXTURECOLORFORMATS')
                            " ('"')
                          : (':')
                          statement_block:
                            { ('{')
                            return_statement:
                              return ('return')
                              member_expression:
                                member_expression:
                                  member_expression:
                                    subscript_expression:
                                      identifier ('_blocks')
                                      [ ('[')
                                      member_expression:
                                        identifier ('blob')
                                        . ('.')
                                        property_identifier ('id')
                                      ] (']')
                                    . ('.')
                                    property_identifier ('fields')
                                  . ('.')
                                  property_identifier ('TEXTURECOLORFORMATS')
                                . ('.')
                                property_identifier ('value')
                              ; (';')
                            } ('}')
                        switch_default:
                          default ('default')
                          : (':')
                          statement_block:
                            { ('{')
                            if_statement:
                              if ('if')
                              parenthesized_expression:
                                ( ('(')
                                identifier ('unsafe')
                                ) (')')
                              statement_block:
                                { ('{')
                                return_statement:
                                  return ('return')
                                  false ('false')
                                  ; (';')
                                } ('}')
                            expression_statement:
                              call_expression:
                                member_expression:
                                  this ('this')
                                  . ('.')
                                  property_identifier ('throwError')
                                arguments:
                                  ( ('(')
                                  string:
                                    " ('"')
                                    string_fragment ('MissingOp')
                                    " ('"')
                                  , (',')
                                  string:
                                    " ('"')
                                    string_fragment ('Input type not found, did you forget to add a menu?')
                                    " ('"')
                                  , (',')
                                  string:
                                    " ('"')
                                    string_fragment ('textFromOp')
                                    " ('"')
                                  , (',')
                                  string:
                                    " ('"')
                                    string_fragment ('Input type not found, did you forget to add a menu?')
                                    " ('"')
                                  , (',')
                                  identifier ('util')
                                  ) (')')
                              ; (';')
                            expression_statement:
                              call_expression:
                                member_expression:
                                  identifier ('console')
                                  . ('.')
                                  property_identifier ('log')
                                arguments:
                                  ( ('(')
                                  identifier ('blob')
                                  ) (')')
                              ; (';')
                            comment ("// note to self: might need to check for raw inputs or fix that because if a block has no inputs the array compiler doesn't make it an array")
                            return_statement:
                              return ('return')
                              string:
                                " ('"')
                                string_fragment ('Input type not found!')
                                " ('"')
                              ; (';')
                            } ('}')
                        } ('}')
                    } ('}')
                method_definition:
                  property_identifier ('findType')
                  formal_parameters:
                    ( ('(')
                    identifier ('input')
                    ) (')')
                  statement_block:
                    { ('{')
                    switch_statement:
                      switch ('switch')
                      parenthesized_expression:
                        ( ('(')
                        unary_expression:
                          typeof ('typeof')
                          identifier ('input')
                        ) (')')
                      switch_body:
                        { ('{')
                        switch_case:
                          case ('case')
                          string:
                            " ('"')
                            string_fragment ('string')
                            " ('"')
                          : (':')
                          statement_block:
                            { ('{')
                            if_statement:
                              if ('if')
                              parenthesized_expression:
                                ( ('(')
                                call_expression:
                                  member_expression:
                                    identifier ('Number')
                                    . ('.')
                                    property_identifier ('isNaN')
                                  arguments:
                                    ( ('(')
                                    call_expression:
                                      member_expression:
                                        identifier ('Number')
                                        . ('.')
                                        property_identifier ('parseFloat')
                                      arguments:
                                        ( ('(')
                                        identifier ('input')
                                        ) (')')
                                    ) (')')
                                ) (')')
                              statement_block:
                                { ('{')
                                if_statement:
                                  if ('if')
                                  parenthesized_expression:
                                    ( ('(')
                                    binary_expression:
                                      binary_expression:
                                        call_expression:
                                          member_expression:
                                            identifier ('input')
                                            . ('.')
                                            property_identifier ('toLowerCase')
                                          arguments:
                                            ( ('(')
                                            ) (')')
                                        === ('===')
                                        string:
                                          " ('"')
                                          string_fragment ('true')
                                          " ('"')
                                      || ('||')
                                      binary_expression:
                                        call_expression:
                                          member_expression:
                                            identifier ('input')
                                            . ('.')
                                            property_identifier ('toLowerCase')
                                          arguments:
                                            ( ('(')
                                            ) (')')
                                        === ('===')
                                        string:
                                          " ('"')
                                          string_fragment ('false')
                                          " ('"')
                                    ) (')')
                                  statement_block:
                                    { ('{')
                                    return_statement:
                                      return ('return')
                                      string:
                                        " ('"')
                                        string_fragment ('boolean')
                                        " ('"')
                                      ; (';')
                                    } ('}')
                                  else_clause:
                                    else ('else')
                                    if_statement:
                                      if ('if')
                                      parenthesized_expression:
                                        ( ('(')
                                        binary_expression:
                                          call_expression:
                                            member_expression:
                                              identifier ('input')
                                              . ('.')
                                              property_identifier ('toLowerCase')
                                            arguments:
                                              ( ('(')
                                              ) (')')
                                          === ('===')
                                          string:
                                            " ('"')
                                            string_fragment ('undefined')
                                            " ('"')
                                        ) (')')
                                      statement_block:
                                        { ('{')
                                        return_statement:
                                          return ('return')
                                          string:
                                            " ('"')
                                            string_fragment ('undefined')
                                            " ('"')
                                          ; (';')
                                        } ('}')
                                      else_clause:
                                        else ('else')
                                        if_statement:
                                          if ('if')
                                          parenthesized_expression:
                                            ( ('(')
                                            binary_expression:
                                              call_expression:
                                                member_expression:
                                                  identifier ('input')
                                                  . ('.')
                                                  property_identifier ('toLowerCase')
                                                arguments:
                                                  ( ('(')
                                                  ) (')')
                                              === ('===')
                                              string:
                                                " ('"')
                                                string_fragment ('null')
                                                " ('"')
                                            ) (')')
                                          statement_block:
                                            { ('{')
                                            return_statement:
                                              return ('return')
                                              string:
                                                " ('"')
                                                string_fragment ('null')
                                                " ('"')
                                              ; (';')
                                            } ('}')
                                          else_clause:
                                            else ('else')
                                            statement_block:
                                              { ('{')
                                              return_statement:
                                                return ('return')
                                                string:
                                                  " ('"')
                                                  string_fragment ('Error!')
                                                  " ('"')
                                                ; (';')
                                              } ('}')
                                } ('}')
                              else_clause:
                                else ('else')
                                statement_block:
                                  { ('{')
                                  return_statement:
                                    return ('return')
                                    call_expression:
                                      member_expression:
                                        this ('this')
                                        . ('.')
                                        property_identifier ('findType')
                                      arguments:
                                        ( ('(')
                                        call_expression:
                                          member_expression:
                                            identifier ('Number')
                                            . ('.')
                                            property_identifier ('parseFloat')
                                          arguments:
                                            ( ('(')
                                            identifier ('input')
                                            ) (')')
                                        ) (')')
                                    ; (';')
                                  } ('}')
                            } ('}')
                        switch_case:
                          case ('case')
                          string:
                            " ('"')
                            string_fragment ('number')
                            " ('"')
                          : (':')
                          statement_block:
                            { ('{')
                            if_statement:
                              if ('if')
                              parenthesized_expression:
                                ( ('(')
                                call_expression:
                                  member_expression:
                                    identifier ('Number')
                                    . ('.')
                                    property_identifier ('isInteger')
                                  arguments:
                                    ( ('(')
                                    identifier ('input')
                                    ) (')')
                                ) (')')
                              statement_block:
                                { ('{')
                                return_statement:
                                  return ('return')
                                  string:
                                    " ('"')
                                    string_fragment ('integer')
                                    " ('"')
                                  ; (';')
                                } ('}')
                              else_clause:
                                else ('else')
                                if_statement:
                                  if ('if')
                                  parenthesized_expression:
                                    ( ('(')
                                    call_expression:
                                      member_expression:
                                        identifier ('Number')
                                        . ('.')
                                        property_identifier ('isNaN')
                                      arguments:
                                        ( ('(')
                                        identifier ('input')
                                        ) (')')
                                    ) (')')
                                  statement_block:
                                    { ('{')
                                    return_statement:
                                      return ('return')
                                      string:
                                        " ('"')
                                        string_fragment ('NaN')
                                        " ('"')
                                      ; (';')
                                    } ('}')
                                  else_clause:
                                    else ('else')
                                    if_statement:
                                      if ('if')
                                      parenthesized_expression:
                                        ( ('(')
                                        unary_expression:
                                          ! ('!')
                                          call_expression:
                                            member_expression:
                                              identifier ('Number')
                                              . ('.')
                                              property_identifier ('isFinite')
                                            arguments:
                                              ( ('(')
                                              identifier ('input')
                                              ) (')')
                                        ) (')')
                                      statement_block:
                                        { ('{')
                                        return_statement:
                                          return ('return')
                                          string:
                                            " ('"')
                                            string_fragment ('infinity')
                                            " ('"')
                                          ; (';')
                                        } ('}')
                                      else_clause:
                                        else ('else')
                                        statement_block:
                                          { ('{')
                                          return_statement:
                                            return ('return')
                                            string:
                                              " ('"')
                                              string_fragment ('float')
                                              " ('"')
                                            ; (';')
                                          } ('}')
                            } ('}')
                        switch_case:
                          case ('case')
                          string:
                            " ('"')
                            string_fragment ('boolean')
                            " ('"')
                          : (':')
                          statement_block:
                            { ('{')
                            return_statement:
                              return ('return')
                              string:
                                " ('"')
                                string_fragment ('boolean')
                                " ('"')
                              ; (';')
                            } ('}')
                        switch_case:
                          case ('case')
                          string:
                            " ('"')
                            string_fragment ('undefined')
                            " ('"')
                          : (':')
                          statement_block:
                            { ('{')
                            return_statement:
                              return ('return')
                              string:
                                " ('"')
                                string_fragment ('undefined')
                                " ('"')
                              ; (';')
                            } ('}')
                        switch_case:
                          case ('case')
                          string:
                            " ('"')
                            string_fragment ('object')
                            " ('"')
                          : (':')
                          statement_block:
                            { ('{')
                            if_statement:
                              if ('if')
                              parenthesized_expression:
                                ( ('(')
                                binary_expression:
                                  identifier ('input')
                                  === ('===')
                                  null ('null')
                                ) (')')
                              statement_block:
                                { ('{')
                                return_statement:
                                  return ('return')
                                  string:
                                    " ('"')
                                    string_fragment ('null')
                                    " ('"')
                                  ; (';')
                                } ('}')
                            } ('}')
                        } ('}')
                    } ('}')
                method_definition:
                  property_identifier ('resolveInput')
                  formal_parameters:
                    ( ('(')
                    identifier ('util')
                    , (',')
                    identifier ('block')
                    ) (')')
                  statement_block:
                    { ('{')
                    return_statement:
                      return ('return')
                      ternary_expression:
                        call_expression:
                          member_expression:
                            identifier ('Array')
                            . ('.')
                            property_identifier ('isArray')
                          arguments:
                            ( ('(')
                            identifier ('block')
                            ) (')')
                        ? ('?')
                        call_expression:
                          member_expression:
                            this ('this')
                            . ('.')
                            property_identifier ('genWGSL')
                          arguments:
                            ( ('(')
                            identifier ('util')
                            , (',')
                            identifier ('block')
                            , (',')
                            number ('0')
                            ) (')')
                        : (':')
                        call_expression:
                          member_expression:
                            this ('this')
                            . ('.')
                            property_identifier ('textFromOp')
                          arguments:
                            ( ('(')
                            identifier ('util')
                            , (',')
                            identifier ('block')
                            , (',')
                            false ('false')
                            ) (')')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('isStringified')
                  formal_parameters:
                    ( ('(')
                    identifier ('text')
                    ) (')')
                  statement_block:
                    { ('{')
                    try_statement:
                      try ('try')
                      statement_block:
                        { ('{')
                        expression_statement:
                          call_expression:
                            member_expression:
                              identifier ('JSON')
                              . ('.')
                              property_identifier ('parse')
                            arguments:
                              ( ('(')
                              identifier ('text')
                              ) (')')
                          ; (';')
                        return_statement:
                          return ('return')
                          true ('true')
                          ; (';')
                        } ('}')
                      catch_clause:
                        catch ('catch')
                        statement_block:
                          { ('{')
                          return_statement:
                            return ('return')
                            false ('false')
                            ; (';')
                          } ('}')
                    } ('}')
                method_definition:
                  property_identifier ('genWGSL')
                  formal_parameters:
                    ( ('(')
                    identifier ('util')
                    , (',')
                    identifier ('blocks')
                    , (',')
                    identifier ('recursionDepth')
                    ) (')')
                  statement_block:
                    { ('{')
                    comment ('// for those wondering about isGeneratingArgumentsBecauseTheOtherThingITriedDidntWork, see https://github.com/derpygamer2142/example-extensions-fork/commit/bed128377314a95f6cf2775ed4771cf08d3f3e7e')
                    lexical_declaration:
                      let ('let')
                      variable_declarator:
                        identifier ('code')
                        = ('=')
                        string:
                          " ('"')
                          " ('"')
                      ; (';')
                    for_statement:
                      for ('for')
                      ( ('(')
                      lexical_declaration:
                        let ('let')
                        variable_declarator:
                          identifier ('i')
                          = ('=')
                          number ('0')
                        ; (';')
                      binary_expression:
                        identifier ('i')
                        < ('<')
                        member_expression:
                          identifier ('blocks')
                          . ('.')
                          property_identifier ('length')
                      ; (';')
                      update_expression:
                        identifier ('i')
                        ++ ('++')
                      ) (')')
                      statement_block:
                        { ('{')
                        comment ('//console.log(code)')
                        lexical_declaration:
                          let ('let')
                          variable_declarator:
                            identifier ('b')
                            = ('=')
                            subscript_expression:
                              identifier ('blocks')
                              [ ('[')
                              identifier ('i')
                              ] (']')
                          ; (';')
                        if_statement:
                          if ('if')
                          parenthesized_expression:
                            ( ('(')
                            call_expression:
                              member_expression:
                                identifier ('Array')
                                . ('.')
                                property_identifier ('isArray')
                              arguments:
                                ( ('(')
                                identifier ('b')
                                ) (')')
                            ) (')')
                          statement_block:
                            { ('{')
                            expression_statement:
                              assignment_expression:
                                identifier ('code')
                                = ('=')
                                call_expression:
                                  member_expression:
                                    identifier ('code')
                                    . ('.')
                                    property_identifier ('concat')
                                  arguments:
                                    ( ('(')
                                    call_expression:
                                      member_expression:
                                        this ('this')
                                        . ('.')
                                        property_identifier ('genWGSL')
                                      arguments:
                                        ( ('(')
                                        identifier ('util')
                                        , (',')
                                        subscript_expression:
                                          identifier ('blocks')
                                          [ ('[')
                                          identifier ('i')
                                          ] (']')
                                        , (',')
                                        binary_expression:
                                          identifier ('recursionDepth')
                                          + ('+')
                                          number ('1')
                                        ) (')')
                                    ) (')')
                              ; (';')
                            } ('}')
                          else_clause:
                            else ('else')
                            statement_block:
                              { ('{')
                              if_statement:
                                if ('if')
                                parenthesized_expression:
                                  ( ('(')
                                  binary_expression:
                                    unary_expression:
                                      typeof ('typeof')
                                      identifier ('b')
                                    === ('===')
                                    string:
                                      " ('"')
                                      string_fragment ('object')
                                      " ('"')
                                  ) (')')
                                statement_block:
                                  { ('{')
                                  comment ('//const op = b.block')
                                  switch_statement:
                                    switch ('switch')
                                    parenthesized_expression:
                                      ( ('(')
                                      member_expression:
                                        identifier ('b')
                                        . ('.')
                                        property_identifier ('block')
                                      ) (')')
                                    switch_body:
                                      { ('{')
                                      switch_case:
                                        case ('case')
                                        string:
                                          " ('"')
                                          string_fragment ('operator_equals')
                                          " ('"')
                                        : (':')
                                        statement_block:
                                          { ('{')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  string:
                                                    " ('"')
                                                    string_fragment (' (')
                                                    " ('"')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  call_expression:
                                                    member_expression:
                                                      this ('this')
                                                      . ('.')
                                                      property_identifier ('resolveInput')
                                                    arguments:
                                                      ( ('(')
                                                      identifier ('util')
                                                      , (',')
                                                      subscript_expression:
                                                        identifier ('blocks')
                                                        [ ('[')
                                                        binary_expression:
                                                          identifier ('i')
                                                          + ('+')
                                                          number ('1')
                                                        ] (']')
                                                      ) (')')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  string:
                                                    " ('"')
                                                    string_fragment (' == ')
                                                    " ('"')
                                                  ) (')')
                                            ; (';')
                                          comment ('// temp')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  call_expression:
                                                    member_expression:
                                                      this ('this')
                                                      . ('.')
                                                      property_identifier ('resolveInput')
                                                    arguments:
                                                      ( ('(')
                                                      identifier ('util')
                                                      , (',')
                                                      subscript_expression:
                                                        identifier ('blocks')
                                                        [ ('[')
                                                        binary_expression:
                                                          identifier ('i')
                                                          + ('+')
                                                          number ('2')
                                                        ] (']')
                                                      ) (')')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  string:
                                                    " ('"')
                                                    string_fragment (') ')
                                                    " ('"')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            augmented_assignment_expression:
                                              identifier ('i')
                                              += ('+=')
                                              number ('2')
                                            ; (';')
                                          break_statement:
                                            break ('break')
                                            ; (';')
                                          } ('}')
                                      switch_case:
                                        case ('case')
                                        string:
                                          " ('"')
                                          string_fragment ('operator_lt')
                                          " ('"')
                                        : (':')
                                        statement_block:
                                          { ('{')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  string:
                                                    " ('"')
                                                    string_fragment (' (')
                                                    " ('"')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  ternary_expression:
                                                    call_expression:
                                                      member_expression:
                                                        identifier ('Array')
                                                        . ('.')
                                                        property_identifier ('isArray')
                                                      arguments:
                                                        ( ('(')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('1')
                                                          ] (']')
                                                        ) (')')
                                                    ? ('?')
                                                    call_expression:
                                                      member_expression:
                                                        this ('this')
                                                        . ('.')
                                                        property_identifier ('genWGSL')
                                                      arguments:
                                                        ( ('(')
                                                        identifier ('util')
                                                        , (',')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('1')
                                                          ] (']')
                                                        , (',')
                                                        binary_expression:
                                                          identifier ('recursionDepth')
                                                          + ('+')
                                                          number ('1')
                                                        ) (')')
                                                    : (':')
                                                    call_expression:
                                                      member_expression:
                                                        this ('this')
                                                        . ('.')
                                                        property_identifier ('textFromOp')
                                                      arguments:
                                                        ( ('(')
                                                        identifier ('util')
                                                        , (',')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('1')
                                                          ] (']')
                                                        , (',')
                                                        false ('false')
                                                        ) (')')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  string:
                                                    " ('"')
                                                    string_fragment (' < ')
                                                    " ('"')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  call_expression:
                                                    member_expression:
                                                      this ('this')
                                                      . ('.')
                                                      property_identifier ('resolveInput')
                                                    arguments:
                                                      ( ('(')
                                                      identifier ('util')
                                                      , (',')
                                                      subscript_expression:
                                                        identifier ('blocks')
                                                        [ ('[')
                                                        binary_expression:
                                                          identifier ('i')
                                                          + ('+')
                                                          number ('2')
                                                        ] (']')
                                                      ) (')')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  string:
                                                    " ('"')
                                                    string_fragment (') ')
                                                    " ('"')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            augmented_assignment_expression:
                                              identifier ('i')
                                              += ('+=')
                                              number ('2')
                                            ; (';')
                                          break_statement:
                                            break ('break')
                                            ; (';')
                                          } ('}')
                                      switch_case:
                                        case ('case')
                                        string:
                                          " ('"')
                                          string_fragment ('operator_gt')
                                          " ('"')
                                        : (':')
                                        statement_block:
                                          { ('{')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  string:
                                                    " ('"')
                                                    string_fragment (' (')
                                                    " ('"')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  ternary_expression:
                                                    call_expression:
                                                      member_expression:
                                                        identifier ('Array')
                                                        . ('.')
                                                        property_identifier ('isArray')
                                                      arguments:
                                                        ( ('(')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('1')
                                                          ] (']')
                                                        ) (')')
                                                    ? ('?')
                                                    call_expression:
                                                      member_expression:
                                                        this ('this')
                                                        . ('.')
                                                        property_identifier ('genWGSL')
                                                      arguments:
                                                        ( ('(')
                                                        identifier ('util')
                                                        , (',')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('1')
                                                          ] (']')
                                                        , (',')
                                                        binary_expression:
                                                          identifier ('recursionDepth')
                                                          + ('+')
                                                          number ('1')
                                                        ) (')')
                                                    : (':')
                                                    call_expression:
                                                      member_expression:
                                                        this ('this')
                                                        . ('.')
                                                        property_identifier ('textFromOp')
                                                      arguments:
                                                        ( ('(')
                                                        identifier ('util')
                                                        , (',')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('1')
                                                          ] (']')
                                                        , (',')
                                                        false ('false')
                                                        ) (')')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  string:
                                                    " ('"')
                                                    string_fragment (' > ')
                                                    " ('"')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  call_expression:
                                                    member_expression:
                                                      this ('this')
                                                      . ('.')
                                                      property_identifier ('resolveInput')
                                                    arguments:
                                                      ( ('(')
                                                      identifier ('util')
                                                      , (',')
                                                      subscript_expression:
                                                        identifier ('blocks')
                                                        [ ('[')
                                                        binary_expression:
                                                          identifier ('i')
                                                          + ('+')
                                                          number ('2')
                                                        ] (']')
                                                      ) (')')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  string:
                                                    " ('"')
                                                    string_fragment (') ')
                                                    " ('"')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            augmented_assignment_expression:
                                              identifier ('i')
                                              += ('+=')
                                              number ('2')
                                            ; (';')
                                          break_statement:
                                            break ('break')
                                            ; (';')
                                          } ('}')
                                      switch_case:
                                        case ('case')
                                        string:
                                          " ('"')
                                          string_fragment ('operator_and')
                                          " ('"')
                                        : (':')
                                        statement_block:
                                          { ('{')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  string:
                                                    " ('"')
                                                    string_fragment (' (')
                                                    " ('"')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  ternary_expression:
                                                    call_expression:
                                                      member_expression:
                                                        identifier ('Array')
                                                        . ('.')
                                                        property_identifier ('isArray')
                                                      arguments:
                                                        ( ('(')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('1')
                                                          ] (']')
                                                        ) (')')
                                                    ? ('?')
                                                    call_expression:
                                                      member_expression:
                                                        this ('this')
                                                        . ('.')
                                                        property_identifier ('genWGSL')
                                                      arguments:
                                                        ( ('(')
                                                        identifier ('util')
                                                        , (',')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('1')
                                                          ] (']')
                                                        , (',')
                                                        binary_expression:
                                                          identifier ('recursionDepth')
                                                          + ('+')
                                                          number ('1')
                                                        ) (')')
                                                    : (':')
                                                    call_expression:
                                                      member_expression:
                                                        this ('this')
                                                        . ('.')
                                                        property_identifier ('textFromOp')
                                                      arguments:
                                                        ( ('(')
                                                        identifier ('util')
                                                        , (',')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('1')
                                                          ] (']')
                                                        , (',')
                                                        false ('false')
                                                        ) (')')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  string:
                                                    " ('"')
                                                    string_fragment (' && ')
                                                    " ('"')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  call_expression:
                                                    member_expression:
                                                      this ('this')
                                                      . ('.')
                                                      property_identifier ('resolveInput')
                                                    arguments:
                                                      ( ('(')
                                                      identifier ('util')
                                                      , (',')
                                                      subscript_expression:
                                                        identifier ('blocks')
                                                        [ ('[')
                                                        binary_expression:
                                                          identifier ('i')
                                                          + ('+')
                                                          number ('2')
                                                        ] (']')
                                                      ) (')')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  string:
                                                    " ('"')
                                                    string_fragment (') ')
                                                    " ('"')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            augmented_assignment_expression:
                                              identifier ('i')
                                              += ('+=')
                                              number ('2')
                                            ; (';')
                                          break_statement:
                                            break ('break')
                                            ; (';')
                                          } ('}')
                                      switch_case:
                                        case ('case')
                                        string:
                                          " ('"')
                                          string_fragment ('operator_or')
                                          " ('"')
                                        : (':')
                                        statement_block:
                                          { ('{')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  string:
                                                    " ('"')
                                                    string_fragment (' (')
                                                    " ('"')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  ternary_expression:
                                                    call_expression:
                                                      member_expression:
                                                        identifier ('Array')
                                                        . ('.')
                                                        property_identifier ('isArray')
                                                      arguments:
                                                        ( ('(')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('1')
                                                          ] (']')
                                                        ) (')')
                                                    ? ('?')
                                                    call_expression:
                                                      member_expression:
                                                        this ('this')
                                                        . ('.')
                                                        property_identifier ('genWGSL')
                                                      arguments:
                                                        ( ('(')
                                                        identifier ('util')
                                                        , (',')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('1')
                                                          ] (']')
                                                        , (',')
                                                        binary_expression:
                                                          identifier ('recursionDepth')
                                                          + ('+')
                                                          number ('1')
                                                        ) (')')
                                                    : (':')
                                                    call_expression:
                                                      member_expression:
                                                        this ('this')
                                                        . ('.')
                                                        property_identifier ('textFromOp')
                                                      arguments:
                                                        ( ('(')
                                                        identifier ('util')
                                                        , (',')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('1')
                                                          ] (']')
                                                        , (',')
                                                        false ('false')
                                                        ) (')')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  string:
                                                    " ('"')
                                                    string_fragment (' || ')
                                                    " ('"')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  call_expression:
                                                    member_expression:
                                                      this ('this')
                                                      . ('.')
                                                      property_identifier ('resolveInput')
                                                    arguments:
                                                      ( ('(')
                                                      identifier ('util')
                                                      , (',')
                                                      subscript_expression:
                                                        identifier ('blocks')
                                                        [ ('[')
                                                        binary_expression:
                                                          identifier ('i')
                                                          + ('+')
                                                          number ('2')
                                                        ] (']')
                                                      ) (')')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  string:
                                                    " ('"')
                                                    string_fragment (') ')
                                                    " ('"')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            augmented_assignment_expression:
                                              identifier ('i')
                                              += ('+=')
                                              number ('2')
                                            ; (';')
                                          break_statement:
                                            break ('break')
                                            ; (';')
                                          } ('}')
                                      switch_case:
                                        case ('case')
                                        string:
                                          " ('"')
                                          string_fragment ('operator_add')
                                          " ('"')
                                        : (':')
                                        statement_block:
                                          { ('{')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  string:
                                                    " ('"')
                                                    string_fragment (' (')
                                                    " ('"')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  ternary_expression:
                                                    call_expression:
                                                      member_expression:
                                                        identifier ('Array')
                                                        . ('.')
                                                        property_identifier ('isArray')
                                                      arguments:
                                                        ( ('(')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('1')
                                                          ] (']')
                                                        ) (')')
                                                    ? ('?')
                                                    call_expression:
                                                      member_expression:
                                                        this ('this')
                                                        . ('.')
                                                        property_identifier ('genWGSL')
                                                      arguments:
                                                        ( ('(')
                                                        identifier ('util')
                                                        , (',')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('1')
                                                          ] (']')
                                                        , (',')
                                                        binary_expression:
                                                          identifier ('recursionDepth')
                                                          + ('+')
                                                          number ('1')
                                                        ) (')')
                                                    : (':')
                                                    call_expression:
                                                      member_expression:
                                                        this ('this')
                                                        . ('.')
                                                        property_identifier ('textFromOp')
                                                      arguments:
                                                        ( ('(')
                                                        identifier ('util')
                                                        , (',')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('1')
                                                          ] (']')
                                                        , (',')
                                                        false ('false')
                                                        ) (')')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  string:
                                                    " ('"')
                                                    string_fragment (' + ')
                                                    " ('"')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  call_expression:
                                                    member_expression:
                                                      this ('this')
                                                      . ('.')
                                                      property_identifier ('resolveInput')
                                                    arguments:
                                                      ( ('(')
                                                      identifier ('util')
                                                      , (',')
                                                      subscript_expression:
                                                        identifier ('blocks')
                                                        [ ('[')
                                                        binary_expression:
                                                          identifier ('i')
                                                          + ('+')
                                                          number ('2')
                                                        ] (']')
                                                      ) (')')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  string:
                                                    " ('"')
                                                    string_fragment (') ')
                                                    " ('"')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            augmented_assignment_expression:
                                              identifier ('i')
                                              += ('+=')
                                              number ('2')
                                            ; (';')
                                          break_statement:
                                            break ('break')
                                            ; (';')
                                          } ('}')
                                      switch_case:
                                        case ('case')
                                        string:
                                          " ('"')
                                          string_fragment ('operator_subtract')
                                          " ('"')
                                        : (':')
                                        statement_block:
                                          { ('{')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  string:
                                                    " ('"')
                                                    string_fragment (' (')
                                                    " ('"')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  ternary_expression:
                                                    call_expression:
                                                      member_expression:
                                                        identifier ('Array')
                                                        . ('.')
                                                        property_identifier ('isArray')
                                                      arguments:
                                                        ( ('(')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('1')
                                                          ] (']')
                                                        ) (')')
                                                    ? ('?')
                                                    call_expression:
                                                      member_expression:
                                                        this ('this')
                                                        . ('.')
                                                        property_identifier ('genWGSL')
                                                      arguments:
                                                        ( ('(')
                                                        identifier ('util')
                                                        , (',')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('1')
                                                          ] (']')
                                                        , (',')
                                                        binary_expression:
                                                          identifier ('recursionDepth')
                                                          + ('+')
                                                          number ('1')
                                                        ) (')')
                                                    : (':')
                                                    call_expression:
                                                      member_expression:
                                                        this ('this')
                                                        . ('.')
                                                        property_identifier ('textFromOp')
                                                      arguments:
                                                        ( ('(')
                                                        identifier ('util')
                                                        , (',')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('1')
                                                          ] (']')
                                                        , (',')
                                                        false ('false')
                                                        ) (')')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  string:
                                                    " ('"')
                                                    string_fragment (' - ')
                                                    " ('"')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  call_expression:
                                                    member_expression:
                                                      this ('this')
                                                      . ('.')
                                                      property_identifier ('resolveInput')
                                                    arguments:
                                                      ( ('(')
                                                      identifier ('util')
                                                      , (',')
                                                      subscript_expression:
                                                        identifier ('blocks')
                                                        [ ('[')
                                                        binary_expression:
                                                          identifier ('i')
                                                          + ('+')
                                                          number ('2')
                                                        ] (']')
                                                      ) (')')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  string:
                                                    " ('"')
                                                    string_fragment (') ')
                                                    " ('"')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            augmented_assignment_expression:
                                              identifier ('i')
                                              += ('+=')
                                              number ('2')
                                            ; (';')
                                          break_statement:
                                            break ('break')
                                            ; (';')
                                          } ('}')
                                      switch_case:
                                        case ('case')
                                        string:
                                          " ('"')
                                          string_fragment ('operator_multiply')
                                          " ('"')
                                        : (':')
                                        statement_block:
                                          { ('{')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  string:
                                                    " ('"')
                                                    string_fragment (' (')
                                                    " ('"')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  ternary_expression:
                                                    call_expression:
                                                      member_expression:
                                                        identifier ('Array')
                                                        . ('.')
                                                        property_identifier ('isArray')
                                                      arguments:
                                                        ( ('(')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('1')
                                                          ] (']')
                                                        ) (')')
                                                    ? ('?')
                                                    call_expression:
                                                      member_expression:
                                                        this ('this')
                                                        . ('.')
                                                        property_identifier ('genWGSL')
                                                      arguments:
                                                        ( ('(')
                                                        identifier ('util')
                                                        , (',')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('1')
                                                          ] (']')
                                                        , (',')
                                                        binary_expression:
                                                          identifier ('recursionDepth')
                                                          + ('+')
                                                          number ('1')
                                                        ) (')')
                                                    : (':')
                                                    call_expression:
                                                      member_expression:
                                                        this ('this')
                                                        . ('.')
                                                        property_identifier ('textFromOp')
                                                      arguments:
                                                        ( ('(')
                                                        identifier ('util')
                                                        , (',')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('1')
                                                          ] (']')
                                                        , (',')
                                                        false ('false')
                                                        ) (')')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  string:
                                                    " ('"')
                                                    string_fragment (' * ')
                                                    " ('"')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  call_expression:
                                                    member_expression:
                                                      this ('this')
                                                      . ('.')
                                                      property_identifier ('resolveInput')
                                                    arguments:
                                                      ( ('(')
                                                      identifier ('util')
                                                      , (',')
                                                      subscript_expression:
                                                        identifier ('blocks')
                                                        [ ('[')
                                                        binary_expression:
                                                          identifier ('i')
                                                          + ('+')
                                                          number ('2')
                                                        ] (']')
                                                      ) (')')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  string:
                                                    " ('"')
                                                    string_fragment (') ')
                                                    " ('"')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            augmented_assignment_expression:
                                              identifier ('i')
                                              += ('+=')
                                              number ('2')
                                            ; (';')
                                          break_statement:
                                            break ('break')
                                            ; (';')
                                          } ('}')
                                      switch_case:
                                        case ('case')
                                        string:
                                          " ('"')
                                          string_fragment ('operator_divide')
                                          " ('"')
                                        : (':')
                                        statement_block:
                                          { ('{')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  string:
                                                    " ('"')
                                                    string_fragment (' (')
                                                    " ('"')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  ternary_expression:
                                                    call_expression:
                                                      member_expression:
                                                        identifier ('Array')
                                                        . ('.')
                                                        property_identifier ('isArray')
                                                      arguments:
                                                        ( ('(')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('1')
                                                          ] (']')
                                                        ) (')')
                                                    ? ('?')
                                                    call_expression:
                                                      member_expression:
                                                        this ('this')
                                                        . ('.')
                                                        property_identifier ('genWGSL')
                                                      arguments:
                                                        ( ('(')
                                                        identifier ('util')
                                                        , (',')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('1')
                                                          ] (']')
                                                        , (',')
                                                        binary_expression:
                                                          identifier ('recursionDepth')
                                                          + ('+')
                                                          number ('1')
                                                        ) (')')
                                                    : (':')
                                                    call_expression:
                                                      member_expression:
                                                        this ('this')
                                                        . ('.')
                                                        property_identifier ('textFromOp')
                                                      arguments:
                                                        ( ('(')
                                                        identifier ('util')
                                                        , (',')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('1')
                                                          ] (']')
                                                        , (',')
                                                        false ('false')
                                                        ) (')')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  string:
                                                    " ('"')
                                                    string_fragment (' / ')
                                                    " ('"')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  call_expression:
                                                    member_expression:
                                                      this ('this')
                                                      . ('.')
                                                      property_identifier ('resolveInput')
                                                    arguments:
                                                      ( ('(')
                                                      identifier ('util')
                                                      , (',')
                                                      subscript_expression:
                                                        identifier ('blocks')
                                                        [ ('[')
                                                        binary_expression:
                                                          identifier ('i')
                                                          + ('+')
                                                          number ('2')
                                                        ] (']')
                                                      ) (')')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  string:
                                                    " ('"')
                                                    string_fragment (') ')
                                                    " ('"')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            augmented_assignment_expression:
                                              identifier ('i')
                                              += ('+=')
                                              number ('2')
                                            ; (';')
                                          break_statement:
                                            break ('break')
                                            ; (';')
                                          } ('}')
                                      switch_case:
                                        case ('case')
                                        string:
                                          " ('"')
                                          string_fragment ('operator_mod')
                                          " ('"')
                                        : (':')
                                        statement_block:
                                          { ('{')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  string:
                                                    " ('"')
                                                    string_fragment (' (')
                                                    " ('"')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  call_expression:
                                                    member_expression:
                                                      this ('this')
                                                      . ('.')
                                                      property_identifier ('resolveInput')
                                                    arguments:
                                                      ( ('(')
                                                      identifier ('util')
                                                      , (',')
                                                      subscript_expression:
                                                        identifier ('blocks')
                                                        [ ('[')
                                                        binary_expression:
                                                          identifier ('i')
                                                          + ('+')
                                                          number ('1')
                                                        ] (']')
                                                      ) (')')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  string:
                                                    " ('"')
                                                    string_fragment (' % ')
                                                    " ('"')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  call_expression:
                                                    member_expression:
                                                      this ('this')
                                                      . ('.')
                                                      property_identifier ('resolveInput')
                                                    arguments:
                                                      ( ('(')
                                                      identifier ('util')
                                                      , (',')
                                                      subscript_expression:
                                                        identifier ('blocks')
                                                        [ ('[')
                                                        binary_expression:
                                                          identifier ('i')
                                                          + ('+')
                                                          number ('2')
                                                        ] (']')
                                                      ) (')')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  string:
                                                    " ('"')
                                                    string_fragment (') ')
                                                    " ('"')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            augmented_assignment_expression:
                                              identifier ('i')
                                              += ('+=')
                                              number ('2')
                                            ; (';')
                                          break_statement:
                                            break ('break')
                                            ; (';')
                                          } ('}')
                                      switch_case:
                                        case ('case')
                                        string:
                                          " ('"')
                                          string_fragment ('operator_mathop')
                                          " ('"')
                                        : (':')
                                        statement_block:
                                          { ('{')
                                          comment ("/*\n                                from https://github.com/TurboWarp/scratch-vm/blob/11eec6604d766dc75fc5eb223b7bd31f167fee88/src/blocks/scratch3_operators.js\n\n                                case 'abs': return Math.abs(n);\n                                case 'floor': return Math.floor(n);\n                                case 'ceiling': return Math.ceil(n);\n                                case 'sqrt': return Math.sqrt(n);\n                                case 'sin': return Math.round(Math.sin((Math.PI * n) / 180) * 1e10) / 1e10;\n                                case 'cos': return Math.round(Math.cos((Math.PI * n) / 180) * 1e10) / 1e10;\n                                case 'tan': return MathUtil.tan(n);\n                                case 'asin': return (Math.asin(n) * 180) / Math.PI;\n                                case 'acos': return (Math.acos(n) * 180) / Math.PI;\n                                case 'atan': return (Math.atan(n) * 180) / Math.PI;\n                                case 'ln': return Math.log(n);\n                                case 'log': return Math.log(n) / Math.LN10;\n                                case 'e ^': return Math.exp(n);\n                                case '10 ^': return Math.pow(10, n);\n                                */")
                                          lexical_declaration:
                                            let ('let')
                                            variable_declarator:
                                              identifier ('op')
                                              = ('=')
                                              string:
                                                " ('"')
                                                string_fragment ('How do you mess up this badly?')
                                                " ('"')
                                            ; (';')
                                          lexical_declaration:
                                            let ('let')
                                            variable_declarator:
                                              identifier ('actualop')
                                              = ('=')
                                              member_expression:
                                                member_expression:
                                                  member_expression:
                                                    subscript_expression:
                                                      member_expression:
                                                        member_expression:
                                                          member_expression:
                                                            identifier ('util')
                                                            . ('.')
                                                            property_identifier ('thread')
                                                          . ('.')
                                                          property_identifier ('blockContainer')
                                                        . ('.')
                                                        property_identifier ('_blocks')
                                                      [ ('[')
                                                      member_expression:
                                                        identifier ('b')
                                                        . ('.')
                                                        property_identifier ('id')
                                                      ] (']')
                                                    . ('.')
                                                    property_identifier ('fields')
                                                  . ('.')
                                                  property_identifier ('OPERATOR')
                                                . ('.')
                                                property_identifier ('value')
                                            ; (';')
                                          switch_statement:
                                            switch ('switch')
                                            parenthesized_expression:
                                              ( ('(')
                                              identifier ('actualop')
                                              ) (')')
                                            switch_body:
                                              { ('{')
                                              switch_case:
                                                case ('case')
                                                string:
                                                  " ('"')
                                                  string_fragment ('abs')
                                                  " ('"')
                                                : (':')
                                                statement_block:
                                                  { ('{')
                                                  expression_statement:
                                                    assignment_expression:
                                                      identifier ('op')
                                                      = ('=')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('abs')
                                                        " ('"')
                                                    ; (';')
                                                  break_statement:
                                                    break ('break')
                                                    ; (';')
                                                  } ('}')
                                              switch_case:
                                                case ('case')
                                                string:
                                                  " ('"')
                                                  string_fragment ('floor')
                                                  " ('"')
                                                : (':')
                                                statement_block:
                                                  { ('{')
                                                  expression_statement:
                                                    assignment_expression:
                                                      identifier ('op')
                                                      = ('=')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('floor')
                                                        " ('"')
                                                    ; (';')
                                                  break_statement:
                                                    break ('break')
                                                    ; (';')
                                                  } ('}')
                                              switch_case:
                                                case ('case')
                                                string:
                                                  " ('"')
                                                  string_fragment ('ceiling')
                                                  " ('"')
                                                : (':')
                                                statement_block:
                                                  { ('{')
                                                  expression_statement:
                                                    assignment_expression:
                                                      identifier ('op')
                                                      = ('=')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('ceil')
                                                        " ('"')
                                                    ; (';')
                                                  break_statement:
                                                    break ('break')
                                                    ; (';')
                                                  } ('}')
                                              switch_case:
                                                case ('case')
                                                string:
                                                  " ('"')
                                                  string_fragment ('sqrt')
                                                  " ('"')
                                                : (':')
                                                statement_block:
                                                  { ('{')
                                                  expression_statement:
                                                    assignment_expression:
                                                      identifier ('op')
                                                      = ('=')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('sqrt')
                                                        " ('"')
                                                    ; (';')
                                                  break_statement:
                                                    break ('break')
                                                    ; (';')
                                                  } ('}')
                                              switch_case:
                                                case ('case')
                                                string:
                                                  " ('"')
                                                  string_fragment ('sin')
                                                  " ('"')
                                                : (':')
                                                statement_block:
                                                  { ('{')
                                                  expression_statement:
                                                    assignment_expression:
                                                      identifier ('op')
                                                      = ('=')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('sin')
                                                        " ('"')
                                                    ; (';')
                                                  break_statement:
                                                    break ('break')
                                                    ; (';')
                                                  } ('}')
                                              switch_case:
                                                case ('case')
                                                string:
                                                  " ('"')
                                                  string_fragment ('cos')
                                                  " ('"')
                                                : (':')
                                                statement_block:
                                                  { ('{')
                                                  expression_statement:
                                                    assignment_expression:
                                                      identifier ('op')
                                                      = ('=')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('cos')
                                                        " ('"')
                                                    ; (';')
                                                  break_statement:
                                                    break ('break')
                                                    ; (';')
                                                  } ('}')
                                              switch_case:
                                                case ('case')
                                                string:
                                                  " ('"')
                                                  string_fragment ('tan')
                                                  " ('"')
                                                : (':')
                                                statement_block:
                                                  { ('{')
                                                  expression_statement:
                                                    assignment_expression:
                                                      identifier ('op')
                                                      = ('=')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('tan')
                                                        " ('"')
                                                    ; (';')
                                                  break_statement:
                                                    break ('break')
                                                    ; (';')
                                                  } ('}')
                                              switch_case:
                                                case ('case')
                                                string:
                                                  " ('"')
                                                  string_fragment ('asin')
                                                  " ('"')
                                                : (':')
                                                statement_block:
                                                  { ('{')
                                                  expression_statement:
                                                    assignment_expression:
                                                      identifier ('op')
                                                      = ('=')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('asin')
                                                        " ('"')
                                                    ; (';')
                                                  break_statement:
                                                    break ('break')
                                                    ; (';')
                                                  } ('}')
                                              switch_case:
                                                case ('case')
                                                string:
                                                  " ('"')
                                                  string_fragment ('acos')
                                                  " ('"')
                                                : (':')
                                                statement_block:
                                                  { ('{')
                                                  expression_statement:
                                                    assignment_expression:
                                                      identifier ('op')
                                                      = ('=')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('acos')
                                                        " ('"')
                                                    ; (';')
                                                  break_statement:
                                                    break ('break')
                                                    ; (';')
                                                  } ('}')
                                              switch_case:
                                                case ('case')
                                                string:
                                                  " ('"')
                                                  string_fragment ('atan')
                                                  " ('"')
                                                : (':')
                                                statement_block:
                                                  { ('{')
                                                  expression_statement:
                                                    assignment_expression:
                                                      identifier ('op')
                                                      = ('=')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('atan')
                                                        " ('"')
                                                    ; (';')
                                                  break_statement:
                                                    break ('break')
                                                    ; (';')
                                                  } ('}')
                                              switch_case:
                                                case ('case')
                                                string:
                                                  " ('"')
                                                  string_fragment ('ln')
                                                  " ('"')
                                                : (':')
                                                statement_block:
                                                  { ('{')
                                                  expression_statement:
                                                    assignment_expression:
                                                      identifier ('op')
                                                      = ('=')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('log')
                                                        " ('"')
                                                    ; (';')
                                                  comment ('// confusing')
                                                  break_statement:
                                                    break ('break')
                                                    ; (';')
                                                  } ('}')
                                              switch_case:
                                                case ('case')
                                                string:
                                                  " ('"')
                                                  string_fragment ('log')
                                                  " ('"')
                                                : (':')
                                                statement_block:
                                                  { ('{')
                                                  expression_statement:
                                                    assignment_expression:
                                                      identifier ('op')
                                                      = ('=')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('log')
                                                        " ('"')
                                                    ; (';')
                                                  comment ('// special behavior below')
                                                  break_statement:
                                                    break ('break')
                                                    ; (';')
                                                  } ('}')
                                              switch_case:
                                                case ('case')
                                                string:
                                                  " ('"')
                                                  string_fragment ('e ^')
                                                  " ('"')
                                                : (':')
                                                statement_block:
                                                  { ('{')
                                                  expression_statement:
                                                    assignment_expression:
                                                      identifier ('op')
                                                      = ('=')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('exp')
                                                        " ('"')
                                                    ; (';')
                                                  break_statement:
                                                    break ('break')
                                                    ; (';')
                                                  } ('}')
                                              switch_case:
                                                case ('case')
                                                string:
                                                  " ('"')
                                                  string_fragment ('10 ^')
                                                  " ('"')
                                                : (':')
                                                statement_block:
                                                  { ('{')
                                                  expression_statement:
                                                    assignment_expression:
                                                      identifier ('op')
                                                      = ('=')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('pow')
                                                        " ('"')
                                                    ; (';')
                                                  break_statement:
                                                    break ('break')
                                                    ; (';')
                                                  } ('}')
                                              } ('}')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  identifier ('op')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  ternary_expression:
                                                    binary_expression:
                                                      identifier ('op')
                                                      === ('===')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('pow')
                                                        " ('"')
                                                    ? ('?')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('(10.0, ')
                                                      " ('"')
                                                    : (':')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('(')
                                                      " ('"')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  ternary_expression:
                                                    call_expression:
                                                      member_expression:
                                                        identifier ('Array')
                                                        . ('.')
                                                        property_identifier ('isArray')
                                                      arguments:
                                                        ( ('(')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('1')
                                                          ] (']')
                                                        ) (')')
                                                    ? ('?')
                                                    call_expression:
                                                      member_expression:
                                                        this ('this')
                                                        . ('.')
                                                        property_identifier ('genWGSL')
                                                      arguments:
                                                        ( ('(')
                                                        identifier ('util')
                                                        , (',')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('1')
                                                          ] (']')
                                                        , (',')
                                                        binary_expression:
                                                          identifier ('recursionDepth')
                                                          + ('+')
                                                          number ('1')
                                                        ) (')')
                                                    : (':')
                                                    call_expression:
                                                      member_expression:
                                                        this ('this')
                                                        . ('.')
                                                        property_identifier ('textFromOp')
                                                      arguments:
                                                        ( ('(')
                                                        identifier ('util')
                                                        , (',')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('1')
                                                          ] (']')
                                                        , (',')
                                                        false ('false')
                                                        ) (')')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  ternary_expression:
                                                    binary_expression:
                                                      identifier ('actualop')
                                                      === ('===')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('log')
                                                        " ('"')
                                                    ? ('?')
                                                    binary_expression:
                                                      string:
                                                        " ('"')
                                                        string_fragment (') / ')
                                                        " ('"')
                                                      + ('+')
                                                      call_expression:
                                                        member_expression:
                                                          member_expression:
                                                            identifier ('Scratch')
                                                            . ('.')
                                                            property_identifier ('Cast')
                                                          . ('.')
                                                          property_identifier ('toString')
                                                        arguments:
                                                          ( ('(')
                                                          member_expression:
                                                            identifier ('Math')
                                                            . ('.')
                                                            property_identifier ('LN10')
                                                          ) (')')
                                                    : (':')
                                                    string:
                                                      " ('"')
                                                      string_fragment (')')
                                                      " ('"')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            augmented_assignment_expression:
                                              identifier ('i')
                                              += ('+=')
                                              number ('2')
                                            ; (';')
                                          break_statement:
                                            break ('break')
                                            ; (';')
                                          } ('}')
                                      switch_case:
                                        case ('case')
                                        string:
                                          " ('"')
                                          string_fragment ('gpusb3_wgslFunc')
                                          " ('"')
                                        : (':')
                                        statement_block:
                                          { ('{')
                                          if_statement:
                                            if ('if')
                                            parenthesized_expression:
                                              ( ('(')
                                              call_expression:
                                                member_expression:
                                                  identifier ('Array')
                                                  . ('.')
                                                  property_identifier ('isArray')
                                                arguments:
                                                  ( ('(')
                                                  subscript_expression:
                                                    identifier ('blocks')
                                                    [ ('[')
                                                    binary_expression:
                                                      identifier ('i')
                                                      + ('+')
                                                      number ('1')
                                                    ] (']')
                                                  ) (')')
                                              ) (')')
                                            statement_block:
                                              { ('{')
                                              expression_statement:
                                                call_expression:
                                                  member_expression:
                                                    identifier ('console')
                                                    . ('.')
                                                    property_identifier ('error')
                                                  arguments:
                                                    ( ('(')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('Function should not have an input!')
                                                      " ('"')
                                                    ) (')')
                                                ; (';')
                                              return_statement:
                                                return ('return')
                                                string:
                                                  " ('"')
                                                  string_fragment ('Unexpected input in function input!')
                                                  " ('"')
                                                ; (';')
                                              } ('}')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  ternary_expression:
                                                    call_expression:
                                                      member_expression:
                                                        identifier ('Array')
                                                        . ('.')
                                                        property_identifier ('isArray')
                                                      arguments:
                                                        ( ('(')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('1')
                                                          ] (']')
                                                        ) (')')
                                                    ? ('?')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('error!')
                                                      " ('"')
                                                    : (':')
                                                    call_expression:
                                                      member_expression:
                                                        this ('this')
                                                        . ('.')
                                                        property_identifier ('textFromOp')
                                                      arguments:
                                                        ( ('(')
                                                        identifier ('util')
                                                        , (',')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('1')
                                                          ] (']')
                                                        , (',')
                                                        false ('false')
                                                        ) (')')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  string:
                                                    " ('"')
                                                    string_fragment ('(')
                                                    " ('"')
                                                  ) (')')
                                            ; (';')
                                          comment ('/*if (this.textFromOp(util,blocks[i+1],false) === "arrayLength") {\n                                    code = code.concat("&") // idk why you need this\n                                }*/')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  ternary_expression:
                                                    call_expression:
                                                      member_expression:
                                                        identifier ('Array')
                                                        . ('.')
                                                        property_identifier ('isArray')
                                                      arguments:
                                                        ( ('(')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('2')
                                                          ] (']')
                                                        ) (')')
                                                    ? ('?')
                                                    call_expression:
                                                      member_expression:
                                                        this ('this')
                                                        . ('.')
                                                        property_identifier ('genWGSL')
                                                      arguments:
                                                        ( ('(')
                                                        identifier ('util')
                                                        , (',')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('2')
                                                          ] (']')
                                                        , (',')
                                                        binary_expression:
                                                          identifier ('recursionDepth')
                                                          + ('+')
                                                          number ('1')
                                                        ) (')')
                                                    : (':')
                                                    call_expression:
                                                      member_expression:
                                                        this ('this')
                                                        . ('.')
                                                        property_identifier ('textFromOp')
                                                      arguments:
                                                        ( ('(')
                                                        identifier ('util')
                                                        , (',')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('2')
                                                          ] (']')
                                                        , (',')
                                                        false ('false')
                                                        ) (')')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  string:
                                                    " ('"')
                                                    string_fragment (')')
                                                    " ('"')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            augmented_assignment_expression:
                                              identifier ('i')
                                              += ('+=')
                                              number ('2')
                                            ; (';')
                                          break_statement:
                                            break ('break')
                                            ; (';')
                                          } ('}')
                                      switch_case:
                                        case ('case')
                                        string:
                                          " ('"')
                                          string_fragment ('gpusb3_funcArgs')
                                          " ('"')
                                        : (':')
                                        statement_block:
                                          { ('{')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  ternary_expression:
                                                    call_expression:
                                                      member_expression:
                                                        identifier ('Array')
                                                        . ('.')
                                                        property_identifier ('isArray')
                                                      arguments:
                                                        ( ('(')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('1')
                                                          ] (']')
                                                        ) (')')
                                                    ? ('?')
                                                    call_expression:
                                                      member_expression:
                                                        this ('this')
                                                        . ('.')
                                                        property_identifier ('genWGSL')
                                                      arguments:
                                                        ( ('(')
                                                        identifier ('util')
                                                        , (',')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('1')
                                                          ] (']')
                                                        , (',')
                                                        binary_expression:
                                                          identifier ('recursionDepth')
                                                          + ('+')
                                                          number ('1')
                                                        ) (')')
                                                    : (':')
                                                    call_expression:
                                                      member_expression:
                                                        this ('this')
                                                        . ('.')
                                                        property_identifier ('textFromOp')
                                                      arguments:
                                                        ( ('(')
                                                        identifier ('util')
                                                        , (',')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('1')
                                                          ] (']')
                                                        , (',')
                                                        false ('false')
                                                        ) (')')
                                                  ) (')')
                                            ; (';')
                                          if_statement:
                                            if ('if')
                                            parenthesized_expression:
                                              ( ('(')
                                              call_expression:
                                                member_expression:
                                                  identifier ('Array')
                                                  . ('.')
                                                  property_identifier ('isArray')
                                                arguments:
                                                  ( ('(')
                                                  subscript_expression:
                                                    identifier ('blocks')
                                                    [ ('[')
                                                    binary_expression:
                                                      identifier ('i')
                                                      + ('+')
                                                      number ('2')
                                                    ] (']')
                                                  ) (')')
                                              ) (')')
                                            statement_block:
                                              { ('{')
                                              expression_statement:
                                                assignment_expression:
                                                  identifier ('code')
                                                  = ('=')
                                                  call_expression:
                                                    member_expression:
                                                      identifier ('code')
                                                      . ('.')
                                                      property_identifier ('concat')
                                                    arguments:
                                                      ( ('(')
                                                      string:
                                                        " ('"')
                                                        string_fragment (', ')
                                                        " ('"')
                                                      ) (')')
                                                ; (';')
                                              expression_statement:
                                                assignment_expression:
                                                  identifier ('code')
                                                  = ('=')
                                                  call_expression:
                                                    member_expression:
                                                      identifier ('code')
                                                      . ('.')
                                                      property_identifier ('concat')
                                                    arguments:
                                                      ( ('(')
                                                      call_expression:
                                                        member_expression:
                                                          this ('this')
                                                          . ('.')
                                                          property_identifier ('genWGSL')
                                                        arguments:
                                                          ( ('(')
                                                          identifier ('util')
                                                          , (',')
                                                          subscript_expression:
                                                            identifier ('blocks')
                                                            [ ('[')
                                                            binary_expression:
                                                              identifier ('i')
                                                              + ('+')
                                                              number ('2')
                                                            ] (']')
                                                          , (',')
                                                          binary_expression:
                                                            identifier ('recursionDepth')
                                                            + ('+')
                                                            number ('1')
                                                          ) (')')
                                                      ) (')')
                                                ; (';')
                                              } ('}')
                                            else_clause:
                                              else ('else')
                                              if_statement:
                                                if ('if')
                                                parenthesized_expression:
                                                  ( ('(')
                                                  binary_expression:
                                                    call_expression:
                                                      member_expression:
                                                        this ('this')
                                                        . ('.')
                                                        property_identifier ('textFromOp')
                                                      arguments:
                                                        ( ('(')
                                                        identifier ('util')
                                                        , (',')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('2')
                                                          ] (']')
                                                        , (',')
                                                        false ('false')
                                                        ) (')')
                                                    !== ('!==')
                                                    string:
                                                      " ('"')
                                                      " ('"')
                                                  ) (')')
                                                statement_block:
                                                  { ('{')
                                                  expression_statement:
                                                    assignment_expression:
                                                      identifier ('code')
                                                      = ('=')
                                                      call_expression:
                                                        member_expression:
                                                          identifier ('code')
                                                          . ('.')
                                                          property_identifier ('concat')
                                                        arguments:
                                                          ( ('(')
                                                          string:
                                                            " ('"')
                                                            string_fragment (', ')
                                                            " ('"')
                                                          ) (')')
                                                    ; (';')
                                                  expression_statement:
                                                    assignment_expression:
                                                      identifier ('code')
                                                      = ('=')
                                                      call_expression:
                                                        member_expression:
                                                          identifier ('code')
                                                          . ('.')
                                                          property_identifier ('concat')
                                                        arguments:
                                                          ( ('(')
                                                          call_expression:
                                                            member_expression:
                                                              this ('this')
                                                              . ('.')
                                                              property_identifier ('textFromOp')
                                                            arguments:
                                                              ( ('(')
                                                              identifier ('util')
                                                              , (',')
                                                              subscript_expression:
                                                                identifier ('blocks')
                                                                [ ('[')
                                                                binary_expression:
                                                                  identifier ('i')
                                                                  + ('+')
                                                                  number ('2')
                                                                ] (']')
                                                              , (',')
                                                              false ('false')
                                                              ) (')')
                                                          ) (')')
                                                    ; (';')
                                                  } ('}')
                                          expression_statement:
                                            augmented_assignment_expression:
                                              identifier ('i')
                                              += ('+=')
                                              number ('2')
                                            ; (';')
                                          break_statement:
                                            break ('break')
                                            ; (';')
                                          } ('}')
                                      switch_case:
                                        case ('case')
                                        string:
                                          " ('"')
                                          string_fragment ('gpusb3_getVar')
                                          " ('"')
                                        : (':')
                                        statement_block:
                                          { ('{')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  ternary_expression:
                                                    call_expression:
                                                      member_expression:
                                                        identifier ('Array')
                                                        . ('.')
                                                        property_identifier ('isArray')
                                                      arguments:
                                                        ( ('(')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('1')
                                                          ] (']')
                                                        ) (')')
                                                    ? ('?')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('_')
                                                      " ('"')
                                                    : (':')
                                                    call_expression:
                                                      member_expression:
                                                        this ('this')
                                                        . ('.')
                                                        property_identifier ('textFromOp')
                                                      arguments:
                                                        ( ('(')
                                                        identifier ('util')
                                                        , (',')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('1')
                                                          ] (']')
                                                        , (',')
                                                        false ('false')
                                                        ) (')')
                                                  ) (')')
                                            ; (';')
                                          comment ("// if your variable name is invalid it's your own fault")
                                          expression_statement:
                                            augmented_assignment_expression:
                                              identifier ('i')
                                              += ('+=')
                                              number ('1')
                                            ; (';')
                                          break_statement:
                                            break ('break')
                                            ; (';')
                                          } ('}')
                                      switch_case:
                                        case ('case')
                                        string:
                                          " ('"')
                                          string_fragment ('gpusb3_constructFromType')
                                          " ('"')
                                        : (':')
                                        statement_block:
                                          { ('{')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  template_string:
                                                    ` ('`')
                                                    template_substitution:
                                                      ${ ('${')
                                                      ternary_expression:
                                                        call_expression:
                                                          member_expression:
                                                            identifier ('Array')
                                                            . ('.')
                                                            property_identifier ('isArray')
                                                          arguments:
                                                            ( ('(')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('1')
                                                              ] (']')
                                                            ) (')')
                                                        ? ('?')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('genWGSL')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('1')
                                                              ] (']')
                                                            , (',')
                                                            binary_expression:
                                                              identifier ('recursionDepth')
                                                              + ('+')
                                                              number ('1')
                                                            ) (')')
                                                        : (':')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('textFromOp')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('1')
                                                              ] (']')
                                                            , (',')
                                                            false ('false')
                                                            ) (')')
                                                      } ('}')
                                                    string_fragment ('(')
                                                    template_substitution:
                                                      ${ ('${')
                                                      ternary_expression:
                                                        call_expression:
                                                          member_expression:
                                                            identifier ('Array')
                                                            . ('.')
                                                            property_identifier ('isArray')
                                                          arguments:
                                                            ( ('(')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('2')
                                                              ] (']')
                                                            ) (')')
                                                        ? ('?')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('genWGSL')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('2')
                                                              ] (']')
                                                            , (',')
                                                            binary_expression:
                                                              identifier ('recursionDepth')
                                                              + ('+')
                                                              number ('1')
                                                            ) (')')
                                                        : (':')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('textFromOp')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('2')
                                                              ] (']')
                                                            , (',')
                                                            false ('false')
                                                            ) (')')
                                                      } ('}')
                                                    string_fragment (')')
                                                    ` ('`')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            augmented_assignment_expression:
                                              identifier ('i')
                                              += ('+=')
                                              number ('2')
                                            ; (';')
                                          break_statement:
                                            break ('break')
                                            ; (';')
                                          } ('}')
                                      switch_case:
                                        case ('case')
                                        string:
                                          " ('"')
                                          string_fragment ('gpusb3_getProp')
                                          " ('"')
                                        : (':')
                                        statement_block:
                                          { ('{')
                                          if_statement:
                                            if ('if')
                                            parenthesized_expression:
                                              ( ('(')
                                              call_expression:
                                                member_expression:
                                                  identifier ('Array')
                                                  . ('.')
                                                  property_identifier ('isArray')
                                                arguments:
                                                  ( ('(')
                                                  subscript_expression:
                                                    identifier ('blocks')
                                                    [ ('[')
                                                    binary_expression:
                                                      identifier ('i')
                                                      + ('+')
                                                      number ('2')
                                                    ] (']')
                                                  ) (')')
                                              ) (')')
                                            statement_block:
                                              { ('{')
                                              expression_statement:
                                                call_expression:
                                                  member_expression:
                                                    this ('this')
                                                    . ('.')
                                                    property_identifier ('throwError')
                                                  arguments:
                                                    ( ('(')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('UnexpectedInput')
                                                      " ('"')
                                                    , (',')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('Unexpected input in block input!')
                                                      " ('"')
                                                    , (',')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('GetPropertyBlock')
                                                      " ('"')
                                                    , (',')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('Unexpected input in Get Property block!')
                                                      " ('"')
                                                    , (',')
                                                    identifier ('util')
                                                    ) (')')
                                                ; (';')
                                              return_statement:
                                                return ('return')
                                                binary_expression:
                                                  identifier ('code')
                                                  + ('+')
                                                  string:
                                                    " ('"')
                                                    string_fragment ('Error! - compilation stopped')
                                                    " ('"')
                                                ; (';')
                                              } ('}')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  template_string:
                                                    ` ('`')
                                                    template_substitution:
                                                      ${ ('${')
                                                      ternary_expression:
                                                        call_expression:
                                                          member_expression:
                                                            identifier ('Array')
                                                            . ('.')
                                                            property_identifier ('isArray')
                                                          arguments:
                                                            ( ('(')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('1')
                                                              ] (']')
                                                            ) (')')
                                                        ? ('?')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('genWGSL')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('1')
                                                              ] (']')
                                                            , (',')
                                                            binary_expression:
                                                              identifier ('recursionDepth')
                                                              + ('+')
                                                              number ('1')
                                                            ) (')')
                                                        : (':')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('textFromOp')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('1')
                                                              ] (']')
                                                            , (',')
                                                            false ('false')
                                                            ) (')')
                                                      } ('}')
                                                    string_fragment ('.')
                                                    template_substitution:
                                                      ${ ('${')
                                                      call_expression:
                                                        member_expression:
                                                          this ('this')
                                                          . ('.')
                                                          property_identifier ('textFromOp')
                                                        arguments:
                                                          ( ('(')
                                                          identifier ('util')
                                                          , (',')
                                                          subscript_expression:
                                                            identifier ('blocks')
                                                            [ ('[')
                                                            binary_expression:
                                                              identifier ('i')
                                                              + ('+')
                                                              number ('2')
                                                            ] (']')
                                                          , (',')
                                                          false ('false')
                                                          ) (')')
                                                      } ('}')
                                                    ` ('`')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            augmented_assignment_expression:
                                              identifier ('i')
                                              += ('+=')
                                              number ('2')
                                            ; (';')
                                          break_statement:
                                            break ('break')
                                            ; (';')
                                          } ('}')
                                      switch_case:
                                        case ('case')
                                        string:
                                          " ('"')
                                          string_fragment ('gpusb3_indexObject')
                                          " ('"')
                                        : (':')
                                        statement_block:
                                          { ('{')
                                          comment ('// https://www.w3.org/TR/WGSL/#matrix-access-expr')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  template_string:
                                                    ` ('`')
                                                    template_substitution:
                                                      ${ ('${')
                                                      ternary_expression:
                                                        call_expression:
                                                          member_expression:
                                                            identifier ('Array')
                                                            . ('.')
                                                            property_identifier ('isArray')
                                                          arguments:
                                                            ( ('(')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('1')
                                                              ] (']')
                                                            ) (')')
                                                        ? ('?')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('genWGSL')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('1')
                                                              ] (']')
                                                            , (',')
                                                            binary_expression:
                                                              identifier ('recursionDepth')
                                                              + ('+')
                                                              number ('1')
                                                            ) (')')
                                                        : (':')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('textFromOp')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('1')
                                                              ] (']')
                                                            , (',')
                                                            false ('false')
                                                            ) (')')
                                                      } ('}')
                                                    string_fragment ('[')
                                                    template_substitution:
                                                      ${ ('${')
                                                      ternary_expression:
                                                        call_expression:
                                                          member_expression:
                                                            identifier ('Array')
                                                            . ('.')
                                                            property_identifier ('isArray')
                                                          arguments:
                                                            ( ('(')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('2')
                                                              ] (']')
                                                            ) (')')
                                                        ? ('?')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('genWGSL')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('2')
                                                              ] (']')
                                                            , (',')
                                                            binary_expression:
                                                              identifier ('recursionDepth')
                                                              + ('+')
                                                              number ('1')
                                                            ) (')')
                                                        : (':')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('textFromOp')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('2')
                                                              ] (']')
                                                            , (',')
                                                            false ('false')
                                                            ) (')')
                                                      } ('}')
                                                    string_fragment (']')
                                                    ` ('`')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            augmented_assignment_expression:
                                              identifier ('i')
                                              += ('+=')
                                              number ('2')
                                            ; (';')
                                          break_statement:
                                            break ('break')
                                            ; (';')
                                          } ('}')
                                      switch_case:
                                        case ('case')
                                        string:
                                          " ('"')
                                          string_fragment ('gpusb3_typeConstructor')
                                          " ('"')
                                        : (':')
                                        statement_block:
                                          { ('{')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  template_string:
                                                    ` ('`')
                                                    template_substitution:
                                                      ${ ('${')
                                                      ternary_expression:
                                                        call_expression:
                                                          member_expression:
                                                            identifier ('Array')
                                                            . ('.')
                                                            property_identifier ('isArray')
                                                          arguments:
                                                            ( ('(')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('1')
                                                              ] (']')
                                                            ) (')')
                                                        ? ('?')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('genWGSL')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('1')
                                                              ] (']')
                                                            , (',')
                                                            binary_expression:
                                                              identifier ('recursionDepth')
                                                              + ('+')
                                                              number ('1')
                                                            ) (')')
                                                        : (':')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('textFromOp')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('1')
                                                              ] (']')
                                                            , (',')
                                                            false ('false')
                                                            ) (')')
                                                      } ('}')
                                                    string_fragment ('<')
                                                    template_substitution:
                                                      ${ ('${')
                                                      ternary_expression:
                                                        call_expression:
                                                          member_expression:
                                                            identifier ('Array')
                                                            . ('.')
                                                            property_identifier ('isArray')
                                                          arguments:
                                                            ( ('(')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('2')
                                                              ] (']')
                                                            ) (')')
                                                        ? ('?')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('genWGSL')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('2')
                                                              ] (']')
                                                            , (',')
                                                            binary_expression:
                                                              identifier ('recursionDepth')
                                                              + ('+')
                                                              number ('1')
                                                            ) (')')
                                                        : (':')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('textFromOp')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('2')
                                                              ] (']')
                                                            , (',')
                                                            false ('false')
                                                            ) (')')
                                                      } ('}')
                                                    ` ('`')
                                                  ) (')')
                                            ; (';')
                                          if_statement:
                                            if ('if')
                                            parenthesized_expression:
                                              ( ('(')
                                              call_expression:
                                                member_expression:
                                                  identifier ('Array')
                                                  . ('.')
                                                  property_identifier ('isArray')
                                                arguments:
                                                  ( ('(')
                                                  subscript_expression:
                                                    identifier ('blocks')
                                                    [ ('[')
                                                    binary_expression:
                                                      identifier ('i')
                                                      + ('+')
                                                      number ('3')
                                                    ] (']')
                                                  ) (')')
                                              ) (')')
                                            statement_block:
                                              { ('{')
                                              expression_statement:
                                                assignment_expression:
                                                  identifier ('code')
                                                  = ('=')
                                                  call_expression:
                                                    member_expression:
                                                      identifier ('code')
                                                      . ('.')
                                                      property_identifier ('concat')
                                                    arguments:
                                                      ( ('(')
                                                      template_string:
                                                        ` ('`')
                                                        string_fragment (', ')
                                                        template_substitution:
                                                          ${ ('${')
                                                          call_expression:
                                                            member_expression:
                                                              this ('this')
                                                              . ('.')
                                                              property_identifier ('genWGSL')
                                                            arguments:
                                                              ( ('(')
                                                              identifier ('util')
                                                              , (',')
                                                              subscript_expression:
                                                                identifier ('blocks')
                                                                [ ('[')
                                                                binary_expression:
                                                                  identifier ('i')
                                                                  + ('+')
                                                                  number ('3')
                                                                ] (']')
                                                              , (',')
                                                              binary_expression:
                                                                identifier ('recursionDepth')
                                                                + ('+')
                                                                number ('1')
                                                              ) (')')
                                                          } ('}')
                                                        ` ('`')
                                                      ) (')')
                                                ; (';')
                                              } ('}')
                                            else_clause:
                                              else ('else')
                                              if_statement:
                                                if ('if')
                                                parenthesized_expression:
                                                  ( ('(')
                                                  binary_expression:
                                                    call_expression:
                                                      member_expression:
                                                        member_expression:
                                                          identifier ('Scratch')
                                                          . ('.')
                                                          property_identifier ('Cast')
                                                        . ('.')
                                                        property_identifier ('toString')
                                                      arguments:
                                                        ( ('(')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('textFromOp')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('3')
                                                              ] (']')
                                                            , (',')
                                                            false ('false')
                                                            ) (')')
                                                        ) (')')
                                                    !== ('!==')
                                                    string:
                                                      " ('"')
                                                      " ('"')
                                                  ) (')')
                                                statement_block:
                                                  { ('{')
                                                  expression_statement:
                                                    assignment_expression:
                                                      identifier ('code')
                                                      = ('=')
                                                      call_expression:
                                                        member_expression:
                                                          identifier ('code')
                                                          . ('.')
                                                          property_identifier ('concat')
                                                        arguments:
                                                          ( ('(')
                                                          template_string:
                                                            ` ('`')
                                                            string_fragment (', ')
                                                            template_substitution:
                                                              ${ ('${')
                                                              call_expression:
                                                                member_expression:
                                                                  this ('this')
                                                                  . ('.')
                                                                  property_identifier ('textFromOp')
                                                                arguments:
                                                                  ( ('(')
                                                                  identifier ('util')
                                                                  , (',')
                                                                  subscript_expression:
                                                                    identifier ('blocks')
                                                                    [ ('[')
                                                                    binary_expression:
                                                                      identifier ('i')
                                                                      + ('+')
                                                                      number ('3')
                                                                    ] (']')
                                                                  , (',')
                                                                  false ('false')
                                                                  ) (')')
                                                              } ('}')
                                                            ` ('`')
                                                          ) (')')
                                                    ; (';')
                                                  } ('}')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  string:
                                                    " ('"')
                                                    string_fragment ('>')
                                                    " ('"')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            augmented_assignment_expression:
                                              identifier ('i')
                                              += ('+=')
                                              number ('3')
                                            ; (';')
                                          break_statement:
                                            break ('break')
                                            ; (';')
                                          } ('}')
                                      switch_case:
                                        case ('case')
                                        string:
                                          " ('"')
                                          string_fragment ('gpusb3_rootType')
                                          " ('"')
                                        : (':')
                                        statement_block:
                                          { ('{')
                                          if_statement:
                                            if ('if')
                                            parenthesized_expression:
                                              ( ('(')
                                              call_expression:
                                                member_expression:
                                                  identifier ('Array')
                                                  . ('.')
                                                  property_identifier ('isArray')
                                                arguments:
                                                  ( ('(')
                                                  subscript_expression:
                                                    identifier ('blocks')
                                                    [ ('[')
                                                    binary_expression:
                                                      identifier ('i')
                                                      + ('+')
                                                      number ('1')
                                                    ] (']')
                                                  ) (')')
                                              ) (')')
                                            statement_block:
                                              { ('{')
                                              expression_statement:
                                                call_expression:
                                                  member_expression:
                                                    this ('this')
                                                    . ('.')
                                                    property_identifier ('throwError')
                                                  arguments:
                                                    ( ('(')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('UnexpectedInput')
                                                      " ('"')
                                                    , (',')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('Unexpected input in block input!')
                                                      " ('"')
                                                    , (',')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('RootTypeBlock')
                                                      " ('"')
                                                    , (',')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('Unexpected input in Root type block!')
                                                      " ('"')
                                                    , (',')
                                                    identifier ('util')
                                                    ) (')')
                                                ; (';')
                                              return_statement:
                                                return ('return')
                                                binary_expression:
                                                  identifier ('code')
                                                  + ('+')
                                                  string:
                                                    " ('"')
                                                    string_fragment ('Error! - compilation stopped')
                                                    " ('"')
                                                ; (';')
                                              } ('}')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  call_expression:
                                                    member_expression:
                                                      this ('this')
                                                      . ('.')
                                                      property_identifier ('textFromOp')
                                                    arguments:
                                                      ( ('(')
                                                      identifier ('util')
                                                      , (',')
                                                      subscript_expression:
                                                        identifier ('blocks')
                                                        [ ('[')
                                                        binary_expression:
                                                          identifier ('i')
                                                          + ('+')
                                                          number ('1')
                                                        ] (']')
                                                      , (',')
                                                      false ('false')
                                                      ) (')')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            augmented_assignment_expression:
                                              identifier ('i')
                                              += ('+=')
                                              number ('1')
                                            ; (';')
                                          break_statement:
                                            break ('break')
                                            ; (';')
                                          } ('}')
                                      switch_case:
                                        case ('case')
                                        string:
                                          " ('"')
                                          string_fragment ('gpusb3_matrixType')
                                          " ('"')
                                        : (':')
                                        statement_block:
                                          { ('{')
                                          if_statement:
                                            if ('if')
                                            parenthesized_expression:
                                              ( ('(')
                                              binary_expression:
                                                call_expression:
                                                  member_expression:
                                                    identifier ('Array')
                                                    . ('.')
                                                    property_identifier ('isArray')
                                                  arguments:
                                                    ( ('(')
                                                    subscript_expression:
                                                      identifier ('blocks')
                                                      [ ('[')
                                                      binary_expression:
                                                        identifier ('i')
                                                        + ('+')
                                                        number ('1')
                                                      ] (']')
                                                    ) (')')
                                                || ('||')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('Array')
                                                    . ('.')
                                                    property_identifier ('isArray')
                                                  arguments:
                                                    ( ('(')
                                                    subscript_expression:
                                                      identifier ('blocks')
                                                      [ ('[')
                                                      binary_expression:
                                                        identifier ('i')
                                                        + ('+')
                                                        number ('2')
                                                      ] (']')
                                                    ) (')')
                                              ) (')')
                                            statement_block:
                                              { ('{')
                                              expression_statement:
                                                call_expression:
                                                  member_expression:
                                                    this ('this')
                                                    . ('.')
                                                    property_identifier ('throwError')
                                                  arguments:
                                                    ( ('(')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('UnexpectedInput')
                                                      " ('"')
                                                    , (',')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('Unexpected input in block input!')
                                                      " ('"')
                                                    , (',')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('MatrixTypeBlock')
                                                      " ('"')
                                                    , (',')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('Unexpected input in Root type block!')
                                                      " ('"')
                                                    , (',')
                                                    identifier ('util')
                                                    ) (')')
                                                ; (';')
                                              return_statement:
                                                return ('return')
                                                binary_expression:
                                                  identifier ('code')
                                                  + ('+')
                                                  string:
                                                    " ('"')
                                                    string_fragment ('Error! - compilation stopped')
                                                    " ('"')
                                                ; (';')
                                              } ('}')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  template_string:
                                                    ` ('`')
                                                    string_fragment ('mat')
                                                    template_substitution:
                                                      ${ ('${')
                                                      call_expression:
                                                        member_expression:
                                                          this ('this')
                                                          . ('.')
                                                          property_identifier ('textFromOp')
                                                        arguments:
                                                          ( ('(')
                                                          identifier ('util')
                                                          , (',')
                                                          subscript_expression:
                                                            identifier ('blocks')
                                                            [ ('[')
                                                            binary_expression:
                                                              identifier ('i')
                                                              + ('+')
                                                              number ('1')
                                                            ] (']')
                                                          , (',')
                                                          false ('false')
                                                          ) (')')
                                                      } ('}')
                                                    string_fragment ('x')
                                                    template_substitution:
                                                      ${ ('${')
                                                      call_expression:
                                                        member_expression:
                                                          this ('this')
                                                          . ('.')
                                                          property_identifier ('textFromOp')
                                                        arguments:
                                                          ( ('(')
                                                          identifier ('util')
                                                          , (',')
                                                          subscript_expression:
                                                            identifier ('blocks')
                                                            [ ('[')
                                                            binary_expression:
                                                              identifier ('i')
                                                              + ('+')
                                                              number ('2')
                                                            ] (']')
                                                          , (',')
                                                          false ('false')
                                                          ) (')')
                                                      } ('}')
                                                    ` ('`')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            augmented_assignment_expression:
                                              identifier ('i')
                                              += ('+=')
                                              number ('2')
                                            ; (';')
                                          break_statement:
                                            break ('break')
                                            ; (';')
                                          } ('}')
                                      switch_case:
                                        case ('case')
                                        string:
                                          " ('"')
                                          string_fragment ('gpusb3_defFuncArgs')
                                          " ('"')
                                        : (':')
                                        statement_block:
                                          { ('{')
                                          if_statement:
                                            if ('if')
                                            parenthesized_expression:
                                              ( ('(')
                                              call_expression:
                                                member_expression:
                                                  identifier ('Array')
                                                  . ('.')
                                                  property_identifier ('isArray')
                                                arguments:
                                                  ( ('(')
                                                  subscript_expression:
                                                    identifier ('blocks')
                                                    [ ('[')
                                                    binary_expression:
                                                      identifier ('i')
                                                      + ('+')
                                                      number ('1')
                                                    ] (']')
                                                  ) (')')
                                              ) (')')
                                            statement_block:
                                              { ('{')
                                              expression_statement:
                                                call_expression:
                                                  member_expression:
                                                    this ('this')
                                                    . ('.')
                                                    property_identifier ('throwError')
                                                  arguments:
                                                    ( ('(')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('UnexpectedInput')
                                                      " ('"')
                                                    , (',')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('Unexpected input in block input!')
                                                      " ('"')
                                                    , (',')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('DefFuncArgsBlock')
                                                      " ('"')
                                                    , (',')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('Unexpected input in Def func args block!')
                                                      " ('"')
                                                    , (',')
                                                    identifier ('util')
                                                    ) (')')
                                                ; (';')
                                              return_statement:
                                                return ('return')
                                                binary_expression:
                                                  identifier ('code')
                                                  + ('+')
                                                  string:
                                                    " ('"')
                                                    string_fragment ('Error! - compilation stopped')
                                                    " ('"')
                                                ; (';')
                                              } ('}')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  template_string:
                                                    ` ('`')
                                                    template_substitution:
                                                      ${ ('${')
                                                      call_expression:
                                                        member_expression:
                                                          this ('this')
                                                          . ('.')
                                                          property_identifier ('textFromOp')
                                                        arguments:
                                                          ( ('(')
                                                          identifier ('util')
                                                          , (',')
                                                          subscript_expression:
                                                            identifier ('blocks')
                                                            [ ('[')
                                                            binary_expression:
                                                              identifier ('i')
                                                              + ('+')
                                                              number ('1')
                                                            ] (']')
                                                          , (',')
                                                          false ('false')
                                                          ) (')')
                                                      } ('}')
                                                    string_fragment (': ')
                                                    template_substitution:
                                                      ${ ('${')
                                                      ternary_expression:
                                                        call_expression:
                                                          member_expression:
                                                            identifier ('Array')
                                                            . ('.')
                                                            property_identifier ('isArray')
                                                          arguments:
                                                            ( ('(')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('2')
                                                              ] (']')
                                                            ) (')')
                                                        ? ('?')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('genWGSL')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('2')
                                                              ] (']')
                                                            , (',')
                                                            binary_expression:
                                                              identifier ('recursionDepth')
                                                              + ('+')
                                                              number ('1')
                                                            ) (')')
                                                        : (':')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('textFromOp')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('2')
                                                              ] (']')
                                                            , (',')
                                                            false ('false')
                                                            ) (')')
                                                      } ('}')
                                                    ` ('`')
                                                  ) (')')
                                            ; (';')
                                          if_statement:
                                            if ('if')
                                            parenthesized_expression:
                                              ( ('(')
                                              call_expression:
                                                member_expression:
                                                  identifier ('Array')
                                                  . ('.')
                                                  property_identifier ('isArray')
                                                arguments:
                                                  ( ('(')
                                                  subscript_expression:
                                                    identifier ('blocks')
                                                    [ ('[')
                                                    binary_expression:
                                                      identifier ('i')
                                                      + ('+')
                                                      number ('3')
                                                    ] (']')
                                                  ) (')')
                                              ) (')')
                                            statement_block:
                                              { ('{')
                                              expression_statement:
                                                assignment_expression:
                                                  identifier ('code')
                                                  = ('=')
                                                  call_expression:
                                                    member_expression:
                                                      identifier ('code')
                                                      . ('.')
                                                      property_identifier ('concat')
                                                    arguments:
                                                      ( ('(')
                                                      template_string:
                                                        ` ('`')
                                                        string_fragment (', ')
                                                        template_substitution:
                                                          ${ ('${')
                                                          call_expression:
                                                            member_expression:
                                                              this ('this')
                                                              . ('.')
                                                              property_identifier ('genWGSL')
                                                            arguments:
                                                              ( ('(')
                                                              identifier ('util')
                                                              , (',')
                                                              subscript_expression:
                                                                identifier ('blocks')
                                                                [ ('[')
                                                                binary_expression:
                                                                  identifier ('i')
                                                                  + ('+')
                                                                  number ('3')
                                                                ] (']')
                                                              , (',')
                                                              binary_expression:
                                                                identifier ('recursionDepth')
                                                                + ('+')
                                                                number ('1')
                                                              ) (')')
                                                          } ('}')
                                                        ` ('`')
                                                      ) (')')
                                                ; (';')
                                              } ('}')
                                          expression_statement:
                                            augmented_assignment_expression:
                                              identifier ('i')
                                              += ('+=')
                                              number ('3')
                                            ; (';')
                                          break_statement:
                                            break ('break')
                                            ; (';')
                                          } ('}')
                                      switch_case:
                                        case ('case')
                                        string:
                                          " ('"')
                                          string_fragment ('gpusb3_getFuncArg')
                                          " ('"')
                                        : (':')
                                        statement_block:
                                          { ('{')
                                          if_statement:
                                            if ('if')
                                            parenthesized_expression:
                                              ( ('(')
                                              call_expression:
                                                member_expression:
                                                  identifier ('Array')
                                                  . ('.')
                                                  property_identifier ('isArray')
                                                arguments:
                                                  ( ('(')
                                                  subscript_expression:
                                                    identifier ('blocks')
                                                    [ ('[')
                                                    binary_expression:
                                                      identifier ('i')
                                                      + ('+')
                                                      number ('1')
                                                    ] (']')
                                                  ) (')')
                                              ) (')')
                                            statement_block:
                                              { ('{')
                                              expression_statement:
                                                call_expression:
                                                  member_expression:
                                                    this ('this')
                                                    . ('.')
                                                    property_identifier ('throwError')
                                                  arguments:
                                                    ( ('(')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('UnexpectedInput')
                                                      " ('"')
                                                    , (',')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('Unexpected input in block input!')
                                                      " ('"')
                                                    , (',')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('GetFuncArgBlock')
                                                      " ('"')
                                                    , (',')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('Unexpected input in Get func arg block!')
                                                      " ('"')
                                                    , (',')
                                                    identifier ('util')
                                                    ) (')')
                                                ; (';')
                                              return_statement:
                                                return ('return')
                                                binary_expression:
                                                  identifier ('code')
                                                  + ('+')
                                                  string:
                                                    " ('"')
                                                    string_fragment ('Error! - compilation stopped')
                                                    " ('"')
                                                ; (';')
                                              } ('}')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  call_expression:
                                                    member_expression:
                                                      this ('this')
                                                      . ('.')
                                                      property_identifier ('textFromOp')
                                                    arguments:
                                                      ( ('(')
                                                      identifier ('util')
                                                      , (',')
                                                      subscript_expression:
                                                        identifier ('blocks')
                                                        [ ('[')
                                                        binary_expression:
                                                          identifier ('i')
                                                          + ('+')
                                                          number ('1')
                                                        ] (']')
                                                      , (',')
                                                      false ('false')
                                                      ) (')')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            augmented_assignment_expression:
                                              identifier ('i')
                                              += ('+=')
                                              number ('1')
                                            ; (';')
                                          break_statement:
                                            break ('break')
                                            ; (';')
                                          } ('}')
                                      switch_case:
                                        case ('case')
                                        string:
                                          " ('"')
                                          string_fragment ('gpusb3_r_runFunc')
                                          " ('"')
                                        : (':')
                                        statement_block:
                                          { ('{')
                                          if_statement:
                                            if ('if')
                                            parenthesized_expression:
                                              ( ('(')
                                              call_expression:
                                                member_expression:
                                                  identifier ('Array')
                                                  . ('.')
                                                  property_identifier ('isArray')
                                                arguments:
                                                  ( ('(')
                                                  subscript_expression:
                                                    identifier ('blocks')
                                                    [ ('[')
                                                    binary_expression:
                                                      identifier ('i')
                                                      + ('+')
                                                      number ('1')
                                                    ] (']')
                                                  ) (')')
                                              ) (')')
                                            statement_block:
                                              { ('{')
                                              expression_statement:
                                                call_expression:
                                                  member_expression:
                                                    this ('this')
                                                    . ('.')
                                                    property_identifier ('throwError')
                                                  arguments:
                                                    ( ('(')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('UnexpectedInput')
                                                      " ('"')
                                                    , (',')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('Unexpected input in block input!')
                                                      " ('"')
                                                    , (',')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('RunFuncBlock')
                                                      " ('"')
                                                    , (',')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('Unexpected input in Run func block!')
                                                      " ('"')
                                                    , (',')
                                                    identifier ('util')
                                                    ) (')')
                                                ; (';')
                                              return_statement:
                                                return ('return')
                                                binary_expression:
                                                  identifier ('code')
                                                  + ('+')
                                                  string:
                                                    " ('"')
                                                    string_fragment ('Error! - compilation stopped')
                                                    " ('"')
                                                ; (';')
                                              } ('}')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  call_expression:
                                                    member_expression:
                                                      this ('this')
                                                      . ('.')
                                                      property_identifier ('textFromOp')
                                                    arguments:
                                                      ( ('(')
                                                      identifier ('util')
                                                      , (',')
                                                      subscript_expression:
                                                        identifier ('blocks')
                                                        [ ('[')
                                                        binary_expression:
                                                          identifier ('i')
                                                          + ('+')
                                                          number ('1')
                                                        ] (']')
                                                      , (',')
                                                      false ('false')
                                                      ) (')')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  template_string:
                                                    ` ('`')
                                                    string_fragment ('(')
                                                    template_substitution:
                                                      ${ ('${')
                                                      ternary_expression:
                                                        call_expression:
                                                          member_expression:
                                                            identifier ('Array')
                                                            . ('.')
                                                            property_identifier ('isArray')
                                                          arguments:
                                                            ( ('(')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('2')
                                                              ] (']')
                                                            ) (')')
                                                        ? ('?')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('genWGSL')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('2')
                                                              ] (']')
                                                            , (',')
                                                            binary_expression:
                                                              identifier ('recursionDepth')
                                                              + ('+')
                                                              number ('1')
                                                            ) (')')
                                                        : (':')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('textFromOp')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('2')
                                                              ] (']')
                                                            , (',')
                                                            false ('false')
                                                            ) (')')
                                                      } ('}')
                                                    string_fragment (')')
                                                    ` ('`')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            augmented_assignment_expression:
                                              identifier ('i')
                                              += ('+=')
                                              number ('2')
                                            ; (';')
                                          break_statement:
                                            break ('break')
                                            ; (';')
                                          } ('}')
                                      switch_case:
                                        case ('case')
                                        string:
                                          " ('"')
                                          string_fragment ('gpusb3_variableUsage')
                                          " ('"')
                                        : (':')
                                        statement_block:
                                          { ('{')
                                          if_statement:
                                            if ('if')
                                            parenthesized_expression:
                                              ( ('(')
                                              call_expression:
                                                member_expression:
                                                  identifier ('Array')
                                                  . ('.')
                                                  property_identifier ('isArray')
                                                arguments:
                                                  ( ('(')
                                                  subscript_expression:
                                                    identifier ('blocks')
                                                    [ ('[')
                                                    binary_expression:
                                                      identifier ('i')
                                                      + ('+')
                                                      number ('1')
                                                    ] (']')
                                                  ) (')')
                                              ) (')')
                                            statement_block:
                                              { ('{')
                                              expression_statement:
                                                call_expression:
                                                  member_expression:
                                                    this ('this')
                                                    . ('.')
                                                    property_identifier ('throwError')
                                                  arguments:
                                                    ( ('(')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('UnexpectedInput')
                                                      " ('"')
                                                    , (',')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('Unexpected input in block input!')
                                                      " ('"')
                                                    , (',')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('VariableUsageBlock')
                                                      " ('"')
                                                    , (',')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('Unexpected input in Variable block!')
                                                      " ('"')
                                                    , (',')
                                                    identifier ('util')
                                                    ) (')')
                                                ; (';')
                                              return_statement:
                                                return ('return')
                                                string:
                                                  " ('"')
                                                  string_fragment ('Unexpected input in variable usage!')
                                                  " ('"')
                                                ; (';')
                                              } ('}')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  call_expression:
                                                    member_expression:
                                                      this ('this')
                                                      . ('.')
                                                      property_identifier ('textFromOp')
                                                    arguments:
                                                      ( ('(')
                                                      identifier ('util')
                                                      , (',')
                                                      subscript_expression:
                                                        identifier ('blocks')
                                                        [ ('[')
                                                        binary_expression:
                                                          identifier ('i')
                                                          + ('+')
                                                          number ('1')
                                                        ] (']')
                                                      , (',')
                                                      false ('false')
                                                      ) (')')
                                                  ) (')')
                                            ; (';')
                                          if_statement:
                                            if ('if')
                                            parenthesized_expression:
                                              ( ('(')
                                              call_expression:
                                                member_expression:
                                                  identifier ('Array')
                                                  . ('.')
                                                  property_identifier ('isArray')
                                                arguments:
                                                  ( ('(')
                                                  subscript_expression:
                                                    identifier ('blocks')
                                                    [ ('[')
                                                    binary_expression:
                                                      identifier ('i')
                                                      + ('+')
                                                      number ('2')
                                                    ] (']')
                                                  ) (')')
                                              ) (')')
                                            statement_block:
                                              { ('{')
                                              expression_statement:
                                                assignment_expression:
                                                  identifier ('code')
                                                  = ('=')
                                                  call_expression:
                                                    member_expression:
                                                      identifier ('code')
                                                      . ('.')
                                                      property_identifier ('concat')
                                                    arguments:
                                                      ( ('(')
                                                      string:
                                                        " ('"')
                                                        string_fragment (', ')
                                                        " ('"')
                                                      ) (')')
                                                ; (';')
                                              expression_statement:
                                                assignment_expression:
                                                  identifier ('code')
                                                  = ('=')
                                                  call_expression:
                                                    member_expression:
                                                      identifier ('code')
                                                      . ('.')
                                                      property_identifier ('concat')
                                                    arguments:
                                                      ( ('(')
                                                      call_expression:
                                                        member_expression:
                                                          this ('this')
                                                          . ('.')
                                                          property_identifier ('genWGSL')
                                                        arguments:
                                                          ( ('(')
                                                          identifier ('util')
                                                          , (',')
                                                          subscript_expression:
                                                            identifier ('blocks')
                                                            [ ('[')
                                                            binary_expression:
                                                              identifier ('i')
                                                              + ('+')
                                                              number ('2')
                                                            ] (']')
                                                          , (',')
                                                          binary_expression:
                                                            identifier ('recursionDepth')
                                                            + ('+')
                                                            number ('1')
                                                          ) (')')
                                                      ) (')')
                                                ; (';')
                                              } ('}')
                                          expression_statement:
                                            augmented_assignment_expression:
                                              identifier ('i')
                                              += ('+=')
                                              number ('2')
                                            ; (';')
                                          break_statement:
                                            break ('break')
                                            ; (';')
                                          } ('}')
                                      switch_case:
                                        case ('case')
                                        string:
                                          " ('"')
                                          string_fragment ('gpusb3_atomicLoad')
                                          " ('"')
                                        : (':')
                                        statement_block:
                                          { ('{')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  binary_expression:
                                                    binary_expression:
                                                      string:
                                                        " ('"')
                                                        string_fragment ('atomicLoad(')
                                                        " ('"')
                                                      + ('+')
                                                      parenthesized_expression:
                                                        ( ('(')
                                                        ternary_expression:
                                                          call_expression:
                                                            member_expression:
                                                              identifier ('Array')
                                                              . ('.')
                                                              property_identifier ('isArray')
                                                            arguments:
                                                              ( ('(')
                                                              subscript_expression:
                                                                identifier ('blocks')
                                                                [ ('[')
                                                                binary_expression:
                                                                  identifier ('i')
                                                                  + ('+')
                                                                  number ('1')
                                                                ] (']')
                                                              ) (')')
                                                          ? ('?')
                                                          call_expression:
                                                            member_expression:
                                                              this ('this')
                                                              . ('.')
                                                              property_identifier ('genWGSL')
                                                            arguments:
                                                              ( ('(')
                                                              identifier ('util')
                                                              , (',')
                                                              subscript_expression:
                                                                identifier ('blocks')
                                                                [ ('[')
                                                                binary_expression:
                                                                  identifier ('i')
                                                                  + ('+')
                                                                  number ('1')
                                                                ] (']')
                                                              ) (')')
                                                          : (':')
                                                          call_expression:
                                                            member_expression:
                                                              this ('this')
                                                              . ('.')
                                                              property_identifier ('textFromOp')
                                                            arguments:
                                                              ( ('(')
                                                              identifier ('util')
                                                              , (',')
                                                              subscript_expression:
                                                                identifier ('blocks')
                                                                [ ('[')
                                                                binary_expression:
                                                                  identifier ('i')
                                                                  + ('+')
                                                                  number ('1')
                                                                ] (']')
                                                              , (',')
                                                              false ('false')
                                                              ) (')')
                                                        ) (')')
                                                    + ('+')
                                                    string:
                                                      " ('"')
                                                      string_fragment (')')
                                                      " ('"')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            augmented_assignment_expression:
                                              identifier ('i')
                                              += ('+=')
                                              number ('1')
                                            ; (';')
                                          break_statement:
                                            break ('break')
                                            ; (';')
                                          } ('}')
                                      switch_case:
                                        case ('case')
                                        string:
                                          " ('"')
                                          string_fragment ('gpusb3_atomicType')
                                          " ('"')
                                        : (':')
                                        statement_block:
                                          { ('{')
                                          if_statement:
                                            if ('if')
                                            parenthesized_expression:
                                              ( ('(')
                                              call_expression:
                                                member_expression:
                                                  identifier ('Array')
                                                  . ('.')
                                                  property_identifier ('isArray')
                                                arguments:
                                                  ( ('(')
                                                  subscript_expression:
                                                    identifier ('blocks')
                                                    [ ('[')
                                                    binary_expression:
                                                      identifier ('i')
                                                      + ('+')
                                                      number ('1')
                                                    ] (']')
                                                  ) (')')
                                              ) (')')
                                            statement_block:
                                              { ('{')
                                              expression_statement:
                                                call_expression:
                                                  member_expression:
                                                    this ('this')
                                                    . ('.')
                                                    property_identifier ('throwError')
                                                  arguments:
                                                    ( ('(')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('UnexpectedInput')
                                                      " ('"')
                                                    , (',')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('Unexpected input in block input!')
                                                      " ('"')
                                                    , (',')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('AtomicTypeBlock')
                                                      " ('"')
                                                    , (',')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('Unexpected input in Variable block!')
                                                      " ('"')
                                                    , (',')
                                                    identifier ('util')
                                                    ) (')')
                                                ; (';')
                                              return_statement:
                                                return ('return')
                                                string:
                                                  " ('"')
                                                  string_fragment ('Unexpected input in variable usage!')
                                                  " ('"')
                                                ; (';')
                                              } ('}')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  binary_expression:
                                                    binary_expression:
                                                      string:
                                                        " ('"')
                                                        string_fragment ('atomic<')
                                                        " ('"')
                                                      + ('+')
                                                      call_expression:
                                                        member_expression:
                                                          this ('this')
                                                          . ('.')
                                                          property_identifier ('textFromOp')
                                                        arguments:
                                                          ( ('(')
                                                          identifier ('util')
                                                          , (',')
                                                          subscript_expression:
                                                            identifier ('blocks')
                                                            [ ('[')
                                                            binary_expression:
                                                              identifier ('i')
                                                              + ('+')
                                                              number ('1')
                                                            ] (']')
                                                          , (',')
                                                          false ('false')
                                                          ) (')')
                                                    + ('+')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('>')
                                                      " ('"')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            augmented_assignment_expression:
                                              identifier ('i')
                                              += ('+=')
                                              number ('1')
                                            ; (';')
                                          break_statement:
                                            break ('break')
                                            ; (';')
                                          } ('}')
                                      switch_case:
                                        case ('case')
                                        string:
                                          " ('"')
                                          string_fragment ('gpusb3_r_atomicFunc')
                                          " ('"')
                                        : (':')
                                        statement_block:
                                          { ('{')
                                          if_statement:
                                            if ('if')
                                            parenthesized_expression:
                                              ( ('(')
                                              call_expression:
                                                member_expression:
                                                  identifier ('Array')
                                                  . ('.')
                                                  property_identifier ('isArray')
                                                arguments:
                                                  ( ('(')
                                                  subscript_expression:
                                                    identifier ('blocks')
                                                    [ ('[')
                                                    binary_expression:
                                                      identifier ('i')
                                                      + ('+')
                                                      number ('1')
                                                    ] (']')
                                                  ) (')')
                                              ) (')')
                                            statement_block:
                                              { ('{')
                                              expression_statement:
                                                call_expression:
                                                  member_expression:
                                                    this ('this')
                                                    . ('.')
                                                    property_identifier ('throwError')
                                                  arguments:
                                                    ( ('(')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('UnexpectedInput')
                                                      " ('"')
                                                    , (',')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('Unexpected input in block input!')
                                                      " ('"')
                                                    , (',')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('AtomicFunctionBlock')
                                                      " ('"')
                                                    , (',')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('Unexpected input in Variable block!')
                                                      " ('"')
                                                    , (',')
                                                    identifier ('util')
                                                    ) (')')
                                                ; (';')
                                              return_statement:
                                                return ('return')
                                                string:
                                                  " ('"')
                                                  string_fragment ('Unexpected input in atomic function!')
                                                  " ('"')
                                                ; (';')
                                              } ('}')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  template_string:
                                                    ` ('`')
                                                    template_substitution:
                                                      ${ ('${')
                                                      call_expression:
                                                        member_expression:
                                                          this ('this')
                                                          . ('.')
                                                          property_identifier ('textFromOp')
                                                        arguments:
                                                          ( ('(')
                                                          identifier ('util')
                                                          , (',')
                                                          subscript_expression:
                                                            identifier ('blocks')
                                                            [ ('[')
                                                            binary_expression:
                                                              identifier ('i')
                                                              + ('+')
                                                              number ('1')
                                                            ] (']')
                                                          , (',')
                                                          false ('false')
                                                          ) (')')
                                                      } ('}')
                                                    string_fragment ('(')
                                                    template_substitution:
                                                      ${ ('${')
                                                      ternary_expression:
                                                        call_expression:
                                                          member_expression:
                                                            identifier ('Array')
                                                            . ('.')
                                                            property_identifier ('isArray')
                                                          arguments:
                                                            ( ('(')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('2')
                                                              ] (']')
                                                            ) (')')
                                                        ? ('?')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('genWGSL')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('2')
                                                              ] (']')
                                                            ) (')')
                                                        : (':')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('textFromOp')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('2')
                                                              ] (']')
                                                            , (',')
                                                            false ('false')
                                                            ) (')')
                                                      } ('}')
                                                    string_fragment (', ')
                                                    template_substitution:
                                                      ${ ('${')
                                                      ternary_expression:
                                                        call_expression:
                                                          member_expression:
                                                            identifier ('Array')
                                                            . ('.')
                                                            property_identifier ('isArray')
                                                          arguments:
                                                            ( ('(')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('3')
                                                              ] (']')
                                                            ) (')')
                                                        ? ('?')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('genWGSL')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('3')
                                                              ] (']')
                                                            ) (')')
                                                        : (':')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('textFromOp')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('3')
                                                              ] (']')
                                                            , (',')
                                                            false ('false')
                                                            ) (')')
                                                      } ('}')
                                                    string_fragment (' )')
                                                    ` ('`')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            augmented_assignment_expression:
                                              identifier ('i')
                                              += ('+=')
                                              number ('3')
                                            ; (';')
                                          break_statement:
                                            break ('break')
                                            ; (';')
                                          } ('}')
                                      switch_case:
                                        case ('case')
                                        string:
                                          " ('"')
                                          string_fragment ('gpusb3_variablePointer')
                                          " ('"')
                                        : (':')
                                        statement_block:
                                          { ('{')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  binary_expression:
                                                    string:
                                                      " ('"')
                                                      string_fragment ('&')
                                                      " ('"')
                                                    + ('+')
                                                    parenthesized_expression:
                                                      ( ('(')
                                                      ternary_expression:
                                                        call_expression:
                                                          member_expression:
                                                            identifier ('Array')
                                                            . ('.')
                                                            property_identifier ('isArray')
                                                          arguments:
                                                            ( ('(')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('1')
                                                              ] (']')
                                                            ) (')')
                                                        ? ('?')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('genWGSL')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('1')
                                                              ] (']')
                                                            , (',')
                                                            binary_expression:
                                                              identifier ('recursionDepth')
                                                              + ('+')
                                                              number ('1')
                                                            ) (')')
                                                        : (':')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('textFromOp')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('1')
                                                              ] (']')
                                                            , (',')
                                                            false ('false')
                                                            ) (')')
                                                      ) (')')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            augmented_assignment_expression:
                                              identifier ('i')
                                              += ('+=')
                                              number ('1')
                                            ; (';')
                                          break_statement:
                                            break ('break')
                                            ; (';')
                                          } ('}')
                                      switch_case:
                                        case ('case')
                                        string:
                                          " ('"')
                                          string_fragment ('gpusb3_textureType')
                                          " ('"')
                                        : (':')
                                        statement_block:
                                          { ('{')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  template_string:
                                                    ` ('`')
                                                    string_fragment ('texture_storage_2d<')
                                                    template_substitution:
                                                      ${ ('${')
                                                      ternary_expression:
                                                        call_expression:
                                                          member_expression:
                                                            identifier ('Array')
                                                            . ('.')
                                                            property_identifier ('isArray')
                                                          arguments:
                                                            ( ('(')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('1')
                                                              ] (']')
                                                            ) (')')
                                                        ? ('?')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('genWGSL')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('1')
                                                              ] (']')
                                                            , (',')
                                                            binary_expression:
                                                              identifier ('recursionDepth')
                                                              + ('+')
                                                              number ('1')
                                                            ) (')')
                                                        : (':')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('textFromOp')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('1')
                                                              ] (']')
                                                            , (',')
                                                            false ('false')
                                                            ) (')')
                                                      } ('}')
                                                    string_fragment (', ')
                                                    template_substitution:
                                                      ${ ('${')
                                                      ternary_expression:
                                                        call_expression:
                                                          member_expression:
                                                            identifier ('Array')
                                                            . ('.')
                                                            property_identifier ('isArray')
                                                          arguments:
                                                            ( ('(')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('2')
                                                              ] (']')
                                                            ) (')')
                                                        ? ('?')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('genWGSL')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('2')
                                                              ] (']')
                                                            , (',')
                                                            binary_expression:
                                                              identifier ('recursionDepth')
                                                              + ('+')
                                                              number ('1')
                                                            ) (')')
                                                        : (':')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('textFromOp')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('2')
                                                              ] (']')
                                                            , (',')
                                                            false ('false')
                                                            ) (')')
                                                      } ('}')
                                                    string_fragment ('>')
                                                    ` ('`')
                                                  ) (')')
                                            ; (';')
                                          expression_statement:
                                            augmented_assignment_expression:
                                              identifier ('i')
                                              += ('+=')
                                              number ('2')
                                            ; (';')
                                          break_statement:
                                            break ('break')
                                            ; (';')
                                          } ('}')
                                      switch_case:
                                        case ('case')
                                        string:
                                          " ('"')
                                          string_fragment ('gpusb3_samplerType')
                                          " ('"')
                                        : (':')
                                        statement_block:
                                          { ('{')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  string:
                                                    " ('"')
                                                    string_fragment ('sampler')
                                                    " ('"')
                                                  ) (')')
                                            ; (';')
                                          comment ('// probably one of the simplest blocks here')
                                          break_statement:
                                            break ('break')
                                            ; (';')
                                          } ('}')
                                      switch_case:
                                        case ('case')
                                        string:
                                          " ('"')
                                          string_fragment ('gpusb3_structType')
                                          " ('"')
                                        : (':')
                                        statement_block:
                                          { ('{')
                                          if_statement:
                                            if ('if')
                                            parenthesized_expression:
                                              ( ('(')
                                              call_expression:
                                                member_expression:
                                                  identifier ('Array')
                                                  . ('.')
                                                  property_identifier ('isArray')
                                                arguments:
                                                  ( ('(')
                                                  subscript_expression:
                                                    identifier ('blocks')
                                                    [ ('[')
                                                    binary_expression:
                                                      identifier ('i')
                                                      + ('+')
                                                      number ('1')
                                                    ] (']')
                                                  ) (')')
                                              ) (')')
                                            statement_block:
                                              { ('{')
                                              expression_statement:
                                                call_expression:
                                                  member_expression:
                                                    this ('this')
                                                    . ('.')
                                                    property_identifier ('throwError')
                                                  arguments:
                                                    ( ('(')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('UnexpectedInput')
                                                      " ('"')
                                                    , (',')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('Unexpected input in block input!')
                                                      " ('"')
                                                    , (',')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('StructTypeBlock')
                                                      " ('"')
                                                    , (',')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('Unexpected input in struct type block!')
                                                      " ('"')
                                                    , (',')
                                                    identifier ('util')
                                                    ) (')')
                                                ; (';')
                                              return_statement:
                                                return ('return')
                                                string:
                                                  " ('"')
                                                  string_fragment ('Unexpected input in struct type')
                                                  " ('"')
                                                ; (';')
                                              } ('}')
                                          expression_statement:
                                            assignment_expression:
                                              identifier ('code')
                                              = ('=')
                                              call_expression:
                                                member_expression:
                                                  identifier ('code')
                                                  . ('.')
                                                  property_identifier ('concat')
                                                arguments:
                                                  ( ('(')
                                                  call_expression:
                                                    member_expression:
                                                      this ('this')
                                                      . ('.')
                                                      property_identifier ('textFromOp')
                                                    arguments:
                                                      ( ('(')
                                                      identifier ('util')
                                                      , (',')
                                                      subscript_expression:
                                                        identifier ('blocks')
                                                        [ ('[')
                                                        binary_expression:
                                                          identifier ('i')
                                                          + ('+')
                                                          number ('1')
                                                        ] (']')
                                                      , (',')
                                                      false ('false')
                                                      ) (')')
                                                  ) (')')
                                            ; (';')
                                          comment ('// this is the same as some other blocks, but for simplicity reasons there are multiple')
                                          expression_statement:
                                            augmented_assignment_expression:
                                              identifier ('i')
                                              += ('+=')
                                              number ('1')
                                            ; (';')
                                          break_statement:
                                            break ('break')
                                            ; (';')
                                          } ('}')
                                      switch_default:
                                        default ('default')
                                        : (':')
                                        statement_block:
                                          { ('{')
                                          expression_statement:
                                            call_expression:
                                              member_expression:
                                                this ('this')
                                                . ('.')
                                                property_identifier ('throwError')
                                              arguments:
                                                ( ('(')
                                                string:
                                                  " ('"')
                                                  string_fragment ('InvalidBlock')
                                                  " ('"')
                                                , (',')
                                                string:
                                                  " ('"')
                                                  string_fragment ('Invalid block!')
                                                  " ('"')
                                                , (',')
                                                string:
                                                  " ('"')
                                                  string_fragment ('genWGSL')
                                                  " ('"')
                                                , (',')
                                                string:
                                                  " ('"')
                                                  string_fragment ('Invalid operator type block!')
                                                  " ('"')
                                                , (',')
                                                identifier ('util')
                                                ) (')')
                                            ; (';')
                                          expression_statement:
                                            call_expression:
                                              member_expression:
                                                identifier ('console')
                                                . ('.')
                                                property_identifier ('error')
                                              arguments:
                                                ( ('(')
                                                string:
                                                  " ('"')
                                                  string_fragment ('Invalid operator! Did you forget the i += (# of inputs)?')
                                                  " ('"')
                                                , (',')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('blocks')
                                                    . ('.')
                                                    property_identifier ('slice')
                                                  arguments:
                                                    ( ('(')
                                                    identifier ('i')
                                                    , (',')
                                                    binary_expression:
                                                      identifier ('i')
                                                      + ('+')
                                                      number ('5')
                                                    ) (')')
                                                ) (')')
                                            ; (';')
                                          comment ('// this is to idiot proof it from myself, me am big smort')
                                          return_statement:
                                            return ('return')
                                            binary_expression:
                                              identifier ('code')
                                              + ('+')
                                              string:
                                                " ('"')
                                                string_fragment ('Error! - compilation stopped')
                                                " ('"')
                                            ; (';')
                                          } ('}')
                                      } ('}')
                                  } ('}')
                                else_clause:
                                  else ('else')
                                  statement_block:
                                    { ('{')
                                    switch_statement:
                                      switch ('switch')
                                      parenthesized_expression:
                                        ( ('(')
                                        identifier ('b')
                                        ) (')')
                                      switch_body:
                                        { ('{')
                                        switch_case:
                                          case ('case')
                                          string:
                                            " ('"')
                                            string_fragment ('control_if')
                                            " ('"')
                                          : (':')
                                          statement_block:
                                            { ('{')
                                            expression_statement:
                                              assignment_expression:
                                                identifier ('code')
                                                = ('=')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('code')
                                                    . ('.')
                                                    property_identifier ('concat')
                                                  arguments:
                                                    ( ('(')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('if (')
                                                      " ('"')
                                                    ) (')')
                                              ; (';')
                                            expression_statement:
                                              assignment_expression:
                                                identifier ('code')
                                                = ('=')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('code')
                                                    . ('.')
                                                    property_identifier ('concat')
                                                  arguments:
                                                    ( ('(')
                                                    ternary_expression:
                                                      binary_expression:
                                                        member_expression:
                                                          subscript_expression:
                                                            identifier ('blocks')
                                                            [ ('[')
                                                            binary_expression:
                                                              identifier ('i')
                                                              + ('+')
                                                              number ('1')
                                                            ] (']')
                                                          . ('.')
                                                          property_identifier ('length')
                                                        > ('>')
                                                        number ('0')
                                                      ? ('?')
                                                      call_expression:
                                                        member_expression:
                                                          this ('this')
                                                          . ('.')
                                                          property_identifier ('genWGSL')
                                                        arguments:
                                                          ( ('(')
                                                          identifier ('util')
                                                          , (',')
                                                          subscript_expression:
                                                            identifier ('blocks')
                                                            [ ('[')
                                                            binary_expression:
                                                              identifier ('i')
                                                              + ('+')
                                                              number ('1')
                                                            ] (']')
                                                          , (',')
                                                          binary_expression:
                                                            identifier ('recursionDepth')
                                                            + ('+')
                                                            number ('1')
                                                          ) (')')
                                                      : (':')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('true')
                                                        " ('"')
                                                    ) (')')
                                              ; (';')
                                            if_statement:
                                              if ('if')
                                              parenthesized_expression:
                                                ( ('(')
                                                binary_expression:
                                                  member_expression:
                                                    subscript_expression:
                                                      identifier ('blocks')
                                                      [ ('[')
                                                      binary_expression:
                                                        identifier ('i')
                                                        + ('+')
                                                        number ('1')
                                                      ] (']')
                                                    . ('.')
                                                    property_identifier ('length')
                                                  <= ('<=')
                                                  number ('0')
                                                ) (')')
                                              statement_block:
                                                { ('{')
                                                expression_statement:
                                                  call_expression:
                                                    member_expression:
                                                      this ('this')
                                                      . ('.')
                                                      property_identifier ('throwError')
                                                    arguments:
                                                      ( ('(')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('MissingInput')
                                                        " ('"')
                                                      , (',')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('If statement missing condition!')
                                                        " ('"')
                                                      , (',')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('IfBlock')
                                                        " ('"')
                                                      , (',')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('If statement missing condition, defaulting to true!')
                                                        " ('"')
                                                      , (',')
                                                      identifier ('util')
                                                      ) (')')
                                                  ; (';')
                                                } ('}')
                                            expression_statement:
                                              assignment_expression:
                                                identifier ('code')
                                                = ('=')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('code')
                                                    . ('.')
                                                    property_identifier ('concat')
                                                  arguments:
                                                    ( ('(')
                                                    string:
                                                      " ('"')
                                                      string_fragment (') {')
                                                      escape_sequence ('\\n')
                                                      " ('"')
                                                    ) (')')
                                              ; (';')
                                            if_statement:
                                              if ('if')
                                              parenthesized_expression:
                                                ( ('(')
                                                binary_expression:
                                                  member_expression:
                                                    subscript_expression:
                                                      identifier ('blocks')
                                                      [ ('[')
                                                      binary_expression:
                                                        identifier ('i')
                                                        + ('+')
                                                        number ('2')
                                                      ] (']')
                                                    . ('.')
                                                    property_identifier ('length')
                                                  > ('>')
                                                  number ('0')
                                                ) (')')
                                              statement_block:
                                                { ('{')
                                                expression_statement:
                                                  assignment_expression:
                                                    identifier ('code')
                                                    = ('=')
                                                    call_expression:
                                                      member_expression:
                                                        identifier ('code')
                                                        . ('.')
                                                        property_identifier ('concat')
                                                      arguments:
                                                        ( ('(')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('genWGSL')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('2')
                                                              ] (']')
                                                            , (',')
                                                            binary_expression:
                                                              identifier ('recursionDepth')
                                                              + ('+')
                                                              number ('1')
                                                            ) (')')
                                                        ) (')')
                                                  ; (';')
                                                } ('}')
                                            expression_statement:
                                              assignment_expression:
                                                identifier ('code')
                                                = ('=')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('code')
                                                    . ('.')
                                                    property_identifier ('concat')
                                                  arguments:
                                                    ( ('(')
                                                    string:
                                                      " ('"')
                                                      escape_sequence ('\\n')
                                                      string_fragment ('}')
                                                      " ('"')
                                                    ) (')')
                                              ; (';')
                                            comment ('// newlines for some semblance of readability')
                                            expression_statement:
                                              augmented_assignment_expression:
                                                identifier ('i')
                                                += ('+=')
                                                number ('2')
                                              ; (';')
                                            break_statement:
                                              break ('break')
                                              ; (';')
                                            comment ('// did i spell that right')
                                            } ('}')
                                        switch_case:
                                          case ('case')
                                          string:
                                            " ('"')
                                            string_fragment ('control_if_else')
                                            " ('"')
                                          : (':')
                                          statement_block:
                                            { ('{')
                                            expression_statement:
                                              assignment_expression:
                                                identifier ('code')
                                                = ('=')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('code')
                                                    . ('.')
                                                    property_identifier ('concat')
                                                  arguments:
                                                    ( ('(')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('if (')
                                                      " ('"')
                                                    ) (')')
                                              ; (';')
                                            expression_statement:
                                              assignment_expression:
                                                identifier ('code')
                                                = ('=')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('code')
                                                    . ('.')
                                                    property_identifier ('concat')
                                                  arguments:
                                                    ( ('(')
                                                    ternary_expression:
                                                      binary_expression:
                                                        member_expression:
                                                          subscript_expression:
                                                            identifier ('blocks')
                                                            [ ('[')
                                                            binary_expression:
                                                              identifier ('i')
                                                              + ('+')
                                                              number ('1')
                                                            ] (']')
                                                          . ('.')
                                                          property_identifier ('length')
                                                        > ('>')
                                                        number ('0')
                                                      ? ('?')
                                                      call_expression:
                                                        member_expression:
                                                          this ('this')
                                                          . ('.')
                                                          property_identifier ('genWGSL')
                                                        arguments:
                                                          ( ('(')
                                                          identifier ('util')
                                                          , (',')
                                                          subscript_expression:
                                                            identifier ('blocks')
                                                            [ ('[')
                                                            binary_expression:
                                                              identifier ('i')
                                                              + ('+')
                                                              number ('1')
                                                            ] (']')
                                                          , (',')
                                                          binary_expression:
                                                            identifier ('recursionDepth')
                                                            + ('+')
                                                            number ('1')
                                                          ) (')')
                                                      : (':')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('true')
                                                        " ('"')
                                                    ) (')')
                                              ; (';')
                                            if_statement:
                                              if ('if')
                                              parenthesized_expression:
                                                ( ('(')
                                                binary_expression:
                                                  member_expression:
                                                    subscript_expression:
                                                      identifier ('blocks')
                                                      [ ('[')
                                                      binary_expression:
                                                        identifier ('i')
                                                        + ('+')
                                                        number ('1')
                                                      ] (']')
                                                    . ('.')
                                                    property_identifier ('length')
                                                  <= ('<=')
                                                  number ('0')
                                                ) (')')
                                              statement_block:
                                                { ('{')
                                                expression_statement:
                                                  call_expression:
                                                    member_expression:
                                                      this ('this')
                                                      . ('.')
                                                      property_identifier ('throwError')
                                                    arguments:
                                                      ( ('(')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('MissingInput')
                                                        " ('"')
                                                      , (',')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('If statement missing condition!')
                                                        " ('"')
                                                      , (',')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('IfBlock')
                                                        " ('"')
                                                      , (',')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('If statement missing condition, defaulting to true!')
                                                        " ('"')
                                                      , (',')
                                                      identifier ('util')
                                                      ) (')')
                                                  ; (';')
                                                } ('}')
                                            expression_statement:
                                              assignment_expression:
                                                identifier ('code')
                                                = ('=')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('code')
                                                    . ('.')
                                                    property_identifier ('concat')
                                                  arguments:
                                                    ( ('(')
                                                    string:
                                                      " ('"')
                                                      string_fragment (') {')
                                                      escape_sequence ('\\n')
                                                      " ('"')
                                                    ) (')')
                                              ; (';')
                                            if_statement:
                                              if ('if')
                                              parenthesized_expression:
                                                ( ('(')
                                                binary_expression:
                                                  member_expression:
                                                    subscript_expression:
                                                      identifier ('blocks')
                                                      [ ('[')
                                                      binary_expression:
                                                        identifier ('i')
                                                        + ('+')
                                                        number ('2')
                                                      ] (']')
                                                    . ('.')
                                                    property_identifier ('length')
                                                  > ('>')
                                                  number ('0')
                                                ) (')')
                                              statement_block:
                                                { ('{')
                                                expression_statement:
                                                  assignment_expression:
                                                    identifier ('code')
                                                    = ('=')
                                                    call_expression:
                                                      member_expression:
                                                        identifier ('code')
                                                        . ('.')
                                                        property_identifier ('concat')
                                                      arguments:
                                                        ( ('(')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('genWGSL')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('2')
                                                              ] (']')
                                                            , (',')
                                                            binary_expression:
                                                              identifier ('recursionDepth')
                                                              + ('+')
                                                              number ('1')
                                                            ) (')')
                                                        ) (')')
                                                  ; (';')
                                                } ('}')
                                            expression_statement:
                                              assignment_expression:
                                                identifier ('code')
                                                = ('=')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('code')
                                                    . ('.')
                                                    property_identifier ('concat')
                                                  arguments:
                                                    ( ('(')
                                                    string:
                                                      " ('"')
                                                      escape_sequence ('\\n')
                                                      string_fragment ('}')
                                                      escape_sequence ('\\n')
                                                      string_fragment ('else {')
                                                      escape_sequence ('\\n')
                                                      " ('"')
                                                    ) (')')
                                              ; (';')
                                            comment ('// newlines for some semblance of readability')
                                            if_statement:
                                              if ('if')
                                              parenthesized_expression:
                                                ( ('(')
                                                binary_expression:
                                                  member_expression:
                                                    subscript_expression:
                                                      identifier ('blocks')
                                                      [ ('[')
                                                      binary_expression:
                                                        identifier ('i')
                                                        + ('+')
                                                        number ('3')
                                                      ] (']')
                                                    . ('.')
                                                    property_identifier ('length')
                                                  > ('>')
                                                  number ('0')
                                                ) (')')
                                              statement_block:
                                                { ('{')
                                                expression_statement:
                                                  assignment_expression:
                                                    identifier ('code')
                                                    = ('=')
                                                    call_expression:
                                                      member_expression:
                                                        identifier ('code')
                                                        . ('.')
                                                        property_identifier ('concat')
                                                      arguments:
                                                        ( ('(')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('genWGSL')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('3')
                                                              ] (']')
                                                            , (',')
                                                            binary_expression:
                                                              identifier ('recursionDepth')
                                                              + ('+')
                                                              number ('1')
                                                            ) (')')
                                                        ) (')')
                                                  ; (';')
                                                } ('}')
                                            expression_statement:
                                              assignment_expression:
                                                identifier ('code')
                                                = ('=')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('code')
                                                    . ('.')
                                                    property_identifier ('concat')
                                                  arguments:
                                                    ( ('(')
                                                    string:
                                                      " ('"')
                                                      escape_sequence ('\\n')
                                                      string_fragment ('}')
                                                      escape_sequence ('\\n')
                                                      " ('"')
                                                    ) (')')
                                              ; (';')
                                            expression_statement:
                                              augmented_assignment_expression:
                                                identifier ('i')
                                                += ('+=')
                                                number ('3')
                                              ; (';')
                                            break_statement:
                                              break ('break')
                                              ; (';')
                                            } ('}')
                                        switch_case:
                                          case ('case')
                                          string:
                                            " ('"')
                                            string_fragment ('gpusb3_declareVar')
                                            " ('"')
                                          : (':')
                                          statement_block:
                                            { ('{')
                                            expression_statement:
                                              assignment_expression:
                                                identifier ('code')
                                                = ('=')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('code')
                                                    . ('.')
                                                    property_identifier ('concat')
                                                  arguments:
                                                    ( ('(')
                                                    ternary_expression:
                                                      call_expression:
                                                        member_expression:
                                                          identifier ('Array')
                                                          . ('.')
                                                          property_identifier ('isArray')
                                                        arguments:
                                                          ( ('(')
                                                          subscript_expression:
                                                            identifier ('blocks')
                                                            [ ('[')
                                                            binary_expression:
                                                              identifier ('i')
                                                              + ('+')
                                                              number ('1')
                                                            ] (']')
                                                          ) (')')
                                                      ? ('?')
                                                      template_string:
                                                        ` ('`')
                                                        string_fragment ('var<')
                                                        template_substitution:
                                                          ${ ('${')
                                                          call_expression:
                                                            member_expression:
                                                              this ('this')
                                                              . ('.')
                                                              property_identifier ('genWGSL')
                                                            arguments:
                                                              ( ('(')
                                                              identifier ('util')
                                                              , (',')
                                                              subscript_expression:
                                                                identifier ('blocks')
                                                                [ ('[')
                                                                binary_expression:
                                                                  identifier ('i')
                                                                  + ('+')
                                                                  number ('1')
                                                                ] (']')
                                                              , (',')
                                                              binary_expression:
                                                                identifier ('recursionDepth')
                                                                + ('+')
                                                                number ('1')
                                                              ) (')')
                                                          } ('}')
                                                        string_fragment ('>')
                                                        ` ('`')
                                                      : (':')
                                                      call_expression:
                                                        member_expression:
                                                          this ('this')
                                                          . ('.')
                                                          property_identifier ('textFromOp')
                                                        arguments:
                                                          ( ('(')
                                                          identifier ('util')
                                                          , (',')
                                                          subscript_expression:
                                                            identifier ('blocks')
                                                            [ ('[')
                                                            binary_expression:
                                                              identifier ('i')
                                                              + ('+')
                                                              number ('1')
                                                            ] (']')
                                                          , (',')
                                                          false ('false')
                                                          ) (')')
                                                    ) (')')
                                              ; (';')
                                            expression_statement:
                                              assignment_expression:
                                                identifier ('code')
                                                = ('=')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('code')
                                                    . ('.')
                                                    property_identifier ('concat')
                                                  arguments:
                                                    ( ('(')
                                                    string:
                                                      " ('"')
                                                      string_fragment (' ')
                                                      " ('"')
                                                    ) (')')
                                              ; (';')
                                            expression_statement:
                                              assignment_expression:
                                                identifier ('code')
                                                = ('=')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('code')
                                                    . ('.')
                                                    property_identifier ('concat')
                                                  arguments:
                                                    ( ('(')
                                                    ternary_expression:
                                                      call_expression:
                                                        member_expression:
                                                          identifier ('Array')
                                                          . ('.')
                                                          property_identifier ('isArray')
                                                        arguments:
                                                          ( ('(')
                                                          subscript_expression:
                                                            identifier ('blocks')
                                                            [ ('[')
                                                            binary_expression:
                                                              identifier ('i')
                                                              + ('+')
                                                              number ('2')
                                                            ] (']')
                                                          ) (')')
                                                      ? ('?')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('_')
                                                        " ('"')
                                                      : (':')
                                                      call_expression:
                                                        member_expression:
                                                          this ('this')
                                                          . ('.')
                                                          property_identifier ('textFromOp')
                                                        arguments:
                                                          ( ('(')
                                                          identifier ('util')
                                                          , (',')
                                                          subscript_expression:
                                                            identifier ('blocks')
                                                            [ ('[')
                                                            binary_expression:
                                                              identifier ('i')
                                                              + ('+')
                                                              number ('2')
                                                            ] (']')
                                                          , (',')
                                                          false ('false')
                                                          ) (')')
                                                    ) (')')
                                              ; (';')
                                            lexical_declaration:
                                              const ('const')
                                              variable_declarator:
                                                identifier ('t')
                                                = ('=')
                                                ternary_expression:
                                                  call_expression:
                                                    member_expression:
                                                      identifier ('Array')
                                                      . ('.')
                                                      property_identifier ('isArray')
                                                    arguments:
                                                      ( ('(')
                                                      subscript_expression:
                                                        identifier ('blocks')
                                                        [ ('[')
                                                        binary_expression:
                                                          identifier ('i')
                                                          + ('+')
                                                          number ('4')
                                                        ] (']')
                                                      ) (')')
                                                  ? ('?')
                                                  call_expression:
                                                    member_expression:
                                                      this ('this')
                                                      . ('.')
                                                      property_identifier ('genWGSL')
                                                    arguments:
                                                      ( ('(')
                                                      identifier ('util')
                                                      , (',')
                                                      subscript_expression:
                                                        identifier ('blocks')
                                                        [ ('[')
                                                        binary_expression:
                                                          identifier ('i')
                                                          + ('+')
                                                          number ('4')
                                                        ] (']')
                                                      , (',')
                                                      binary_expression:
                                                        identifier ('recursionDepth')
                                                        + ('+')
                                                        number ('1')
                                                      ) (')')
                                                  : (':')
                                                  call_expression:
                                                    member_expression:
                                                      this ('this')
                                                      . ('.')
                                                      property_identifier ('textFromOp')
                                                    arguments:
                                                      ( ('(')
                                                      identifier ('util')
                                                      , (',')
                                                      subscript_expression:
                                                        identifier ('blocks')
                                                        [ ('[')
                                                        binary_expression:
                                                          identifier ('i')
                                                          + ('+')
                                                          number ('4')
                                                        ] (']')
                                                      , (',')
                                                      false ('false')
                                                      ) (')')
                                              ; (';')
                                            if_statement:
                                              if ('if')
                                              parenthesized_expression:
                                                ( ('(')
                                                binary_expression:
                                                  identifier ('t')
                                                  !== ('!==')
                                                  string:
                                                    " ('"')
                                                    string_fragment ('auto')
                                                    " ('"')
                                                ) (')')
                                              statement_block:
                                                { ('{')
                                                expression_statement:
                                                  assignment_expression:
                                                    identifier ('code')
                                                    = ('=')
                                                    call_expression:
                                                      member_expression:
                                                        identifier ('code')
                                                        . ('.')
                                                        property_identifier ('concat')
                                                      arguments:
                                                        ( ('(')
                                                        string:
                                                          " ('"')
                                                          string_fragment (': ')
                                                          " ('"')
                                                        ) (')')
                                                  ; (';')
                                                expression_statement:
                                                  assignment_expression:
                                                    identifier ('code')
                                                    = ('=')
                                                    call_expression:
                                                      member_expression:
                                                        identifier ('code')
                                                        . ('.')
                                                        property_identifier ('concat')
                                                      arguments:
                                                        ( ('(')
                                                        identifier ('t')
                                                        ) (')')
                                                  ; (';')
                                                } ('}')
                                            if_statement:
                                              if ('if')
                                              parenthesized_expression:
                                                ( ('(')
                                                unary_expression:
                                                  ! ('!')
                                                  call_expression:
                                                    member_expression:
                                                      identifier ('Array')
                                                      . ('.')
                                                      property_identifier ('isArray')
                                                    arguments:
                                                      ( ('(')
                                                      subscript_expression:
                                                        identifier ('blocks')
                                                        [ ('[')
                                                        binary_expression:
                                                          identifier ('i')
                                                          + ('+')
                                                          number ('3')
                                                        ] (']')
                                                      ) (')')
                                                ) (')')
                                              statement_block:
                                                { ('{')
                                                lexical_declaration:
                                                  const ('const')
                                                  variable_declarator:
                                                    identifier ('t')
                                                    = ('=')
                                                    call_expression:
                                                      member_expression:
                                                        this ('this')
                                                        . ('.')
                                                        property_identifier ('textFromOp')
                                                      arguments:
                                                        ( ('(')
                                                        identifier ('util')
                                                        , (',')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('3')
                                                          ] (']')
                                                        , (',')
                                                        false ('false')
                                                        ) (')')
                                                  ; (';')
                                                comment ('//console.log(JSON.stringify(t), t == "")')
                                                if_statement:
                                                  if ('if')
                                                  parenthesized_expression:
                                                    ( ('(')
                                                    binary_expression:
                                                      identifier ('t')
                                                      != ('!=')
                                                      string:
                                                        " ('"')
                                                        " ('"')
                                                    ) (')')
                                                  statement_block:
                                                    { ('{')
                                                    expression_statement:
                                                      assignment_expression:
                                                        identifier ('code')
                                                        = ('=')
                                                        call_expression:
                                                          member_expression:
                                                            identifier ('code')
                                                            . ('.')
                                                            property_identifier ('concat')
                                                          arguments:
                                                            ( ('(')
                                                            string:
                                                              " ('"')
                                                              string_fragment (' = ')
                                                              " ('"')
                                                            ) (')')
                                                      ; (';')
                                                    expression_statement:
                                                      assignment_expression:
                                                        identifier ('code')
                                                        = ('=')
                                                        call_expression:
                                                          member_expression:
                                                            identifier ('code')
                                                            . ('.')
                                                            property_identifier ('concat')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('t')
                                                            ) (')')
                                                      ; (';')
                                                    } ('}')
                                                } ('}')
                                              else_clause:
                                                else ('else')
                                                statement_block:
                                                  { ('{')
                                                  expression_statement:
                                                    assignment_expression:
                                                      identifier ('code')
                                                      = ('=')
                                                      call_expression:
                                                        member_expression:
                                                          identifier ('code')
                                                          . ('.')
                                                          property_identifier ('concat')
                                                        arguments:
                                                          ( ('(')
                                                          string:
                                                            " ('"')
                                                            string_fragment (' = ')
                                                            " ('"')
                                                          ) (')')
                                                    ; (';')
                                                  expression_statement:
                                                    assignment_expression:
                                                      identifier ('code')
                                                      = ('=')
                                                      call_expression:
                                                        member_expression:
                                                          identifier ('code')
                                                          . ('.')
                                                          property_identifier ('concat')
                                                        arguments:
                                                          ( ('(')
                                                          call_expression:
                                                            member_expression:
                                                              this ('this')
                                                              . ('.')
                                                              property_identifier ('genWGSL')
                                                            arguments:
                                                              ( ('(')
                                                              identifier ('util')
                                                              , (',')
                                                              subscript_expression:
                                                                identifier ('blocks')
                                                                [ ('[')
                                                                binary_expression:
                                                                  identifier ('i')
                                                                  + ('+')
                                                                  number ('3')
                                                                ] (']')
                                                              , (',')
                                                              binary_expression:
                                                                identifier ('recursionDepth')
                                                                + ('+')
                                                                number ('1')
                                                              ) (')')
                                                          ) (')')
                                                    ; (';')
                                                  } ('}')
                                            expression_statement:
                                              assignment_expression:
                                                identifier ('code')
                                                = ('=')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('code')
                                                    . ('.')
                                                    property_identifier ('concat')
                                                  arguments:
                                                    ( ('(')
                                                    string:
                                                      " ('"')
                                                      string_fragment (';')
                                                      escape_sequence ('\\n')
                                                      " ('"')
                                                    ) (')')
                                              ; (';')
                                            expression_statement:
                                              augmented_assignment_expression:
                                                identifier ('i')
                                                += ('+=')
                                                number ('4')
                                              ; (';')
                                            break_statement:
                                              break ('break')
                                              ; (';')
                                            } ('}')
                                        switch_case:
                                          case ('case')
                                          string:
                                            " ('"')
                                            string_fragment ('gpusb3_varOp')
                                            " ('"')
                                          : (':')
                                          statement_block:
                                            { ('{')
                                            if_statement:
                                              if ('if')
                                              parenthesized_expression:
                                                ( ('(')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('Array')
                                                    . ('.')
                                                    property_identifier ('isArray')
                                                  arguments:
                                                    ( ('(')
                                                    subscript_expression:
                                                      identifier ('blocks')
                                                      [ ('[')
                                                      binary_expression:
                                                        identifier ('i')
                                                        + ('+')
                                                        number ('2')
                                                      ] (']')
                                                    ) (')')
                                                ) (')')
                                              statement_block:
                                                { ('{')
                                                expression_statement:
                                                  call_expression:
                                                    member_expression:
                                                      this ('this')
                                                      . ('.')
                                                      property_identifier ('throwError')
                                                    arguments:
                                                      ( ('(')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('UnexpectedInput')
                                                        " ('"')
                                                      , (',')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('Unexpected input for block input!')
                                                        " ('"')
                                                      , (',')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('VarOpBlock')
                                                        " ('"')
                                                      , (',')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('Unexpected input in Variable operation block!')
                                                        " ('"')
                                                      , (',')
                                                      identifier ('util')
                                                      ) (')')
                                                  ; (';')
                                                return_statement:
                                                  return ('return')
                                                  binary_expression:
                                                    identifier ('code')
                                                    + ('+')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('Error! - compilation stopped')
                                                      " ('"')
                                                  ; (';')
                                                } ('}')
                                            expression_statement:
                                              assignment_expression:
                                                identifier ('code')
                                                = ('=')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('code')
                                                    . ('.')
                                                    property_identifier ('concat')
                                                  arguments:
                                                    ( ('(')
                                                    ternary_expression:
                                                      call_expression:
                                                        member_expression:
                                                          identifier ('Array')
                                                          . ('.')
                                                          property_identifier ('isArray')
                                                        arguments:
                                                          ( ('(')
                                                          subscript_expression:
                                                            identifier ('blocks')
                                                            [ ('[')
                                                            binary_expression:
                                                              identifier ('i')
                                                              + ('+')
                                                              number ('1')
                                                            ] (']')
                                                          ) (')')
                                                      ? ('?')
                                                      call_expression:
                                                        member_expression:
                                                          this ('this')
                                                          . ('.')
                                                          property_identifier ('genWGSL')
                                                        arguments:
                                                          ( ('(')
                                                          identifier ('util')
                                                          , (',')
                                                          subscript_expression:
                                                            identifier ('blocks')
                                                            [ ('[')
                                                            binary_expression:
                                                              identifier ('i')
                                                              + ('+')
                                                              number ('1')
                                                            ] (']')
                                                          , (',')
                                                          binary_expression:
                                                            identifier ('recursionDepth')
                                                            + ('+')
                                                            number ('1')
                                                          ) (')')
                                                      : (':')
                                                      call_expression:
                                                        member_expression:
                                                          this ('this')
                                                          . ('.')
                                                          property_identifier ('textFromOp')
                                                        arguments:
                                                          ( ('(')
                                                          identifier ('util')
                                                          , (',')
                                                          subscript_expression:
                                                            identifier ('blocks')
                                                            [ ('[')
                                                            binary_expression:
                                                              identifier ('i')
                                                              + ('+')
                                                              number ('1')
                                                            ] (']')
                                                          , (',')
                                                          false ('false')
                                                          ) (')')
                                                    ) (')')
                                              ; (';')
                                            expression_statement:
                                              assignment_expression:
                                                identifier ('code')
                                                = ('=')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('code')
                                                    . ('.')
                                                    property_identifier ('concat')
                                                  arguments:
                                                    ( ('(')
                                                    template_string:
                                                      ` ('`')
                                                      string_fragment (' ')
                                                      template_substitution:
                                                        ${ ('${')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('textFromOp')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('2')
                                                              ] (']')
                                                            , (',')
                                                            false ('false')
                                                            ) (')')
                                                        } ('}')
                                                      string_fragment (' ')
                                                      template_substitution:
                                                        ${ ('${')
                                                        ternary_expression:
                                                          call_expression:
                                                            member_expression:
                                                              identifier ('Array')
                                                              . ('.')
                                                              property_identifier ('isArray')
                                                            arguments:
                                                              ( ('(')
                                                              subscript_expression:
                                                                identifier ('blocks')
                                                                [ ('[')
                                                                binary_expression:
                                                                  identifier ('i')
                                                                  + ('+')
                                                                  number ('3')
                                                                ] (']')
                                                              ) (')')
                                                          ? ('?')
                                                          call_expression:
                                                            member_expression:
                                                              this ('this')
                                                              . ('.')
                                                              property_identifier ('genWGSL')
                                                            arguments:
                                                              ( ('(')
                                                              identifier ('util')
                                                              , (',')
                                                              subscript_expression:
                                                                identifier ('blocks')
                                                                [ ('[')
                                                                binary_expression:
                                                                  identifier ('i')
                                                                  + ('+')
                                                                  number ('3')
                                                                ] (']')
                                                              , (',')
                                                              binary_expression:
                                                                identifier ('recursionDepth')
                                                                + ('+')
                                                                number ('1')
                                                              ) (')')
                                                          : (':')
                                                          call_expression:
                                                            member_expression:
                                                              this ('this')
                                                              . ('.')
                                                              property_identifier ('textFromOp')
                                                            arguments:
                                                              ( ('(')
                                                              identifier ('util')
                                                              , (',')
                                                              subscript_expression:
                                                                identifier ('blocks')
                                                                [ ('[')
                                                                binary_expression:
                                                                  identifier ('i')
                                                                  + ('+')
                                                                  number ('3')
                                                                ] (']')
                                                              , (',')
                                                              false ('false')
                                                              ) (')')
                                                        } ('}')
                                                      string_fragment (';')
                                                      escape_sequence ('\\n')
                                                      ` ('`')
                                                    ) (')')
                                              ; (';')
                                            expression_statement:
                                              augmented_assignment_expression:
                                                identifier ('i')
                                                += ('+=')
                                                number ('3')
                                              ; (';')
                                            break_statement:
                                              break ('break')
                                              ; (';')
                                            } ('}')
                                        switch_case:
                                          case ('case')
                                          string:
                                            " ('"')
                                            string_fragment ('gpusb3_computeFunc')
                                            " ('"')
                                          : (':')
                                          statement_block:
                                            { ('{')
                                            comment ('// @group(0) @binding(0) var<storage, read_write> data: array<f32>;')
                                            expression_statement:
                                              assignment_expression:
                                                identifier ('code')
                                                = ('=')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('code')
                                                    . ('.')
                                                    property_identifier ('concat')
                                                  arguments:
                                                    ( ('(')
                                                    template_string:
                                                      ` ('`')
                                                      string_fragment ('\n\n@compute @workgroup_size(')
                                                      template_substitution:
                                                        ${ ('${')
                                                        ternary_expression:
                                                          call_expression:
                                                            member_expression:
                                                              identifier ('Array')
                                                              . ('.')
                                                              property_identifier ('isArray')
                                                            arguments:
                                                              ( ('(')
                                                              subscript_expression:
                                                                identifier ('blocks')
                                                                [ ('[')
                                                                binary_expression:
                                                                  identifier ('i')
                                                                  + ('+')
                                                                  number ('1')
                                                                ] (']')
                                                              ) (')')
                                                          ? ('?')
                                                          string:
                                                            " ('"')
                                                            string_fragment ('64')
                                                            " ('"')
                                                          : (':')
                                                          ternary_expression:
                                                            call_expression:
                                                              member_expression:
                                                                this ('this')
                                                                . ('.')
                                                                property_identifier ('isStringified')
                                                              arguments:
                                                                ( ('(')
                                                                call_expression:
                                                                  member_expression:
                                                                    this ('this')
                                                                    . ('.')
                                                                    property_identifier ('textFromOp')
                                                                  arguments:
                                                                    ( ('(')
                                                                    identifier ('util')
                                                                    , (',')
                                                                    subscript_expression:
                                                                      identifier ('blocks')
                                                                      [ ('[')
                                                                      binary_expression:
                                                                        identifier ('i')
                                                                        + ('+')
                                                                        number ('1')
                                                                      ] (']')
                                                                    , (',')
                                                                    false ('false')
                                                                    ) (')')
                                                                ) (')')
                                                            ? ('?')
                                                            call_expression:
                                                              member_expression:
                                                                identifier ('JSON')
                                                                . ('.')
                                                                property_identifier ('parse')
                                                              arguments:
                                                                ( ('(')
                                                                call_expression:
                                                                  member_expression:
                                                                    this ('this')
                                                                    . ('.')
                                                                    property_identifier ('textFromOp')
                                                                  arguments:
                                                                    ( ('(')
                                                                    identifier ('util')
                                                                    , (',')
                                                                    subscript_expression:
                                                                      identifier ('blocks')
                                                                      [ ('[')
                                                                      binary_expression:
                                                                        identifier ('i')
                                                                        + ('+')
                                                                        number ('1')
                                                                      ] (']')
                                                                    , (',')
                                                                    false ('false')
                                                                    ) (')')
                                                                ) (')')
                                                            : (':')
                                                            string:
                                                              " ('"')
                                                              string_fragment ('64')
                                                              " ('"')
                                                        } ('}')
                                                      string_fragment (') fn computeShader(\n\n@builtin(workgroup_id) workgroup_id : vec3<u32>,\n@builtin(local_invocation_id) local_invocation_id : vec3<u32>,\n@builtin(global_invocation_id) global_invocation_id : vec3<u32>,\n@builtin(local_invocation_index) local_invocation_index: u32,\n@builtin(num_workgroups) num_workgroups: vec3<u32>\n\n                                ) {')
                                                      escape_sequence ('\\n')
                                                      escape_sequence ('\\n')
                                                      ` ('`')
                                                    ) (')')
                                              ; (';')
                                            if_statement:
                                              if ('if')
                                              parenthesized_expression:
                                                ( ('(')
                                                binary_expression:
                                                  member_expression:
                                                    subscript_expression:
                                                      identifier ('blocks')
                                                      [ ('[')
                                                      binary_expression:
                                                        identifier ('i')
                                                        + ('+')
                                                        number ('2')
                                                      ] (']')
                                                    . ('.')
                                                    property_identifier ('length')
                                                  > ('>')
                                                  number ('0')
                                                ) (')')
                                              statement_block:
                                                { ('{')
                                                expression_statement:
                                                  assignment_expression:
                                                    identifier ('code')
                                                    = ('=')
                                                    call_expression:
                                                      member_expression:
                                                        identifier ('code')
                                                        . ('.')
                                                        property_identifier ('concat')
                                                      arguments:
                                                        ( ('(')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('genWGSL')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('2')
                                                              ] (']')
                                                            , (',')
                                                            binary_expression:
                                                              identifier ('recursionDepth')
                                                              + ('+')
                                                              number ('1')
                                                            ) (')')
                                                        ) (')')
                                                  ; (';')
                                                } ('}')
                                              else_clause:
                                                else ('else')
                                                statement_block:
                                                  { ('{')
                                                  expression_statement:
                                                    assignment_expression:
                                                      identifier ('code')
                                                      = ('=')
                                                      call_expression:
                                                        member_expression:
                                                          identifier ('code')
                                                          . ('.')
                                                          property_identifier ('concat')
                                                        arguments:
                                                          ( ('(')
                                                          string:
                                                            " ('"')
                                                            string_fragment ('return;')
                                                            escape_sequence ('\\n')
                                                            " ('"')
                                                          ) (')')
                                                    ; (';')
                                                  } ('}')
                                            expression_statement:
                                              assignment_expression:
                                                identifier ('code')
                                                = ('=')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('code')
                                                    . ('.')
                                                    property_identifier ('concat')
                                                  arguments:
                                                    ( ('(')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('}')
                                                      escape_sequence ('\\n')
                                                      " ('"')
                                                    ) (')')
                                              ; (';')
                                            expression_statement:
                                              augmented_assignment_expression:
                                                identifier ('i')
                                                += ('+=')
                                                number ('2')
                                              ; (';')
                                            break_statement:
                                              break ('break')
                                              ; (';')
                                            } ('}')
                                        switch_case:
                                          case ('case')
                                          string:
                                            " ('"')
                                            string_fragment ('gpusb3_wgslForLoop')
                                            " ('"')
                                          : (':')
                                          statement_block:
                                            { ('{')
                                            if_statement:
                                              if ('if')
                                              parenthesized_expression:
                                                ( ('(')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('Array')
                                                    . ('.')
                                                    property_identifier ('isArray')
                                                  arguments:
                                                    ( ('(')
                                                    subscript_expression:
                                                      identifier ('blocks')
                                                      [ ('[')
                                                      binary_expression:
                                                        identifier ('i')
                                                        + ('+')
                                                        number ('1')
                                                      ] (']')
                                                    ) (')')
                                                ) (')')
                                              statement_block:
                                                { ('{')
                                                expression_statement:
                                                  call_expression:
                                                    member_expression:
                                                      this ('this')
                                                      . ('.')
                                                      property_identifier ('throwError')
                                                    arguments:
                                                      ( ('(')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('UnexpectedInput')
                                                        " ('"')
                                                      , (',')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('Unexpected input for block input!')
                                                        " ('"')
                                                      , (',')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('ForLoopBlock')
                                                        " ('"')
                                                      , (',')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('Unexpected input in For loop block!')
                                                        " ('"')
                                                      , (',')
                                                      identifier ('util')
                                                      ) (')')
                                                  ; (';')
                                                return_statement:
                                                  return ('return')
                                                  binary_expression:
                                                    identifier ('code')
                                                    + ('+')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('Error! - compilation stopped')
                                                      " ('"')
                                                  ; (';')
                                                } ('}')
                                            expression_statement:
                                              assignment_expression:
                                                identifier ('code')
                                                = ('=')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('code')
                                                    . ('.')
                                                    property_identifier ('concat')
                                                  arguments:
                                                    ( ('(')
                                                    template_string:
                                                      ` ('`')
                                                      string_fragment ('\nvar ')
                                                      template_substitution:
                                                        ${ ('${')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('textFromOp')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('1')
                                                              ] (']')
                                                            , (',')
                                                            false ('false')
                                                            ) (')')
                                                        } ('}')
                                                      string_fragment (' = ')
                                                      template_substitution:
                                                        ${ ('${')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('resolveInput')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('2')
                                                              ] (']')
                                                            ) (')')
                                                        } ('}')
                                                      string_fragment (';\nloop {\nif (')
                                                      template_substitution:
                                                        ${ ('${')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('textFromOp')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('1')
                                                              ] (']')
                                                            , (',')
                                                            false ('false')
                                                            ) (')')
                                                        } ('}')
                                                      string_fragment (' > ')
                                                      template_substitution:
                                                        ${ ('${')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('resolveInput')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('3')
                                                              ] (']')
                                                            ) (')')
                                                        } ('}')
                                                      string_fragment (') {\nbreak;\n};\n\n')
                                                      ` ('`')
                                                    ) (')')
                                              ; (';')
                                            comment ('// GOD FUCKING DAMN IT "break if (condition)" IS IN THE OFFICIAL SPEC WHY THE HELL IS IT INVALID THIS IS BULLSHIT')
                                            comment ('// I HAD TO GO OUT OF MY WAY AND SPEND 15 SECONDS CHANGING THIS CODE')
                                            if_statement:
                                              if ('if')
                                              parenthesized_expression:
                                                ( ('(')
                                                binary_expression:
                                                  member_expression:
                                                    subscript_expression:
                                                      identifier ('blocks')
                                                      [ ('[')
                                                      binary_expression:
                                                        identifier ('i')
                                                        + ('+')
                                                        number ('4')
                                                      ] (']')
                                                    . ('.')
                                                    property_identifier ('length')
                                                  > ('>')
                                                  number ('0')
                                                ) (')')
                                              statement_block:
                                                { ('{')
                                                expression_statement:
                                                  assignment_expression:
                                                    identifier ('code')
                                                    = ('=')
                                                    call_expression:
                                                      member_expression:
                                                        identifier ('code')
                                                        . ('.')
                                                        property_identifier ('concat')
                                                      arguments:
                                                        ( ('(')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('genWGSL')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('4')
                                                              ] (']')
                                                            , (',')
                                                            binary_expression:
                                                              identifier ('recursionDepth')
                                                              + ('+')
                                                              number ('1')
                                                            ) (')')
                                                        ) (')')
                                                  ; (';')
                                                } ('}')
                                              else_clause:
                                                else ('else')
                                                statement_block:
                                                  { ('{')
                                                  expression_statement:
                                                    assignment_expression:
                                                      identifier ('code')
                                                      = ('=')
                                                      call_expression:
                                                        member_expression:
                                                          identifier ('code')
                                                          . ('.')
                                                          property_identifier ('concat')
                                                        arguments:
                                                          ( ('(')
                                                          string:
                                                            " ('"')
                                                            string_fragment ('break;')
                                                            escape_sequence ('\\n')
                                                            " ('"')
                                                          ) (')')
                                                    ; (';')
                                                  } ('}')
                                            expression_statement:
                                              assignment_expression:
                                                identifier ('code')
                                                = ('=')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('code')
                                                    . ('.')
                                                    property_identifier ('concat')
                                                  arguments:
                                                    ( ('(')
                                                    template_string:
                                                      ` ('`')
                                                      template_substitution:
                                                        ${ ('${')
                                                        ternary_expression:
                                                          call_expression:
                                                            member_expression:
                                                              identifier ('Array')
                                                              . ('.')
                                                              property_identifier ('isArray')
                                                            arguments:
                                                              ( ('(')
                                                              subscript_expression:
                                                                identifier ('blocks')
                                                                [ ('[')
                                                                binary_expression:
                                                                  identifier ('i')
                                                                  + ('+')
                                                                  number ('1')
                                                                ] (']')
                                                              ) (')')
                                                          ? ('?')
                                                          string:
                                                            " ('"')
                                                            string_fragment ('Error!')
                                                            " ('"')
                                                          : (':')
                                                          call_expression:
                                                            member_expression:
                                                              this ('this')
                                                              . ('.')
                                                              property_identifier ('textFromOp')
                                                            arguments:
                                                              ( ('(')
                                                              identifier ('util')
                                                              , (',')
                                                              subscript_expression:
                                                                identifier ('blocks')
                                                                [ ('[')
                                                                binary_expression:
                                                                  identifier ('i')
                                                                  + ('+')
                                                                  number ('1')
                                                                ] (']')
                                                              , (',')
                                                              false ('false')
                                                              ) (')')
                                                        } ('}')
                                                      string_fragment ('++;}')
                                                      escape_sequence ('\\n')
                                                      ` ('`')
                                                    ) (')')
                                              ; (';')
                                            comment ('// newlines for some semblance of readability')
                                            expression_statement:
                                              augmented_assignment_expression:
                                                identifier ('i')
                                                += ('+=')
                                                number ('4')
                                              ; (';')
                                            break_statement:
                                              break ('break')
                                              ; (';')
                                            } ('}')
                                        switch_case:
                                          case ('case')
                                          string:
                                            " ('"')
                                            string_fragment ('gpusb3_wgslWhileLoop')
                                            " ('"')
                                          : (':')
                                          statement_block:
                                            { ('{')
                                            expression_statement:
                                              assignment_expression:
                                                identifier ('code')
                                                = ('=')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('code')
                                                    . ('.')
                                                    property_identifier ('concat')
                                                  arguments:
                                                    ( ('(')
                                                    template_string:
                                                      ` ('`')
                                                      string_fragment ('\nwhile (')
                                                      template_substitution:
                                                        ${ ('${')
                                                        ternary_expression:
                                                          call_expression:
                                                            member_expression:
                                                              identifier ('Array')
                                                              . ('.')
                                                              property_identifier ('isArray')
                                                            arguments:
                                                              ( ('(')
                                                              subscript_expression:
                                                                identifier ('blocks')
                                                                [ ('[')
                                                                binary_expression:
                                                                  identifier ('i')
                                                                  + ('+')
                                                                  number ('1')
                                                                ] (']')
                                                              ) (')')
                                                          ? ('?')
                                                          call_expression:
                                                            member_expression:
                                                              this ('this')
                                                              . ('.')
                                                              property_identifier ('genWGSL')
                                                            arguments:
                                                              ( ('(')
                                                              identifier ('util')
                                                              , (',')
                                                              subscript_expression:
                                                                identifier ('blocks')
                                                                [ ('[')
                                                                binary_expression:
                                                                  identifier ('i')
                                                                  + ('+')
                                                                  number ('1')
                                                                ] (']')
                                                              , (',')
                                                              binary_expression:
                                                                identifier ('recursionDepth')
                                                                + ('+')
                                                                number ('1')
                                                              ) (')')
                                                          : (':')
                                                          call_expression:
                                                            member_expression:
                                                              this ('this')
                                                              . ('.')
                                                              property_identifier ('textFromOp')
                                                            arguments:
                                                              ( ('(')
                                                              identifier ('util')
                                                              , (',')
                                                              subscript_expression:
                                                                identifier ('blocks')
                                                                [ ('[')
                                                                binary_expression:
                                                                  identifier ('i')
                                                                  + ('+')
                                                                  number ('1')
                                                                ] (']')
                                                              , (',')
                                                              false ('false')
                                                              ) (')')
                                                        } ('}')
                                                      string_fragment (') {\n\n')
                                                      ` ('`')
                                                    ) (')')
                                              ; (';')
                                            if_statement:
                                              if ('if')
                                              parenthesized_expression:
                                                ( ('(')
                                                binary_expression:
                                                  member_expression:
                                                    subscript_expression:
                                                      identifier ('blocks')
                                                      [ ('[')
                                                      binary_expression:
                                                        identifier ('i')
                                                        + ('+')
                                                        number ('4')
                                                      ] (']')
                                                    . ('.')
                                                    property_identifier ('length')
                                                  > ('>')
                                                  number ('0')
                                                ) (')')
                                              statement_block:
                                                { ('{')
                                                expression_statement:
                                                  assignment_expression:
                                                    identifier ('code')
                                                    = ('=')
                                                    call_expression:
                                                      member_expression:
                                                        identifier ('code')
                                                        . ('.')
                                                        property_identifier ('concat')
                                                      arguments:
                                                        ( ('(')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('genWGSL')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('2')
                                                              ] (']')
                                                            , (',')
                                                            binary_expression:
                                                              identifier ('recursionDepth')
                                                              + ('+')
                                                              number ('1')
                                                            ) (')')
                                                        ) (')')
                                                  ; (';')
                                                } ('}')
                                              else_clause:
                                                else ('else')
                                                statement_block:
                                                  { ('{')
                                                  expression_statement:
                                                    assignment_expression:
                                                      identifier ('code')
                                                      = ('=')
                                                      call_expression:
                                                        member_expression:
                                                          identifier ('code')
                                                          . ('.')
                                                          property_identifier ('concat')
                                                        arguments:
                                                          ( ('(')
                                                          string:
                                                            " ('"')
                                                            string_fragment ('break;')
                                                            escape_sequence ('\\n')
                                                            " ('"')
                                                          ) (')')
                                                    ; (';')
                                                  } ('}')
                                            expression_statement:
                                              assignment_expression:
                                                identifier ('code')
                                                = ('=')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('code')
                                                    . ('.')
                                                    property_identifier ('concat')
                                                  arguments:
                                                    ( ('(')
                                                    template_string:
                                                      ` ('`')
                                                      string_fragment ('}')
                                                      escape_sequence ('\\n')
                                                      ` ('`')
                                                    ) (')')
                                              ; (';')
                                            comment ('// newlines for some semblance of readability')
                                            expression_statement:
                                              augmented_assignment_expression:
                                                identifier ('i')
                                                += ('+=')
                                                number ('2')
                                              ; (';')
                                            break_statement:
                                              break ('break')
                                              ; (';')
                                            } ('}')
                                        comment ('// probably the 2 most simple blocks')
                                        switch_case:
                                          case ('case')
                                          string:
                                            " ('"')
                                            string_fragment ('gpusb3_break')
                                            " ('"')
                                          : (':')
                                          statement_block:
                                            { ('{')
                                            expression_statement:
                                              assignment_expression:
                                                identifier ('code')
                                                = ('=')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('code')
                                                    . ('.')
                                                    property_identifier ('concat')
                                                  arguments:
                                                    ( ('(')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('break;')
                                                      escape_sequence ('\\n')
                                                      " ('"')
                                                    ) (')')
                                              ; (';')
                                            break_statement:
                                              break ('break')
                                              ; (';')
                                            } ('}')
                                        switch_case:
                                          case ('case')
                                          string:
                                            " ('"')
                                            string_fragment ('gpusb3_continue')
                                            " ('"')
                                          : (':')
                                          statement_block:
                                            { ('{')
                                            expression_statement:
                                              assignment_expression:
                                                identifier ('code')
                                                = ('=')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('code')
                                                    . ('.')
                                                    property_identifier ('concat')
                                                  arguments:
                                                    ( ('(')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('continue;')
                                                      escape_sequence ('\\n')
                                                      " ('"')
                                                    ) (')')
                                              ; (';')
                                            break_statement:
                                              break ('break')
                                              ; (';')
                                            } ('}')
                                        switch_case:
                                          case ('case')
                                          string:
                                            " ('"')
                                            string_fragment ('gpusb3_bindInput')
                                            " ('"')
                                          : (':')
                                          statement_block:
                                            { ('{')
                                            if_statement:
                                              if ('if')
                                              parenthesized_expression:
                                                ( ('(')
                                                binary_expression:
                                                  call_expression:
                                                    member_expression:
                                                      identifier ('Array')
                                                      . ('.')
                                                      property_identifier ('isArray')
                                                    arguments:
                                                      ( ('(')
                                                      subscript_expression:
                                                        identifier ('blocks')
                                                        [ ('[')
                                                        binary_expression:
                                                          identifier ('i')
                                                          + ('+')
                                                          number ('1')
                                                        ] (']')
                                                      ) (')')
                                                  || ('||')
                                                  call_expression:
                                                    member_expression:
                                                      identifier ('Array')
                                                      . ('.')
                                                      property_identifier ('isArray')
                                                    arguments:
                                                      ( ('(')
                                                      subscript_expression:
                                                        identifier ('blocks')
                                                        [ ('[')
                                                        binary_expression:
                                                          identifier ('i')
                                                          + ('+')
                                                          number ('2')
                                                        ] (']')
                                                      ) (')')
                                                ) (')')
                                              statement_block:
                                                { ('{')
                                                expression_statement:
                                                  call_expression:
                                                    member_expression:
                                                      this ('this')
                                                      . ('.')
                                                      property_identifier ('throwError')
                                                    arguments:
                                                      ( ('(')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('UnexpectedInput')
                                                        " ('"')
                                                      , (',')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('Unexpected input for block input!')
                                                        " ('"')
                                                      , (',')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('BindResourceBlock')
                                                        " ('"')
                                                      , (',')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('Unexpected input in Bind resource block!')
                                                        " ('"')
                                                      , (',')
                                                      identifier ('util')
                                                      ) (')')
                                                  ; (';')
                                                return_statement:
                                                  return ('return')
                                                  binary_expression:
                                                    identifier ('code')
                                                    + ('+')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('Error! - compilation stopped')
                                                      " ('"')
                                                  ; (';')
                                                } ('}')
                                            if_statement:
                                              if ('if')
                                              parenthesized_expression:
                                                ( ('(')
                                                unary_expression:
                                                  ! ('!')
                                                  call_expression:
                                                    member_expression:
                                                      identifier ('Array')
                                                      . ('.')
                                                      property_identifier ('isArray')
                                                    arguments:
                                                      ( ('(')
                                                      subscript_expression:
                                                        identifier ('blocks')
                                                        [ ('[')
                                                        binary_expression:
                                                          identifier ('i')
                                                          + ('+')
                                                          number ('3')
                                                        ] (']')
                                                      ) (')')
                                                ) (')')
                                              statement_block:
                                                { ('{')
                                                lexical_declaration:
                                                  const ('const')
                                                  variable_declarator:
                                                    identifier ('t')
                                                    = ('=')
                                                    call_expression:
                                                      member_expression:
                                                        this ('this')
                                                        . ('.')
                                                        property_identifier ('textFromOp')
                                                      arguments:
                                                        ( ('(')
                                                        identifier ('util')
                                                        , (',')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('3')
                                                          ] (']')
                                                        , (',')
                                                        false ('false')
                                                        ) (')')
                                                  ; (';')
                                                if_statement:
                                                  if ('if')
                                                  parenthesized_expression:
                                                    ( ('(')
                                                    binary_expression:
                                                      identifier ('t')
                                                      == ('==')
                                                      string:
                                                        " ('"')
                                                        " ('"')
                                                    ) (')')
                                                  statement_block:
                                                    { ('{')
                                                    expression_statement:
                                                      assignment_expression:
                                                        identifier ('code')
                                                        = ('=')
                                                        call_expression:
                                                          member_expression:
                                                            identifier ('code')
                                                            . ('.')
                                                            property_identifier ('concat')
                                                          arguments:
                                                            ( ('(')
                                                            template_string:
                                                              ` ('`')
                                                              string_fragment ('@group(0) @binding(')
                                                              template_substitution:
                                                                ${ ('${')
                                                                call_expression:
                                                                  member_expression:
                                                                    this ('this')
                                                                    . ('.')
                                                                    property_identifier ('textFromOp')
                                                                  arguments:
                                                                    ( ('(')
                                                                    identifier ('util')
                                                                    , (',')
                                                                    subscript_expression:
                                                                      identifier ('blocks')
                                                                      [ ('[')
                                                                      binary_expression:
                                                                        identifier ('i')
                                                                        + ('+')
                                                                        number ('1')
                                                                      ] (']')
                                                                    , (',')
                                                                    false ('false')
                                                                    ) (')')
                                                                } ('}')
                                                              string_fragment (') var ')
                                                              template_substitution:
                                                                ${ ('${')
                                                                call_expression:
                                                                  member_expression:
                                                                    this ('this')
                                                                    . ('.')
                                                                    property_identifier ('textFromOp')
                                                                  arguments:
                                                                    ( ('(')
                                                                    identifier ('util')
                                                                    , (',')
                                                                    subscript_expression:
                                                                      identifier ('blocks')
                                                                      [ ('[')
                                                                      binary_expression:
                                                                        identifier ('i')
                                                                        + ('+')
                                                                        number ('2')
                                                                      ] (']')
                                                                    ) (')')
                                                                } ('}')
                                                              string_fragment (': ')
                                                              template_substitution:
                                                                ${ ('${')
                                                                ternary_expression:
                                                                  call_expression:
                                                                    member_expression:
                                                                      identifier ('Array')
                                                                      . ('.')
                                                                      property_identifier ('isArray')
                                                                    arguments:
                                                                      ( ('(')
                                                                      subscript_expression:
                                                                        identifier ('blocks')
                                                                        [ ('[')
                                                                        binary_expression:
                                                                          identifier ('i')
                                                                          + ('+')
                                                                          number ('4')
                                                                        ] (']')
                                                                      ) (')')
                                                                  ? ('?')
                                                                  call_expression:
                                                                    member_expression:
                                                                      this ('this')
                                                                      . ('.')
                                                                      property_identifier ('genWGSL')
                                                                    arguments:
                                                                      ( ('(')
                                                                      identifier ('util')
                                                                      , (',')
                                                                      subscript_expression:
                                                                        identifier ('blocks')
                                                                        [ ('[')
                                                                        binary_expression:
                                                                          identifier ('i')
                                                                          + ('+')
                                                                          number ('4')
                                                                        ] (']')
                                                                      , (',')
                                                                      binary_expression:
                                                                        identifier ('recursionDepth')
                                                                        + ('+')
                                                                        number ('1')
                                                                      ) (')')
                                                                  : (':')
                                                                  call_expression:
                                                                    member_expression:
                                                                      this ('this')
                                                                      . ('.')
                                                                      property_identifier ('textFromOp')
                                                                    arguments:
                                                                      ( ('(')
                                                                      identifier ('util')
                                                                      , (',')
                                                                      subscript_expression:
                                                                        identifier ('blocks')
                                                                        [ ('[')
                                                                        binary_expression:
                                                                          identifier ('i')
                                                                          + ('+')
                                                                          number ('4')
                                                                        ] (']')
                                                                      , (',')
                                                                      false ('false')
                                                                      ) (')')
                                                                } ('}')
                                                              string_fragment (';')
                                                              escape_sequence ('\\n')
                                                              ` ('`')
                                                            ) (')')
                                                      ; (';')
                                                    } ('}')
                                                  else_clause:
                                                    else ('else')
                                                    statement_block:
                                                      { ('{')
                                                      expression_statement:
                                                        assignment_expression:
                                                          identifier ('code')
                                                          = ('=')
                                                          call_expression:
                                                            member_expression:
                                                              identifier ('code')
                                                              . ('.')
                                                              property_identifier ('concat')
                                                            arguments:
                                                              ( ('(')
                                                              template_string:
                                                                ` ('`')
                                                                string_fragment ('@group(0) @binding(')
                                                                template_substitution:
                                                                  ${ ('${')
                                                                  call_expression:
                                                                    member_expression:
                                                                      this ('this')
                                                                      . ('.')
                                                                      property_identifier ('textFromOp')
                                                                    arguments:
                                                                      ( ('(')
                                                                      identifier ('util')
                                                                      , (',')
                                                                      subscript_expression:
                                                                        identifier ('blocks')
                                                                        [ ('[')
                                                                        binary_expression:
                                                                          identifier ('i')
                                                                          + ('+')
                                                                          number ('1')
                                                                        ] (']')
                                                                      , (',')
                                                                      false ('false')
                                                                      ) (')')
                                                                  } ('}')
                                                                string_fragment (') var<')
                                                                template_substitution:
                                                                  ${ ('${')
                                                                  identifier ('t')
                                                                  } ('}')
                                                                string_fragment ('> ')
                                                                template_substitution:
                                                                  ${ ('${')
                                                                  call_expression:
                                                                    member_expression:
                                                                      this ('this')
                                                                      . ('.')
                                                                      property_identifier ('textFromOp')
                                                                    arguments:
                                                                      ( ('(')
                                                                      identifier ('util')
                                                                      , (',')
                                                                      subscript_expression:
                                                                        identifier ('blocks')
                                                                        [ ('[')
                                                                        binary_expression:
                                                                          identifier ('i')
                                                                          + ('+')
                                                                          number ('2')
                                                                        ] (']')
                                                                      ) (')')
                                                                  } ('}')
                                                                string_fragment (': ')
                                                                template_substitution:
                                                                  ${ ('${')
                                                                  ternary_expression:
                                                                    call_expression:
                                                                      member_expression:
                                                                        identifier ('Array')
                                                                        . ('.')
                                                                        property_identifier ('isArray')
                                                                      arguments:
                                                                        ( ('(')
                                                                        subscript_expression:
                                                                          identifier ('blocks')
                                                                          [ ('[')
                                                                          binary_expression:
                                                                            identifier ('i')
                                                                            + ('+')
                                                                            number ('4')
                                                                          ] (']')
                                                                        ) (')')
                                                                    ? ('?')
                                                                    call_expression:
                                                                      member_expression:
                                                                        this ('this')
                                                                        . ('.')
                                                                        property_identifier ('genWGSL')
                                                                      arguments:
                                                                        ( ('(')
                                                                        identifier ('util')
                                                                        , (',')
                                                                        subscript_expression:
                                                                          identifier ('blocks')
                                                                          [ ('[')
                                                                          binary_expression:
                                                                            identifier ('i')
                                                                            + ('+')
                                                                            number ('4')
                                                                          ] (']')
                                                                        , (',')
                                                                        binary_expression:
                                                                          identifier ('recursionDepth')
                                                                          + ('+')
                                                                          number ('1')
                                                                        ) (')')
                                                                    : (':')
                                                                    call_expression:
                                                                      member_expression:
                                                                        this ('this')
                                                                        . ('.')
                                                                        property_identifier ('textFromOp')
                                                                      arguments:
                                                                        ( ('(')
                                                                        identifier ('util')
                                                                        , (',')
                                                                        subscript_expression:
                                                                          identifier ('blocks')
                                                                          [ ('[')
                                                                          binary_expression:
                                                                            identifier ('i')
                                                                            + ('+')
                                                                            number ('4')
                                                                          ] (']')
                                                                        , (',')
                                                                        false ('false')
                                                                        ) (')')
                                                                  } ('}')
                                                                string_fragment (';')
                                                                escape_sequence ('\\n')
                                                                ` ('`')
                                                              ) (')')
                                                        ; (';')
                                                      } ('}')
                                                } ('}')
                                              else_clause:
                                                else ('else')
                                                statement_block:
                                                  { ('{')
                                                  expression_statement:
                                                    assignment_expression:
                                                      identifier ('code')
                                                      = ('=')
                                                      call_expression:
                                                        member_expression:
                                                          identifier ('code')
                                                          . ('.')
                                                          property_identifier ('concat')
                                                        arguments:
                                                          ( ('(')
                                                          template_string:
                                                            ` ('`')
                                                            string_fragment ('@group(0) @binding(')
                                                            template_substitution:
                                                              ${ ('${')
                                                              call_expression:
                                                                member_expression:
                                                                  this ('this')
                                                                  . ('.')
                                                                  property_identifier ('textFromOp')
                                                                arguments:
                                                                  ( ('(')
                                                                  identifier ('util')
                                                                  , (',')
                                                                  subscript_expression:
                                                                    identifier ('blocks')
                                                                    [ ('[')
                                                                    binary_expression:
                                                                      identifier ('i')
                                                                      + ('+')
                                                                      number ('1')
                                                                    ] (']')
                                                                  , (',')
                                                                  false ('false')
                                                                  ) (')')
                                                              } ('}')
                                                            string_fragment (') var<')
                                                            template_substitution:
                                                              ${ ('${')
                                                              call_expression:
                                                                member_expression:
                                                                  this ('this')
                                                                  . ('.')
                                                                  property_identifier ('genWGSL')
                                                                arguments:
                                                                  ( ('(')
                                                                  identifier ('util')
                                                                  , (',')
                                                                  subscript_expression:
                                                                    identifier ('blocks')
                                                                    [ ('[')
                                                                    binary_expression:
                                                                      identifier ('i')
                                                                      + ('+')
                                                                      number ('3')
                                                                    ] (']')
                                                                  , (',')
                                                                  binary_expression:
                                                                    identifier ('recursionDepth')
                                                                    + ('+')
                                                                    number ('1')
                                                                  ) (')')
                                                              } ('}')
                                                            string_fragment ('> ')
                                                            template_substitution:
                                                              ${ ('${')
                                                              call_expression:
                                                                member_expression:
                                                                  this ('this')
                                                                  . ('.')
                                                                  property_identifier ('textFromOp')
                                                                arguments:
                                                                  ( ('(')
                                                                  identifier ('util')
                                                                  , (',')
                                                                  subscript_expression:
                                                                    identifier ('blocks')
                                                                    [ ('[')
                                                                    binary_expression:
                                                                      identifier ('i')
                                                                      + ('+')
                                                                      number ('2')
                                                                    ] (']')
                                                                  ) (')')
                                                              } ('}')
                                                            string_fragment (': ')
                                                            template_substitution:
                                                              ${ ('${')
                                                              ternary_expression:
                                                                call_expression:
                                                                  member_expression:
                                                                    identifier ('Array')
                                                                    . ('.')
                                                                    property_identifier ('isArray')
                                                                  arguments:
                                                                    ( ('(')
                                                                    subscript_expression:
                                                                      identifier ('blocks')
                                                                      [ ('[')
                                                                      binary_expression:
                                                                        identifier ('i')
                                                                        + ('+')
                                                                        number ('4')
                                                                      ] (']')
                                                                    ) (')')
                                                                ? ('?')
                                                                call_expression:
                                                                  member_expression:
                                                                    this ('this')
                                                                    . ('.')
                                                                    property_identifier ('genWGSL')
                                                                  arguments:
                                                                    ( ('(')
                                                                    identifier ('util')
                                                                    , (',')
                                                                    subscript_expression:
                                                                      identifier ('blocks')
                                                                      [ ('[')
                                                                      binary_expression:
                                                                        identifier ('i')
                                                                        + ('+')
                                                                        number ('4')
                                                                      ] (']')
                                                                    , (',')
                                                                    binary_expression:
                                                                      identifier ('recursionDepth')
                                                                      + ('+')
                                                                      number ('1')
                                                                    ) (')')
                                                                : (':')
                                                                call_expression:
                                                                  member_expression:
                                                                    this ('this')
                                                                    . ('.')
                                                                    property_identifier ('textFromOp')
                                                                  arguments:
                                                                    ( ('(')
                                                                    identifier ('util')
                                                                    , (',')
                                                                    subscript_expression:
                                                                      identifier ('blocks')
                                                                      [ ('[')
                                                                      binary_expression:
                                                                        identifier ('i')
                                                                        + ('+')
                                                                        number ('4')
                                                                      ] (']')
                                                                    , (',')
                                                                    false ('false')
                                                                    ) (')')
                                                              } ('}')
                                                            string_fragment (';')
                                                            escape_sequence ('\\n')
                                                            ` ('`')
                                                          ) (')')
                                                    ; (';')
                                                  } ('}')
                                            expression_statement:
                                              augmented_assignment_expression:
                                                identifier ('i')
                                                += ('+=')
                                                number ('4')
                                              ; (';')
                                            break_statement:
                                              break ('break')
                                              ; (';')
                                            } ('}')
                                        switch_case:
                                          case ('case')
                                          string:
                                            " ('"')
                                            string_fragment ('gpusb3_defFunc')
                                            " ('"')
                                          : (':')
                                          statement_block:
                                            { ('{')
                                            if_statement:
                                              if ('if')
                                              parenthesized_expression:
                                                ( ('(')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('Array')
                                                    . ('.')
                                                    property_identifier ('isArray')
                                                  arguments:
                                                    ( ('(')
                                                    subscript_expression:
                                                      identifier ('blocks')
                                                      [ ('[')
                                                      binary_expression:
                                                        identifier ('i')
                                                        + ('+')
                                                        number ('1')
                                                      ] (']')
                                                    ) (')')
                                                ) (')')
                                              statement_block:
                                                { ('{')
                                                expression_statement:
                                                  call_expression:
                                                    member_expression:
                                                      this ('this')
                                                      . ('.')
                                                      property_identifier ('throwError')
                                                    arguments:
                                                      ( ('(')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('UnexpectedInput')
                                                        " ('"')
                                                      , (',')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('Unexpected input for block input!')
                                                        " ('"')
                                                      , (',')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('VarOpBlock')
                                                        " ('"')
                                                      , (',')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('Unexpected input in Function definition block!')
                                                        " ('"')
                                                      , (',')
                                                      identifier ('util')
                                                      ) (')')
                                                  ; (';')
                                                return_statement:
                                                  return ('return')
                                                  binary_expression:
                                                    identifier ('code')
                                                    + ('+')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('Error! - compilation stopped')
                                                      " ('"')
                                                  ; (';')
                                                } ('}')
                                            expression_statement:
                                              assignment_expression:
                                                identifier ('code')
                                                = ('=')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('code')
                                                    . ('.')
                                                    property_identifier ('concat')
                                                  arguments:
                                                    ( ('(')
                                                    template_string:
                                                      ` ('`')
                                                      string_fragment ('fn ')
                                                      template_substitution:
                                                        ${ ('${')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('textFromOp')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('1')
                                                              ] (']')
                                                            , (',')
                                                            false ('false')
                                                            ) (')')
                                                        } ('}')
                                                      string_fragment ('(')
                                                      ` ('`')
                                                    ) (')')
                                              ; (';')
                                            if_statement:
                                              if ('if')
                                              parenthesized_expression:
                                                ( ('(')
                                                binary_expression:
                                                  subscript_expression:
                                                    identifier ('blocks')
                                                    [ ('[')
                                                    binary_expression:
                                                      identifier ('i')
                                                      + ('+')
                                                      number ('3')
                                                    ] (']')
                                                  !== ('!==')
                                                  null ('null')
                                                ) (')')
                                              statement_block:
                                                { ('{')
                                                if_statement:
                                                  if ('if')
                                                  parenthesized_expression:
                                                    ( ('(')
                                                    call_expression:
                                                      member_expression:
                                                        identifier ('Array')
                                                        . ('.')
                                                        property_identifier ('isArray')
                                                      arguments:
                                                        ( ('(')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('3')
                                                          ] (']')
                                                        ) (')')
                                                    ) (')')
                                                  statement_block:
                                                    { ('{')
                                                    expression_statement:
                                                      assignment_expression:
                                                        identifier ('code')
                                                        = ('=')
                                                        call_expression:
                                                          member_expression:
                                                            identifier ('code')
                                                            . ('.')
                                                            property_identifier ('concat')
                                                          arguments:
                                                            ( ('(')
                                                            call_expression:
                                                              member_expression:
                                                                this ('this')
                                                                . ('.')
                                                                property_identifier ('genWGSL')
                                                              arguments:
                                                                ( ('(')
                                                                identifier ('util')
                                                                , (',')
                                                                subscript_expression:
                                                                  identifier ('blocks')
                                                                  [ ('[')
                                                                  binary_expression:
                                                                    identifier ('i')
                                                                    + ('+')
                                                                    number ('3')
                                                                  ] (']')
                                                                , (',')
                                                                binary_expression:
                                                                  identifier ('recursionDepth')
                                                                  + ('+')
                                                                  number ('1')
                                                                ) (')')
                                                            ) (')')
                                                      ; (';')
                                                    } ('}')
                                                  else_clause:
                                                    else ('else')
                                                    statement_block:
                                                      { ('{')
                                                      expression_statement:
                                                        assignment_expression:
                                                          identifier ('code')
                                                          = ('=')
                                                          call_expression:
                                                            member_expression:
                                                              identifier ('code')
                                                              . ('.')
                                                              property_identifier ('concat')
                                                            arguments:
                                                              ( ('(')
                                                              call_expression:
                                                                member_expression:
                                                                  this ('this')
                                                                  . ('.')
                                                                  property_identifier ('textFromOp')
                                                                arguments:
                                                                  ( ('(')
                                                                  identifier ('util')
                                                                  , (',')
                                                                  subscript_expression:
                                                                    identifier ('blocks')
                                                                    [ ('[')
                                                                    binary_expression:
                                                                      identifier ('i')
                                                                      + ('+')
                                                                      number ('3')
                                                                    ] (']')
                                                                  , (',')
                                                                  false ('false')
                                                                  ) (')')
                                                              ) (')')
                                                        ; (';')
                                                      } ('}')
                                                } ('}')
                                            if_statement:
                                              if ('if')
                                              parenthesized_expression:
                                                ( ('(')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('Array')
                                                    . ('.')
                                                    property_identifier ('isArray')
                                                  arguments:
                                                    ( ('(')
                                                    subscript_expression:
                                                      identifier ('blocks')
                                                      [ ('[')
                                                      binary_expression:
                                                        identifier ('i')
                                                        + ('+')
                                                        number ('2')
                                                      ] (']')
                                                    ) (')')
                                                ) (')')
                                              statement_block:
                                                { ('{')
                                                expression_statement:
                                                  assignment_expression:
                                                    identifier ('code')
                                                    = ('=')
                                                    call_expression:
                                                      member_expression:
                                                        identifier ('code')
                                                        . ('.')
                                                        property_identifier ('concat')
                                                      arguments:
                                                        ( ('(')
                                                        template_string:
                                                          ` ('`')
                                                          string_fragment (') -> ')
                                                          template_substitution:
                                                            ${ ('${')
                                                            call_expression:
                                                              member_expression:
                                                                this ('this')
                                                                . ('.')
                                                                property_identifier ('genWGSL')
                                                              arguments:
                                                                ( ('(')
                                                                identifier ('util')
                                                                , (',')
                                                                subscript_expression:
                                                                  identifier ('blocks')
                                                                  [ ('[')
                                                                  binary_expression:
                                                                    identifier ('i')
                                                                    + ('+')
                                                                    number ('2')
                                                                  ] (']')
                                                                , (',')
                                                                binary_expression:
                                                                  identifier ('recursionDepth')
                                                                  + ('+')
                                                                  number ('1')
                                                                ) (')')
                                                            } ('}')
                                                          ` ('`')
                                                        ) (')')
                                                  ; (';')
                                                } ('}')
                                              else_clause:
                                                else ('else')
                                                statement_block:
                                                  { ('{')
                                                  expression_statement:
                                                    assignment_expression:
                                                      identifier ('code')
                                                      = ('=')
                                                      call_expression:
                                                        member_expression:
                                                          identifier ('code')
                                                          . ('.')
                                                          property_identifier ('concat')
                                                        arguments:
                                                          ( ('(')
                                                          ternary_expression:
                                                            binary_expression:
                                                              call_expression:
                                                                member_expression:
                                                                  this ('this')
                                                                  . ('.')
                                                                  property_identifier ('textFromOp')
                                                                arguments:
                                                                  ( ('(')
                                                                  identifier ('util')
                                                                  , (',')
                                                                  subscript_expression:
                                                                    identifier ('blocks')
                                                                    [ ('[')
                                                                    binary_expression:
                                                                      identifier ('i')
                                                                      + ('+')
                                                                      number ('2')
                                                                    ] (']')
                                                                  , (',')
                                                                  false ('false')
                                                                  ) (')')
                                                              === ('===')
                                                              string:
                                                                " ('"')
                                                                string_fragment ('void')
                                                                " ('"')
                                                            ? ('?')
                                                            string:
                                                              " ('"')
                                                              string_fragment (') {')
                                                              escape_sequence ('\\n')
                                                              " ('"')
                                                            : (':')
                                                            template_string:
                                                              ` ('`')
                                                              string_fragment (') -> ')
                                                              template_substitution:
                                                                ${ ('${')
                                                                call_expression:
                                                                  member_expression:
                                                                    this ('this')
                                                                    . ('.')
                                                                    property_identifier ('textFromOp')
                                                                  arguments:
                                                                    ( ('(')
                                                                    identifier ('util')
                                                                    , (',')
                                                                    subscript_expression:
                                                                      identifier ('blocks')
                                                                      [ ('[')
                                                                      binary_expression:
                                                                        identifier ('i')
                                                                        + ('+')
                                                                        number ('2')
                                                                      ] (']')
                                                                    , (',')
                                                                    false ('false')
                                                                    ) (')')
                                                                } ('}')
                                                              string_fragment (' {')
                                                              escape_sequence ('\\n')
                                                              ` ('`')
                                                          ) (')')
                                                    ; (';')
                                                  } ('}')
                                            if_statement:
                                              if ('if')
                                              parenthesized_expression:
                                                ( ('(')
                                                binary_expression:
                                                  member_expression:
                                                    subscript_expression:
                                                      identifier ('blocks')
                                                      [ ('[')
                                                      binary_expression:
                                                        identifier ('i')
                                                        + ('+')
                                                        number ('4')
                                                      ] (']')
                                                    . ('.')
                                                    property_identifier ('length')
                                                  > ('>')
                                                  number ('0')
                                                ) (')')
                                              statement_block:
                                                { ('{')
                                                expression_statement:
                                                  assignment_expression:
                                                    identifier ('code')
                                                    = ('=')
                                                    call_expression:
                                                      member_expression:
                                                        identifier ('code')
                                                        . ('.')
                                                        property_identifier ('concat')
                                                      arguments:
                                                        ( ('(')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('genWGSL')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('4')
                                                              ] (']')
                                                            , (',')
                                                            binary_expression:
                                                              identifier ('recursionDepth')
                                                              + ('+')
                                                              number ('1')
                                                            ) (')')
                                                        ) (')')
                                                  ; (';')
                                                } ('}')
                                              else_clause:
                                                else ('else')
                                                statement_block:
                                                  { ('{')
                                                  expression_statement:
                                                    assignment_expression:
                                                      identifier ('code')
                                                      = ('=')
                                                      call_expression:
                                                        member_expression:
                                                          identifier ('code')
                                                          . ('.')
                                                          property_identifier ('concat')
                                                        arguments:
                                                          ( ('(')
                                                          template_string:
                                                            ` ('`')
                                                            string_fragment ('return ')
                                                            template_substitution:
                                                              ${ ('${')
                                                              ternary_expression:
                                                                binary_expression:
                                                                  call_expression:
                                                                    member_expression:
                                                                      this ('this')
                                                                      . ('.')
                                                                      property_identifier ('textFromOp')
                                                                    arguments:
                                                                      ( ('(')
                                                                      identifier ('util')
                                                                      , (',')
                                                                      subscript_expression:
                                                                        identifier ('blocks')
                                                                        [ ('[')
                                                                        binary_expression:
                                                                          identifier ('i')
                                                                          + ('+')
                                                                          number ('2')
                                                                        ] (']')
                                                                      , (',')
                                                                      false ('false')
                                                                      ) (')')
                                                                  === ('===')
                                                                  string:
                                                                    " ('"')
                                                                    string_fragment ('void')
                                                                    " ('"')
                                                                ? ('?')
                                                                string:
                                                                  " ('"')
                                                                  " ('"')
                                                                : (':')
                                                                ternary_expression:
                                                                  call_expression:
                                                                    member_expression:
                                                                      identifier ('Array')
                                                                      . ('.')
                                                                      property_identifier ('isArray')
                                                                    arguments:
                                                                      ( ('(')
                                                                      subscript_expression:
                                                                        identifier ('blocks')
                                                                        [ ('[')
                                                                        binary_expression:
                                                                          identifier ('i')
                                                                          + ('+')
                                                                          number ('2')
                                                                        ] (']')
                                                                      ) (')')
                                                                  ? ('?')
                                                                  call_expression:
                                                                    member_expression:
                                                                      this ('this')
                                                                      . ('.')
                                                                      property_identifier ('genWGSL')
                                                                    arguments:
                                                                      ( ('(')
                                                                      identifier ('util')
                                                                      , (',')
                                                                      subscript_expression:
                                                                        identifier ('blocks')
                                                                        [ ('[')
                                                                        binary_expression:
                                                                          identifier ('i')
                                                                          + ('+')
                                                                          number ('2')
                                                                        ] (']')
                                                                      , (',')
                                                                      binary_expression:
                                                                        identifier ('recursionDepth')
                                                                        + ('+')
                                                                        number ('1')
                                                                      ) (')')
                                                                  : (':')
                                                                  call_expression:
                                                                    member_expression:
                                                                      this ('this')
                                                                      . ('.')
                                                                      property_identifier ('textFromOp')
                                                                    arguments:
                                                                      ( ('(')
                                                                      identifier ('util')
                                                                      , (',')
                                                                      subscript_expression:
                                                                        identifier ('blocks')
                                                                        [ ('[')
                                                                        binary_expression:
                                                                          identifier ('i')
                                                                          + ('+')
                                                                          number ('2')
                                                                        ] (']')
                                                                      , (',')
                                                                      false ('false')
                                                                      ) (')')
                                                              } ('}')
                                                            string_fragment ('();')
                                                            escape_sequence ('\\n')
                                                            ` ('`')
                                                          ) (')')
                                                    ; (';')
                                                  comment ('// return a constructor for whatever type it should return')
                                                  } ('}')
                                            expression_statement:
                                              assignment_expression:
                                                identifier ('code')
                                                = ('=')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('code')
                                                    . ('.')
                                                    property_identifier ('concat')
                                                  arguments:
                                                    ( ('(')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('}')
                                                      escape_sequence ('\\n')
                                                      " ('"')
                                                    ) (')')
                                              ; (';')
                                            comment ('// newlines for some semblance of readability')
                                            expression_statement:
                                              augmented_assignment_expression:
                                                identifier ('i')
                                                += ('+=')
                                                number ('4')
                                              ; (';')
                                            break_statement:
                                              break ('break')
                                              ; (';')
                                            } ('}')
                                        switch_case:
                                          case ('case')
                                          string:
                                            " ('"')
                                            string_fragment ('gpusb3_funcReturn')
                                            " ('"')
                                          : (':')
                                          statement_block:
                                            { ('{')
                                            expression_statement:
                                              assignment_expression:
                                                identifier ('code')
                                                = ('=')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('code')
                                                    . ('.')
                                                    property_identifier ('concat')
                                                  arguments:
                                                    ( ('(')
                                                    template_string:
                                                      ` ('`')
                                                      string_fragment ('return')
                                                      ` ('`')
                                                    ) (')')
                                              ; (';')
                                            if_statement:
                                              if ('if')
                                              parenthesized_expression:
                                                ( ('(')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('Array')
                                                    . ('.')
                                                    property_identifier ('isArray')
                                                  arguments:
                                                    ( ('(')
                                                    subscript_expression:
                                                      identifier ('blocks')
                                                      [ ('[')
                                                      binary_expression:
                                                        identifier ('i')
                                                        + ('+')
                                                        number ('1')
                                                      ] (']')
                                                    ) (')')
                                                ) (')')
                                              statement_block:
                                                { ('{')
                                                expression_statement:
                                                  assignment_expression:
                                                    identifier ('code')
                                                    = ('=')
                                                    call_expression:
                                                      member_expression:
                                                        identifier ('code')
                                                        . ('.')
                                                        property_identifier ('concat')
                                                      arguments:
                                                        ( ('(')
                                                        string:
                                                          " ('"')
                                                          string_fragment (' ')
                                                          " ('"')
                                                        ) (')')
                                                  ; (';')
                                                expression_statement:
                                                  assignment_expression:
                                                    identifier ('code')
                                                    = ('=')
                                                    call_expression:
                                                      member_expression:
                                                        identifier ('code')
                                                        . ('.')
                                                        property_identifier ('concat')
                                                      arguments:
                                                        ( ('(')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('genWGSL')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('1')
                                                              ] (']')
                                                            , (',')
                                                            binary_expression:
                                                              identifier ('recursionDepth')
                                                              + ('+')
                                                              number ('1')
                                                            ) (')')
                                                        ) (')')
                                                  ; (';')
                                                } ('}')
                                              else_clause:
                                                else ('else')
                                                if_statement:
                                                  if ('if')
                                                  parenthesized_expression:
                                                    ( ('(')
                                                    binary_expression:
                                                      call_expression:
                                                        member_expression:
                                                          this ('this')
                                                          . ('.')
                                                          property_identifier ('textFromOp')
                                                        arguments:
                                                          ( ('(')
                                                          identifier ('util')
                                                          , (',')
                                                          subscript_expression:
                                                            identifier ('blocks')
                                                            [ ('[')
                                                            binary_expression:
                                                              identifier ('i')
                                                              + ('+')
                                                              number ('1')
                                                            ] (']')
                                                          , (',')
                                                          false ('false')
                                                          ) (')')
                                                      !== ('!==')
                                                      string:
                                                        " ('"')
                                                        " ('"')
                                                    ) (')')
                                                  statement_block:
                                                    { ('{')
                                                    expression_statement:
                                                      assignment_expression:
                                                        identifier ('code')
                                                        = ('=')
                                                        call_expression:
                                                          member_expression:
                                                            identifier ('code')
                                                            . ('.')
                                                            property_identifier ('concat')
                                                          arguments:
                                                            ( ('(')
                                                            string:
                                                              " ('"')
                                                              string_fragment (' ')
                                                              " ('"')
                                                            ) (')')
                                                      ; (';')
                                                    expression_statement:
                                                      assignment_expression:
                                                        identifier ('code')
                                                        = ('=')
                                                        call_expression:
                                                          member_expression:
                                                            identifier ('code')
                                                            . ('.')
                                                            property_identifier ('concat')
                                                          arguments:
                                                            ( ('(')
                                                            call_expression:
                                                              member_expression:
                                                                this ('this')
                                                                . ('.')
                                                                property_identifier ('textFromOp')
                                                              arguments:
                                                                ( ('(')
                                                                identifier ('util')
                                                                , (',')
                                                                subscript_expression:
                                                                  identifier ('blocks')
                                                                  [ ('[')
                                                                  binary_expression:
                                                                    identifier ('i')
                                                                    + ('+')
                                                                    number ('1')
                                                                  ] (']')
                                                                , (',')
                                                                false ('false')
                                                                ) (')')
                                                            ) (')')
                                                      ; (';')
                                                    } ('}')
                                            expression_statement:
                                              assignment_expression:
                                                identifier ('code')
                                                = ('=')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('code')
                                                    . ('.')
                                                    property_identifier ('concat')
                                                  arguments:
                                                    ( ('(')
                                                    string:
                                                      " ('"')
                                                      string_fragment (';')
                                                      escape_sequence ('\\n')
                                                      " ('"')
                                                    ) (')')
                                              ; (';')
                                            expression_statement:
                                              augmented_assignment_expression:
                                                identifier ('i')
                                                += ('+=')
                                                number ('1')
                                              ; (';')
                                            break_statement:
                                              break ('break')
                                              ; (';')
                                            } ('}')
                                        switch_case:
                                          case ('case')
                                          string:
                                            " ('"')
                                            string_fragment ('gpusb3_c_runFunc')
                                            " ('"')
                                          : (':')
                                          statement_block:
                                            { ('{')
                                            if_statement:
                                              if ('if')
                                              parenthesized_expression:
                                                ( ('(')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('Array')
                                                    . ('.')
                                                    property_identifier ('isArray')
                                                  arguments:
                                                    ( ('(')
                                                    subscript_expression:
                                                      identifier ('blocks')
                                                      [ ('[')
                                                      binary_expression:
                                                        identifier ('i')
                                                        + ('+')
                                                        number ('1')
                                                      ] (']')
                                                    ) (')')
                                                ) (')')
                                              statement_block:
                                                { ('{')
                                                expression_statement:
                                                  call_expression:
                                                    member_expression:
                                                      this ('this')
                                                      . ('.')
                                                      property_identifier ('throwError')
                                                    arguments:
                                                      ( ('(')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('UnexpectedInput')
                                                        " ('"')
                                                      , (',')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('Unexpected input for block input!')
                                                        " ('"')
                                                      , (',')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('RunFuncBlock')
                                                        " ('"')
                                                      , (',')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('Unexpected input in Run function block!')
                                                        " ('"')
                                                      , (',')
                                                      identifier ('util')
                                                      ) (')')
                                                  ; (';')
                                                return_statement:
                                                  return ('return')
                                                  binary_expression:
                                                    identifier ('code')
                                                    + ('+')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('Error! - compilation stopped')
                                                      " ('"')
                                                  ; (';')
                                                } ('}')
                                            expression_statement:
                                              assignment_expression:
                                                identifier ('code')
                                                = ('=')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('code')
                                                    . ('.')
                                                    property_identifier ('concat')
                                                  arguments:
                                                    ( ('(')
                                                    call_expression:
                                                      member_expression:
                                                        this ('this')
                                                        . ('.')
                                                        property_identifier ('textFromOp')
                                                      arguments:
                                                        ( ('(')
                                                        identifier ('util')
                                                        , (',')
                                                        subscript_expression:
                                                          identifier ('blocks')
                                                          [ ('[')
                                                          binary_expression:
                                                            identifier ('i')
                                                            + ('+')
                                                            number ('1')
                                                          ] (']')
                                                        , (',')
                                                        false ('false')
                                                        ) (')')
                                                    ) (')')
                                              ; (';')
                                            expression_statement:
                                              assignment_expression:
                                                identifier ('code')
                                                = ('=')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('code')
                                                    . ('.')
                                                    property_identifier ('concat')
                                                  arguments:
                                                    ( ('(')
                                                    template_string:
                                                      ` ('`')
                                                      string_fragment ('(')
                                                      template_substitution:
                                                        ${ ('${')
                                                        ternary_expression:
                                                          call_expression:
                                                            member_expression:
                                                              identifier ('Array')
                                                              . ('.')
                                                              property_identifier ('isArray')
                                                            arguments:
                                                              ( ('(')
                                                              subscript_expression:
                                                                identifier ('blocks')
                                                                [ ('[')
                                                                binary_expression:
                                                                  identifier ('i')
                                                                  + ('+')
                                                                  number ('2')
                                                                ] (']')
                                                              ) (')')
                                                          ? ('?')
                                                          call_expression:
                                                            member_expression:
                                                              this ('this')
                                                              . ('.')
                                                              property_identifier ('genWGSL')
                                                            arguments:
                                                              ( ('(')
                                                              identifier ('util')
                                                              , (',')
                                                              subscript_expression:
                                                                identifier ('blocks')
                                                                [ ('[')
                                                                binary_expression:
                                                                  identifier ('i')
                                                                  + ('+')
                                                                  number ('2')
                                                                ] (']')
                                                              , (',')
                                                              binary_expression:
                                                                identifier ('recursionDepth')
                                                                + ('+')
                                                                number ('1')
                                                              ) (')')
                                                          : (':')
                                                          call_expression:
                                                            member_expression:
                                                              this ('this')
                                                              . ('.')
                                                              property_identifier ('textFromOp')
                                                            arguments:
                                                              ( ('(')
                                                              identifier ('util')
                                                              , (',')
                                                              subscript_expression:
                                                                identifier ('blocks')
                                                                [ ('[')
                                                                binary_expression:
                                                                  identifier ('i')
                                                                  + ('+')
                                                                  number ('2')
                                                                ] (']')
                                                              , (',')
                                                              false ('false')
                                                              ) (')')
                                                        } ('}')
                                                      string_fragment (');')
                                                      escape_sequence ('\\n')
                                                      ` ('`')
                                                    ) (')')
                                              ; (';')
                                            expression_statement:
                                              augmented_assignment_expression:
                                                identifier ('i')
                                                += ('+=')
                                                number ('2')
                                              ; (';')
                                            break_statement:
                                              break ('break')
                                              ; (';')
                                            } ('}')
                                        switch_case:
                                          case ('case')
                                          string:
                                            " ('"')
                                            string_fragment ('gpusb3_c_arbitraryWGSL')
                                            " ('"')
                                          : (':')
                                          statement_block:
                                            { ('{')
                                            expression_statement:
                                              assignment_expression:
                                                identifier ('code')
                                                = ('=')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('code')
                                                    . ('.')
                                                    property_identifier ('concat')
                                                  arguments:
                                                    ( ('(')
                                                    ternary_expression:
                                                      call_expression:
                                                        member_expression:
                                                          identifier ('Array')
                                                          . ('.')
                                                          property_identifier ('isArray')
                                                        arguments:
                                                          ( ('(')
                                                          subscript_expression:
                                                            identifier ('blocks')
                                                            [ ('[')
                                                            binary_expression:
                                                              identifier ('i')
                                                              + ('+')
                                                              number ('1')
                                                            ] (']')
                                                          ) (')')
                                                      ? ('?')
                                                      call_expression:
                                                        member_expression:
                                                          this ('this')
                                                          . ('.')
                                                          property_identifier ('genWGSL')
                                                        arguments:
                                                          ( ('(')
                                                          identifier ('util')
                                                          , (',')
                                                          subscript_expression:
                                                            identifier ('blocks')
                                                            [ ('[')
                                                            binary_expression:
                                                              identifier ('i')
                                                              + ('+')
                                                              number ('1')
                                                            ] (']')
                                                          , (',')
                                                          binary_expression:
                                                            identifier ('recursionDepth')
                                                            + ('+')
                                                            number ('1')
                                                          ) (')')
                                                      : (':')
                                                      call_expression:
                                                        member_expression:
                                                          this ('this')
                                                          . ('.')
                                                          property_identifier ('textFromOp')
                                                        arguments:
                                                          ( ('(')
                                                          identifier ('util')
                                                          , (',')
                                                          subscript_expression:
                                                            identifier ('blocks')
                                                            [ ('[')
                                                            binary_expression:
                                                              identifier ('i')
                                                              + ('+')
                                                              number ('1')
                                                            ] (']')
                                                          , (',')
                                                          false ('false')
                                                          ) (')')
                                                    ) (')')
                                              ; (';')
                                            expression_statement:
                                              augmented_assignment_expression:
                                                identifier ('i')
                                                += ('+=')
                                                number ('1')
                                              ; (';')
                                            break_statement:
                                              break ('break')
                                              ; (';')
                                            } ('}')
                                        switch_case:
                                          case ('case')
                                          string:
                                            " ('"')
                                            string_fragment ('gpusb3_r_arbitraryWGSL')
                                            " ('"')
                                          : (':')
                                          statement_block:
                                            { ('{')
                                            expression_statement:
                                              assignment_expression:
                                                identifier ('code')
                                                = ('=')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('code')
                                                    . ('.')
                                                    property_identifier ('concat')
                                                  arguments:
                                                    ( ('(')
                                                    ternary_expression:
                                                      call_expression:
                                                        member_expression:
                                                          identifier ('Array')
                                                          . ('.')
                                                          property_identifier ('isArray')
                                                        arguments:
                                                          ( ('(')
                                                          subscript_expression:
                                                            identifier ('blocks')
                                                            [ ('[')
                                                            binary_expression:
                                                              identifier ('i')
                                                              + ('+')
                                                              number ('1')
                                                            ] (']')
                                                          ) (')')
                                                      ? ('?')
                                                      call_expression:
                                                        member_expression:
                                                          this ('this')
                                                          . ('.')
                                                          property_identifier ('genWGSL')
                                                        arguments:
                                                          ( ('(')
                                                          identifier ('util')
                                                          , (',')
                                                          subscript_expression:
                                                            identifier ('blocks')
                                                            [ ('[')
                                                            binary_expression:
                                                              identifier ('i')
                                                              + ('+')
                                                              number ('1')
                                                            ] (']')
                                                          , (',')
                                                          binary_expression:
                                                            identifier ('recursionDepth')
                                                            + ('+')
                                                            number ('1')
                                                          ) (')')
                                                      : (':')
                                                      call_expression:
                                                        member_expression:
                                                          this ('this')
                                                          . ('.')
                                                          property_identifier ('textFromOp')
                                                        arguments:
                                                          ( ('(')
                                                          identifier ('util')
                                                          , (',')
                                                          subscript_expression:
                                                            identifier ('blocks')
                                                            [ ('[')
                                                            binary_expression:
                                                              identifier ('i')
                                                              + ('+')
                                                              number ('1')
                                                            ] (']')
                                                          , (',')
                                                          false ('false')
                                                          ) (')')
                                                    ) (')')
                                              ; (';')
                                            expression_statement:
                                              augmented_assignment_expression:
                                                identifier ('i')
                                                += ('+=')
                                                number ('1')
                                              ; (';')
                                            break_statement:
                                              break ('break')
                                              ; (';')
                                            } ('}')
                                        switch_case:
                                          case ('case')
                                          string:
                                            " ('"')
                                            string_fragment ('gpusb3_c_atomicFunc')
                                            " ('"')
                                          : (':')
                                          statement_block:
                                            { ('{')
                                            if_statement:
                                              if ('if')
                                              parenthesized_expression:
                                                ( ('(')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('Array')
                                                    . ('.')
                                                    property_identifier ('isArray')
                                                  arguments:
                                                    ( ('(')
                                                    subscript_expression:
                                                      identifier ('blocks')
                                                      [ ('[')
                                                      binary_expression:
                                                        identifier ('i')
                                                        + ('+')
                                                        number ('1')
                                                      ] (']')
                                                    ) (')')
                                                ) (')')
                                              statement_block:
                                                { ('{')
                                                expression_statement:
                                                  call_expression:
                                                    member_expression:
                                                      this ('this')
                                                      . ('.')
                                                      property_identifier ('throwError')
                                                    arguments:
                                                      ( ('(')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('UnexpectedInput')
                                                        " ('"')
                                                      , (',')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('Unexpected input in block input!')
                                                        " ('"')
                                                      , (',')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('AtomicFunctionBlock')
                                                        " ('"')
                                                      , (',')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('Unexpected input in Variable block!')
                                                        " ('"')
                                                      , (',')
                                                      identifier ('util')
                                                      ) (')')
                                                  ; (';')
                                                return_statement:
                                                  return ('return')
                                                  string:
                                                    " ('"')
                                                    string_fragment ('Unexpected input in atomic function!')
                                                    " ('"')
                                                  ; (';')
                                                } ('}')
                                            expression_statement:
                                              assignment_expression:
                                                identifier ('code')
                                                = ('=')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('code')
                                                    . ('.')
                                                    property_identifier ('concat')
                                                  arguments:
                                                    ( ('(')
                                                    template_string:
                                                      ` ('`')
                                                      template_substitution:
                                                        ${ ('${')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('textFromOp')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('1')
                                                              ] (']')
                                                            , (',')
                                                            false ('false')
                                                            ) (')')
                                                        } ('}')
                                                      string_fragment ('(')
                                                      template_substitution:
                                                        ${ ('${')
                                                        ternary_expression:
                                                          call_expression:
                                                            member_expression:
                                                              identifier ('Array')
                                                              . ('.')
                                                              property_identifier ('isArray')
                                                            arguments:
                                                              ( ('(')
                                                              subscript_expression:
                                                                identifier ('blocks')
                                                                [ ('[')
                                                                binary_expression:
                                                                  identifier ('i')
                                                                  + ('+')
                                                                  number ('2')
                                                                ] (']')
                                                              ) (')')
                                                          ? ('?')
                                                          call_expression:
                                                            member_expression:
                                                              this ('this')
                                                              . ('.')
                                                              property_identifier ('genWGSL')
                                                            arguments:
                                                              ( ('(')
                                                              identifier ('util')
                                                              , (',')
                                                              subscript_expression:
                                                                identifier ('blocks')
                                                                [ ('[')
                                                                binary_expression:
                                                                  identifier ('i')
                                                                  + ('+')
                                                                  number ('2')
                                                                ] (']')
                                                              ) (')')
                                                          : (':')
                                                          call_expression:
                                                            member_expression:
                                                              this ('this')
                                                              . ('.')
                                                              property_identifier ('textFromOp')
                                                            arguments:
                                                              ( ('(')
                                                              identifier ('util')
                                                              , (',')
                                                              subscript_expression:
                                                                identifier ('blocks')
                                                                [ ('[')
                                                                binary_expression:
                                                                  identifier ('i')
                                                                  + ('+')
                                                                  number ('2')
                                                                ] (']')
                                                              , (',')
                                                              false ('false')
                                                              ) (')')
                                                        } ('}')
                                                      string_fragment (', ')
                                                      template_substitution:
                                                        ${ ('${')
                                                        ternary_expression:
                                                          call_expression:
                                                            member_expression:
                                                              identifier ('Array')
                                                              . ('.')
                                                              property_identifier ('isArray')
                                                            arguments:
                                                              ( ('(')
                                                              subscript_expression:
                                                                identifier ('blocks')
                                                                [ ('[')
                                                                binary_expression:
                                                                  identifier ('i')
                                                                  + ('+')
                                                                  number ('3')
                                                                ] (']')
                                                              ) (')')
                                                          ? ('?')
                                                          call_expression:
                                                            member_expression:
                                                              this ('this')
                                                              . ('.')
                                                              property_identifier ('genWGSL')
                                                            arguments:
                                                              ( ('(')
                                                              identifier ('util')
                                                              , (',')
                                                              subscript_expression:
                                                                identifier ('blocks')
                                                                [ ('[')
                                                                binary_expression:
                                                                  identifier ('i')
                                                                  + ('+')
                                                                  number ('3')
                                                                ] (']')
                                                              ) (')')
                                                          : (':')
                                                          call_expression:
                                                            member_expression:
                                                              this ('this')
                                                              . ('.')
                                                              property_identifier ('textFromOp')
                                                            arguments:
                                                              ( ('(')
                                                              identifier ('util')
                                                              , (',')
                                                              subscript_expression:
                                                                identifier ('blocks')
                                                                [ ('[')
                                                                binary_expression:
                                                                  identifier ('i')
                                                                  + ('+')
                                                                  number ('3')
                                                                ] (']')
                                                              , (',')
                                                              false ('false')
                                                              ) (')')
                                                        } ('}')
                                                      string_fragment (' );')
                                                      escape_sequence ('\\n')
                                                      ` ('`')
                                                    ) (')')
                                              ; (';')
                                            expression_statement:
                                              augmented_assignment_expression:
                                                identifier ('i')
                                                += ('+=')
                                                number ('3')
                                              ; (';')
                                            break_statement:
                                              break ('break')
                                              ; (';')
                                            } ('}')
                                        switch_case:
                                          case ('case')
                                          string:
                                            " ('"')
                                            string_fragment ('gpusb3_barrier')
                                            " ('"')
                                          : (':')
                                          statement_block:
                                            { ('{')
                                            if_statement:
                                              if ('if')
                                              parenthesized_expression:
                                                ( ('(')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('Array')
                                                    . ('.')
                                                    property_identifier ('isArray')
                                                  arguments:
                                                    ( ('(')
                                                    subscript_expression:
                                                      identifier ('blocks')
                                                      [ ('[')
                                                      binary_expression:
                                                        identifier ('i')
                                                        + ('+')
                                                        number ('1')
                                                      ] (']')
                                                    ) (')')
                                                ) (')')
                                              statement_block:
                                                { ('{')
                                                comment ('// barrier block minecraft??????')
                                                expression_statement:
                                                  call_expression:
                                                    member_expression:
                                                      this ('this')
                                                      . ('.')
                                                      property_identifier ('throwError')
                                                    arguments:
                                                      ( ('(')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('UnexpectedInput')
                                                        " ('"')
                                                      , (',')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('Unexpected input in block input!')
                                                        " ('"')
                                                      , (',')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('BarrierBlock')
                                                        " ('"')
                                                      , (',')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('Unexpected input in Barrier block!')
                                                        " ('"')
                                                      , (',')
                                                      identifier ('util')
                                                      ) (')')
                                                  ; (';')
                                                return_statement:
                                                  return ('return')
                                                  string:
                                                    " ('"')
                                                    string_fragment ('Unexpected input in barrier!')
                                                    " ('"')
                                                  ; (';')
                                                } ('}')
                                            expression_statement:
                                              assignment_expression:
                                                identifier ('code')
                                                = ('=')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('code')
                                                    . ('.')
                                                    property_identifier ('concat')
                                                  arguments:
                                                    ( ('(')
                                                    binary_expression:
                                                      call_expression:
                                                        member_expression:
                                                          this ('this')
                                                          . ('.')
                                                          property_identifier ('textFromOp')
                                                        arguments:
                                                          ( ('(')
                                                          identifier ('util')
                                                          , (',')
                                                          subscript_expression:
                                                            identifier ('blocks')
                                                            [ ('[')
                                                            binary_expression:
                                                              identifier ('i')
                                                              + ('+')
                                                              number ('1')
                                                            ] (']')
                                                          , (',')
                                                          false ('false')
                                                          ) (')')
                                                      + ('+')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('();')
                                                        escape_sequence ('\\n')
                                                        " ('"')
                                                    ) (')')
                                              ; (';')
                                            expression_statement:
                                              augmented_assignment_expression:
                                                identifier ('i')
                                                += ('+=')
                                                number ('1')
                                              ; (';')
                                            break_statement:
                                              break ('break')
                                              ; (';')
                                            } ('}')
                                        switch_case:
                                          case ('case')
                                          string:
                                            " ('"')
                                            string_fragment ('gpusb3_declareStruct')
                                            " ('"')
                                          : (':')
                                          statement_block:
                                            { ('{')
                                            if_statement:
                                              if ('if')
                                              parenthesized_expression:
                                                ( ('(')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('Array')
                                                    . ('.')
                                                    property_identifier ('isArray')
                                                  arguments:
                                                    ( ('(')
                                                    subscript_expression:
                                                      identifier ('blocks')
                                                      [ ('[')
                                                      binary_expression:
                                                        identifier ('i')
                                                        + ('+')
                                                        number ('1')
                                                      ] (']')
                                                    ) (')')
                                                ) (')')
                                              statement_block:
                                                { ('{')
                                                expression_statement:
                                                  call_expression:
                                                    member_expression:
                                                      this ('this')
                                                      . ('.')
                                                      property_identifier ('throwError')
                                                    arguments:
                                                      ( ('(')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('UnexpectedInput')
                                                        " ('"')
                                                      , (',')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('Unexpected input in block input!')
                                                        " ('"')
                                                      , (',')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('DeclareStructBlock')
                                                        " ('"')
                                                      , (',')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('Unexpected input in struct declaration block!')
                                                        " ('"')
                                                      , (',')
                                                      identifier ('util')
                                                      ) (')')
                                                  ; (';')
                                                return_statement:
                                                  return ('return')
                                                  string:
                                                    " ('"')
                                                    string_fragment ('Unexpected input in struct declaration')
                                                    " ('"')
                                                  ; (';')
                                                } ('}')
                                            expression_statement:
                                              assignment_expression:
                                                identifier ('code')
                                                = ('=')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('code')
                                                    . ('.')
                                                    property_identifier ('concat')
                                                  arguments:
                                                    ( ('(')
                                                    template_string:
                                                      ` ('`')
                                                      string_fragment ('struct ')
                                                      template_substitution:
                                                        ${ ('${')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('textFromOp')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('1')
                                                              ] (']')
                                                            , (',')
                                                            false ('false')
                                                            ) (')')
                                                        } ('}')
                                                      string_fragment (' {\n')
                                                      template_substitution:
                                                        ${ ('${')
                                                        ternary_expression:
                                                          binary_expression:
                                                            member_expression:
                                                              subscript_expression:
                                                                identifier ('blocks')
                                                                [ ('[')
                                                                binary_expression:
                                                                  identifier ('i')
                                                                  + ('+')
                                                                  number ('2')
                                                                ] (']')
                                                              . ('.')
                                                              property_identifier ('length')
                                                            > ('>')
                                                            number ('0')
                                                          ? ('?')
                                                          call_expression:
                                                            member_expression:
                                                              this ('this')
                                                              . ('.')
                                                              property_identifier ('genWGSL')
                                                            arguments:
                                                              ( ('(')
                                                              identifier ('util')
                                                              , (',')
                                                              subscript_expression:
                                                                identifier ('blocks')
                                                                [ ('[')
                                                                binary_expression:
                                                                  identifier ('i')
                                                                  + ('+')
                                                                  number ('2')
                                                                ] (']')
                                                              , (',')
                                                              binary_expression:
                                                                identifier ('recursionDepth')
                                                                + ('+')
                                                                number ('1')
                                                              ) (')')
                                                          : (':')
                                                          string:
                                                            " ('"')
                                                            " ('"')
                                                        } ('}')
                                                      string_fragment ('\n};')
                                                      escape_sequence ('\\n')
                                                      ` ('`')
                                                    ) (')')
                                              ; (';')
                                            comment ('// this looks ugly but it formats the code correctly')
                                            expression_statement:
                                              augmented_assignment_expression:
                                                identifier ('i')
                                                += ('+=')
                                                number ('2')
                                              ; (';')
                                            break_statement:
                                              break ('break')
                                              ; (';')
                                            } ('}')
                                        switch_case:
                                          case ('case')
                                          string:
                                            " ('"')
                                            string_fragment ('gpusb3_structProperty')
                                            " ('"')
                                          : (':')
                                          statement_block:
                                            { ('{')
                                            if_statement:
                                              if ('if')
                                              parenthesized_expression:
                                                ( ('(')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('Array')
                                                    . ('.')
                                                    property_identifier ('isArray')
                                                  arguments:
                                                    ( ('(')
                                                    subscript_expression:
                                                      identifier ('blocks')
                                                      [ ('[')
                                                      binary_expression:
                                                        identifier ('i')
                                                        + ('+')
                                                        number ('1')
                                                      ] (']')
                                                    ) (')')
                                                ) (')')
                                              statement_block:
                                                { ('{')
                                                expression_statement:
                                                  call_expression:
                                                    member_expression:
                                                      this ('this')
                                                      . ('.')
                                                      property_identifier ('throwError')
                                                    arguments:
                                                      ( ('(')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('UnexpectedInput')
                                                        " ('"')
                                                      , (',')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('Unexpected input in block input!')
                                                        " ('"')
                                                      , (',')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('StructPropertyBlock')
                                                        " ('"')
                                                      , (',')
                                                      string:
                                                        " ('"')
                                                        string_fragment ('Unexpected input in struct property block!')
                                                        " ('"')
                                                      , (',')
                                                      identifier ('util')
                                                      ) (')')
                                                  ; (';')
                                                return_statement:
                                                  return ('return')
                                                  string:
                                                    " ('"')
                                                    string_fragment ('Unexpected input in struct property name')
                                                    " ('"')
                                                  ; (';')
                                                } ('}')
                                            expression_statement:
                                              assignment_expression:
                                                identifier ('code')
                                                = ('=')
                                                call_expression:
                                                  member_expression:
                                                    identifier ('code')
                                                    . ('.')
                                                    property_identifier ('concat')
                                                  arguments:
                                                    ( ('(')
                                                    template_string:
                                                      ` ('`')
                                                      template_substitution:
                                                        ${ ('${')
                                                        call_expression:
                                                          member_expression:
                                                            this ('this')
                                                            . ('.')
                                                            property_identifier ('textFromOp')
                                                          arguments:
                                                            ( ('(')
                                                            identifier ('util')
                                                            , (',')
                                                            subscript_expression:
                                                              identifier ('blocks')
                                                              [ ('[')
                                                              binary_expression:
                                                                identifier ('i')
                                                                + ('+')
                                                                number ('1')
                                                              ] (']')
                                                            , (',')
                                                            false ('false')
                                                            ) (')')
                                                        } ('}')
                                                      string_fragment (': ')
                                                      template_substitution:
                                                        ${ ('${')
                                                        ternary_expression:
                                                          call_expression:
                                                            member_expression:
                                                              identifier ('Array')
                                                              . ('.')
                                                              property_identifier ('isArray')
                                                            arguments:
                                                              ( ('(')
                                                              subscript_expression:
                                                                identifier ('blocks')
                                                                [ ('[')
                                                                binary_expression:
                                                                  identifier ('i')
                                                                  + ('+')
                                                                  number ('2')
                                                                ] (']')
                                                              ) (')')
                                                          ? ('?')
                                                          call_expression:
                                                            member_expression:
                                                              this ('this')
                                                              . ('.')
                                                              property_identifier ('genWGSL')
                                                            arguments:
                                                              ( ('(')
                                                              identifier ('util')
                                                              , (',')
                                                              subscript_expression:
                                                                identifier ('blocks')
                                                                [ ('[')
                                                                binary_expression:
                                                                  identifier ('i')
                                                                  + ('+')
                                                                  number ('2')
                                                                ] (']')
                                                              , (',')
                                                              binary_expression:
                                                                identifier ('recursionDepth')
                                                                + ('+')
                                                                number ('1')
                                                              ) (')')
                                                          : (':')
                                                          call_expression:
                                                            member_expression:
                                                              this ('this')
                                                              . ('.')
                                                              property_identifier ('textFromOp')
                                                            arguments:
                                                              ( ('(')
                                                              identifier ('util')
                                                              , (',')
                                                              subscript_expression:
                                                                identifier ('blocks')
                                                                [ ('[')
                                                                binary_expression:
                                                                  identifier ('i')
                                                                  + ('+')
                                                                  number ('2')
                                                                ] (']')
                                                              , (',')
                                                              false ('false')
                                                              ) (')')
                                                        } ('}')
                                                      string_fragment (',')
                                                      escape_sequence ('\\n')
                                                      ` ('`')
                                                    ) (')')
                                              ; (';')
                                            expression_statement:
                                              augmented_assignment_expression:
                                                identifier ('i')
                                                += ('+=')
                                                number ('2')
                                              ; (';')
                                            break_statement:
                                              break ('break')
                                              ; (';')
                                            } ('}')
                                        switch_default:
                                          default ('default')
                                          : (':')
                                          statement_block:
                                            { ('{')
                                            expression_statement:
                                              call_expression:
                                                member_expression:
                                                  this ('this')
                                                  . ('.')
                                                  property_identifier ('throwError')
                                                arguments:
                                                  ( ('(')
                                                  string:
                                                    " ('"')
                                                    string_fragment ('InvalidBlock')
                                                    " ('"')
                                                  , (',')
                                                  string:
                                                    " ('"')
                                                    string_fragment ('Invalid block!')
                                                    " ('"')
                                                  , (',')
                                                  string:
                                                    " ('"')
                                                    string_fragment ('genWGSL')
                                                    " ('"')
                                                  , (',')
                                                  string:
                                                    " ('"')
                                                    string_fragment ('Invalid block, WGSL generation failed!')
                                                    " ('"')
                                                  , (',')
                                                  identifier ('util')
                                                  ) (')')
                                              ; (';')
                                            expression_statement:
                                              call_expression:
                                                member_expression:
                                                  identifier ('console')
                                                  . ('.')
                                                  property_identifier ('error')
                                                arguments:
                                                  ( ('(')
                                                  string:
                                                    " ('"')
                                                    string_fragment ('Invalid block! Did you forget the i += (# of inputs)?')
                                                    " ('"')
                                                  , (',')
                                                  call_expression:
                                                    member_expression:
                                                      identifier ('blocks')
                                                      . ('.')
                                                      property_identifier ('slice')
                                                    arguments:
                                                      ( ('(')
                                                      identifier ('i')
                                                      , (',')
                                                      binary_expression:
                                                        identifier ('i')
                                                        + ('+')
                                                        number ('5')
                                                      ) (')')
                                                  ) (')')
                                              ; (';')
                                            return_statement:
                                              return ('return')
                                              binary_expression:
                                                identifier ('code')
                                                + ('+')
                                                string:
                                                  " ('"')
                                                  string_fragment ('Error! - compilation stopped')
                                                  " ('"')
                                              ; (';')
                                            } ('}')
                                        } ('}')
                                    } ('}')
                              } ('}')
                        } ('}')
                    return_statement:
                      return ('return')
                      identifier ('code')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('getBlockId')
                  formal_parameters:
                    ( ('(')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    comment ('// this function is by CST1229')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        member_expression:
                          member_expression:
                            identifier ('util')
                            . ('.')
                            property_identifier ('thread')
                          . ('.')
                          property_identifier ('isCompiled')
                        ) (')')
                      statement_block:
                        { ('{')
                        return_statement:
                          return ('return')
                          call_expression:
                            member_expression:
                              member_expression:
                                identifier ('util')
                                . ('.')
                                property_identifier ('thread')
                              . ('.')
                              property_identifier ('peekStack')
                            arguments:
                              ( ('(')
                              ) (')')
                          ; (';')
                        } ('}')
                      else_clause:
                        else ('else')
                        statement_block:
                          { ('{')
                          return_statement:
                            return ('return')
                            member_expression:
                              member_expression:
                                call_expression:
                                  member_expression:
                                    member_expression:
                                      identifier ('util')
                                      . ('.')
                                      property_identifier ('thread')
                                    . ('.')
                                    property_identifier ('peekStackFrame')
                                  arguments:
                                    ( ('(')
                                    ) (')')
                                . ('.')
                                property_identifier ('op')
                              . ('.')
                              property_identifier ('id')
                            ; (';')
                          } ('}')
                    } ('}')
                method_definition:
                  property_identifier ('genInputTree')
                  formal_parameters:
                    ( ('(')
                    identifier ('util')
                    , (',')
                    identifier ('thread')
                    , (',')
                    identifier ('blocks')
                    , (',')
                    identifier ('check')
                    , (',')
                    identifier ('addCheck')
                    ) (')')
                  statement_block:
                    { ('{')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        binary_expression:
                          call_expression:
                            member_expression:
                              identifier ('JSON')
                              . ('.')
                              property_identifier ('stringify')
                            arguments:
                              ( ('(')
                              member_expression:
                                subscript_expression:
                                  identifier ('blocks')
                                  [ ('[')
                                  identifier ('check')
                                  ] (']')
                                . ('.')
                                property_identifier ('inputs')
                              ) (')')
                          === ('===')
                          call_expression:
                            member_expression:
                              identifier ('JSON')
                              . ('.')
                              property_identifier ('stringify')
                            arguments:
                              ( ('(')
                              object:
                                { ('{')
                                } ('}')
                              ) (')')
                        ) (')')
                      statement_block:
                        { ('{')
                        comment ("// i wrote this code like 2 months ago. i think it checks if all inputs are resolved and if it's a text block or something, but i can't remember")
                        return_statement:
                          return ('return')
                          object:
                            { ('{')
                            pair:
                              property_identifier ('block')
                              : (':')
                              member_expression:
                                subscript_expression:
                                  identifier ('blocks')
                                  [ ('[')
                                  identifier ('check')
                                  ] (']')
                                . ('.')
                                property_identifier ('opcode')
                            , (',')
                            pair:
                              property_identifier ('id')
                              : (':')
                              member_expression:
                                subscript_expression:
                                  identifier ('blocks')
                                  [ ('[')
                                  identifier ('check')
                                  ] (']')
                                . ('.')
                                property_identifier ('id')
                            , (',')
                            pair:
                              property_identifier ('isRaw')
                              : (':')
                              binary_expression:
                                member_expression:
                                  subscript_expression:
                                    identifier ('blocks')
                                    [ ('[')
                                    identifier ('check')
                                    ] (']')
                                  . ('.')
                                  property_identifier ('fields')
                                != ('!=')
                                object:
                                  { ('{')
                                  } ('}')
                            , (',')
                            } ('}')
                          ; (';')
                        comment ("// isRaw is whether it's a math_number or whatever")
                        } ('}')
                      else_clause:
                        else ('else')
                        statement_block:
                          { ('{')
                          lexical_declaration:
                            let ('let')
                            variable_declarator:
                              identifier ('finalinputs')
                              = ('=')
                              array:
                                [ ('[')
                                ] (']')
                            ; (';')
                          if_statement:
                            if ('if')
                            parenthesized_expression:
                              ( ('(')
                              identifier ('addCheck')
                              ) (')')
                            statement_block:
                              { ('{')
                              expression_statement:
                                call_expression:
                                  member_expression:
                                    identifier ('finalinputs')
                                    . ('.')
                                    property_identifier ('push')
                                  arguments:
                                    ( ('(')
                                    object:
                                      { ('{')
                                      pair:
                                        property_identifier ('block')
                                        : (':')
                                        member_expression:
                                          subscript_expression:
                                            identifier ('blocks')
                                            [ ('[')
                                            identifier ('check')
                                            ] (']')
                                          . ('.')
                                          property_identifier ('opcode')
                                      , (',')
                                      pair:
                                        property_identifier ('id')
                                        : (':')
                                        member_expression:
                                          subscript_expression:
                                            identifier ('blocks')
                                            [ ('[')
                                            identifier ('check')
                                            ] (']')
                                          . ('.')
                                          property_identifier ('id')
                                      , (',')
                                      pair:
                                        property_identifier ('isRaw')
                                        : (':')
                                        binary_expression:
                                          member_expression:
                                            subscript_expression:
                                              identifier ('blocks')
                                              [ ('[')
                                              identifier ('check')
                                              ] (']')
                                            . ('.')
                                            property_identifier ('fields')
                                          != ('!=')
                                          object:
                                            { ('{')
                                            } ('}')
                                      , (',')
                                      } ('}')
                                    ) (')')
                                ; (';')
                              } ('}')
                          lexical_declaration:
                            let ('let')
                            variable_declarator:
                              identifier ('inputs')
                              = ('=')
                              call_expression:
                                member_expression:
                                  identifier ('Object')
                                  . ('.')
                                  property_identifier ('getOwnPropertyNames')
                                arguments:
                                  ( ('(')
                                  member_expression:
                                    subscript_expression:
                                      identifier ('blocks')
                                      [ ('[')
                                      identifier ('check')
                                      ] (']')
                                    . ('.')
                                    property_identifier ('inputs')
                                  ) (')')
                            ; (';')
                          comment ('//finalinputs.push(inputs.length)')
                          for_statement:
                            for ('for')
                            ( ('(')
                            lexical_declaration:
                              let ('let')
                              variable_declarator:
                                identifier ('i')
                                = ('=')
                                number ('0')
                              ; (';')
                            binary_expression:
                              identifier ('i')
                              < ('<')
                              member_expression:
                                identifier ('inputs')
                                . ('.')
                                property_identifier ('length')
                            ; (';')
                            update_expression:
                              identifier ('i')
                              ++ ('++')
                            ) (')')
                            statement_block:
                              { ('{')
                              expression_statement:
                                call_expression:
                                  member_expression:
                                    identifier ('finalinputs')
                                    . ('.')
                                    property_identifier ('push')
                                  arguments:
                                    ( ('(')
                                    call_expression:
                                      member_expression:
                                        this ('this')
                                        . ('.')
                                        property_identifier ('genInputTree')
                                      arguments:
                                        ( ('(')
                                        identifier ('util')
                                        , (',')
                                        identifier ('thread')
                                        , (',')
                                        identifier ('blocks')
                                        , (',')
                                        member_expression:
                                          subscript_expression:
                                            member_expression:
                                              subscript_expression:
                                                identifier ('blocks')
                                                [ ('[')
                                                identifier ('check')
                                                ] (']')
                                              . ('.')
                                              property_identifier ('inputs')
                                            [ ('[')
                                            subscript_expression:
                                              identifier ('inputs')
                                              [ ('[')
                                              identifier ('i')
                                              ] (']')
                                            ] (']')
                                          . ('.')
                                          property_identifier ('block')
                                        , (',')
                                        true ('true')
                                        ) (')')
                                    ) (')')
                                ; (';')
                              } ('}')
                          return_statement:
                            return ('return')
                            identifier ('finalinputs')
                            ; (';')
                          } ('}')
                    } ('}')
                method_definition:
                  property_identifier ('genBlock')
                  formal_parameters:
                    ( ('(')
                    identifier ('util')
                    , (',')
                    identifier ('thread')
                    , (',')
                    identifier ('blocks')
                    , (',')
                    identifier ('block')
                    ) (')')
                  statement_block:
                    { ('{')
                    lexical_declaration:
                      let ('let')
                      variable_declarator:
                        identifier ('output')
                        = ('=')
                        array:
                          [ ('[')
                          ] (']')
                      ; (';')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        call_expression:
                          member_expression:
                            array:
                              [ ('[')
                              string:
                                " ('"')
                                string_fragment ('text')
                                " ('"')
                              , (',')
                              string:
                                " ('"')
                                string_fragment ('math_number')
                                " ('"')
                              ] (']')
                            . ('.')
                            property_identifier ('includes')
                          arguments:
                            ( ('(')
                            member_expression:
                              subscript_expression:
                                identifier ('blocks')
                                [ ('[')
                                identifier ('block')
                                ] (']')
                              . ('.')
                              property_identifier ('opcode')
                            ) (')')
                        ) (')')
                      statement_block:
                        { ('{')
                        return_statement:
                          return ('return')
                          object:
                            { ('{')
                            pair:
                              property_identifier ('block')
                              : (':')
                              member_expression:
                                subscript_expression:
                                  identifier ('blocks')
                                  [ ('[')
                                  identifier ('block')
                                  ] (']')
                                . ('.')
                                property_identifier ('opcode')
                            , (',')
                            pair:
                              property_identifier ('id')
                              : (':')
                              member_expression:
                                subscript_expression:
                                  identifier ('blocks')
                                  [ ('[')
                                  identifier ('block')
                                  ] (']')
                                . ('.')
                                property_identifier ('id')
                            , (',')
                            pair:
                              property_identifier ('isRaw')
                              : (':')
                              binary_expression:
                                member_expression:
                                  subscript_expression:
                                    identifier ('blocks')
                                    [ ('[')
                                    identifier ('block')
                                    ] (']')
                                  . ('.')
                                  property_identifier ('fields')
                                != ('!=')
                                object:
                                  { ('{')
                                  } ('}')
                            , (',')
                            comment ("// i can't remember if this does anything. i don't think it does, but just i added it just in case")
                            } ('}')
                          ; (';')
                        } ('}')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        unary_expression:
                          ! ('!')
                          call_expression:
                            member_expression:
                              member_expression:
                                member_expression:
                                  identifier ('Object')
                                  . ('.')
                                  property_identifier ('prototype')
                                . ('.')
                                property_identifier ('hasOwnProperty')
                              . ('.')
                              property_identifier ('call')
                            arguments:
                              ( ('(')
                              subscript_expression:
                                identifier ('blocks')
                                [ ('[')
                                identifier ('block')
                                ] (']')
                              , (',')
                              string:
                                " ('"')
                                string_fragment ('inputs')
                                " ('"')
                              ) (')')
                        ) (')')
                      statement_block:
                        { ('{')
                        return_statement:
                          return ('return')
                          string:
                            " ('"')
                            " ('"')
                          ; (';')
                        } ('}')
                    lexical_declaration:
                      let ('let')
                      variable_declarator:
                        identifier ('heldInputs')
                        = ('=')
                        call_expression:
                          identifier ('structuredClone')
                          arguments:
                            ( ('(')
                            member_expression:
                              subscript_expression:
                                identifier ('blocks')
                                [ ('[')
                                identifier ('block')
                                ] (']')
                              . ('.')
                              property_identifier ('inputs')
                            ) (')')
                      ; (';')
                    expression_statement:
                      call_expression:
                        member_expression:
                          identifier ('output')
                          . ('.')
                          property_identifier ('push')
                        arguments:
                          ( ('(')
                          member_expression:
                            subscript_expression:
                              identifier ('blocks')
                              [ ('[')
                              identifier ('block')
                              ] (']')
                            . ('.')
                            property_identifier ('opcode')
                          ) (')')
                      ; (';')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        call_expression:
                          member_expression:
                            member_expression:
                              member_expression:
                                identifier ('Object')
                                . ('.')
                                property_identifier ('prototype')
                              . ('.')
                              property_identifier ('hasOwnProperty')
                            . ('.')
                            property_identifier ('call')
                          arguments:
                            ( ('(')
                            identifier ('heldInputs')
                            , (',')
                            string:
                              " ('"')
                              string_fragment ('SUBSTACK')
                              " ('"')
                            ) (')')
                        ) (')')
                      statement_block:
                        { ('{')
                        expression_statement:
                          unary_expression:
                            delete ('delete')
                            member_expression:
                              identifier ('heldInputs')
                              . ('.')
                              property_identifier ('SUBSTACK')
                          ; (';')
                        comment ("// this is a quick fix and probably won't play well with other extensions.")
                        } ('}')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        call_expression:
                          member_expression:
                            member_expression:
                              member_expression:
                                identifier ('Object')
                                . ('.')
                                property_identifier ('prototype')
                              . ('.')
                              property_identifier ('hasOwnProperty')
                            . ('.')
                            property_identifier ('call')
                          arguments:
                            ( ('(')
                            identifier ('heldInputs')
                            , (',')
                            string:
                              " ('"')
                              string_fragment ('SUBSTACK2')
                              " ('"')
                            ) (')')
                        ) (')')
                      statement_block:
                        { ('{')
                        expression_statement:
                          unary_expression:
                            delete ('delete')
                            member_expression:
                              identifier ('heldInputs')
                              . ('.')
                              property_identifier ('SUBSTACK2')
                          ; (';')
                        } ('}')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        binary_expression:
                          call_expression:
                            member_expression:
                              identifier ('JSON')
                              . ('.')
                              property_identifier ('stringify')
                            arguments:
                              ( ('(')
                              identifier ('heldInputs')
                              ) (')')
                          != ('!=')
                          call_expression:
                            member_expression:
                              identifier ('JSON')
                              . ('.')
                              property_identifier ('stringify')
                            arguments:
                              ( ('(')
                              object:
                                { ('{')
                                } ('}')
                              ) (')')
                        ) (')')
                      statement_block:
                        { ('{')
                        comment ('// if the block takes inputs excluding SUBSTACK and SUBSTACK2, generate an input tree for it')
                        comment ('//output.push(Object.getOwnPropertyNames(heldInputs).length)')
                        for_statement:
                          for ('for')
                          ( ('(')
                          lexical_declaration:
                            let ('let')
                            variable_declarator:
                              identifier ('i')
                              = ('=')
                              number ('0')
                            ; (';')
                          binary_expression:
                            identifier ('i')
                            < ('<')
                            member_expression:
                              call_expression:
                                member_expression:
                                  identifier ('Object')
                                  . ('.')
                                  property_identifier ('getOwnPropertyNames')
                                arguments:
                                  ( ('(')
                                  identifier ('heldInputs')
                                  ) (')')
                              . ('.')
                              property_identifier ('length')
                          ; (';')
                          update_expression:
                            identifier ('i')
                            ++ ('++')
                          ) (')')
                          statement_block:
                            { ('{')
                            expression_statement:
                              call_expression:
                                member_expression:
                                  identifier ('output')
                                  . ('.')
                                  property_identifier ('push')
                                arguments:
                                  ( ('(')
                                  call_expression:
                                    member_expression:
                                      this ('this')
                                      . ('.')
                                      property_identifier ('genInputTree')
                                    arguments:
                                      ( ('(')
                                      identifier ('util')
                                      , (',')
                                      identifier ('thread')
                                      , (',')
                                      identifier ('blocks')
                                      , (',')
                                      member_expression:
                                        subscript_expression:
                                          identifier ('heldInputs')
                                          [ ('[')
                                          subscript_expression:
                                            call_expression:
                                              member_expression:
                                                identifier ('Object')
                                                . ('.')
                                                property_identifier ('getOwnPropertyNames')
                                              arguments:
                                                ( ('(')
                                                identifier ('heldInputs')
                                                ) (')')
                                            [ ('[')
                                            identifier ('i')
                                            ] (']')
                                          ] (']')
                                        . ('.')
                                        property_identifier ('block')
                                      , (',')
                                      true ('true')
                                      ) (')')
                                  ) (')')
                              ; (';')
                            } ('}')
                        if_statement:
                          if ('if')
                          parenthesized_expression:
                            ( ('(')
                            binary_expression:
                              binary_expression:
                                member_expression:
                                  identifier ('block')
                                  . ('.')
                                  property_identifier ('opcode')
                                === ('===')
                                string:
                                  " ('"')
                                  string_fragment ('gpusb3_defFunc')
                                  " ('"')
                              && ('&&')
                              unary_expression:
                                ! ('!')
                                call_expression:
                                  member_expression:
                                    member_expression:
                                      member_expression:
                                        identifier ('Object')
                                        . ('.')
                                        property_identifier ('prototype')
                                      . ('.')
                                      property_identifier ('hasOwnProperty')
                                    . ('.')
                                    property_identifier ('call')
                                  arguments:
                                    ( ('(')
                                    identifier ('heldInputs')
                                    , (',')
                                    string:
                                      " ('"')
                                      string_fragment ('ARGS')
                                      " ('"')
                                    ) (')')
                            ) (')')
                          statement_block:
                            { ('{')
                            expression_statement:
                              call_expression:
                                member_expression:
                                  identifier ('output')
                                  . ('.')
                                  property_identifier ('push')
                                arguments:
                                  ( ('(')
                                  null ('null')
                                  ) (')')
                              ; (';')
                            } ('}')
                        } ('}')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        call_expression:
                          member_expression:
                            member_expression:
                              member_expression:
                                identifier ('Object')
                                . ('.')
                                property_identifier ('prototype')
                              . ('.')
                              property_identifier ('hasOwnProperty')
                            . ('.')
                            property_identifier ('call')
                          arguments:
                            ( ('(')
                            member_expression:
                              subscript_expression:
                                identifier ('blocks')
                                [ ('[')
                                identifier ('block')
                                ] (']')
                              . ('.')
                              property_identifier ('inputs')
                            , (',')
                            string:
                              " ('"')
                              string_fragment ('SUBSTACK')
                              " ('"')
                            ) (')')
                        ) (')')
                      statement_block:
                        { ('{')
                        expression_statement:
                          call_expression:
                            member_expression:
                              identifier ('output')
                              . ('.')
                              property_identifier ('push')
                            arguments:
                              ( ('(')
                              call_expression:
                                member_expression:
                                  this ('this')
                                  . ('.')
                                  property_identifier ('compile')
                                arguments:
                                  ( ('(')
                                  identifier ('util')
                                  , (',')
                                  identifier ('thread')
                                  , (',')
                                  identifier ('blocks')
                                  , (',')
                                  member_expression:
                                    member_expression:
                                      member_expression:
                                        subscript_expression:
                                          identifier ('blocks')
                                          [ ('[')
                                          identifier ('block')
                                          ] (']')
                                        . ('.')
                                        property_identifier ('inputs')
                                      . ('.')
                                      property_identifier ('SUBSTACK')
                                    . ('.')
                                    property_identifier ('block')
                                  , (',')
                                  true ('true')
                                  ) (')')
                              ) (')')
                          ; (';')
                        } ('}')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        call_expression:
                          member_expression:
                            member_expression:
                              member_expression:
                                identifier ('Object')
                                . ('.')
                                property_identifier ('prototype')
                              . ('.')
                              property_identifier ('hasOwnProperty')
                            . ('.')
                            property_identifier ('call')
                          arguments:
                            ( ('(')
                            member_expression:
                              subscript_expression:
                                identifier ('blocks')
                                [ ('[')
                                identifier ('block')
                                ] (']')
                              . ('.')
                              property_identifier ('inputs')
                            , (',')
                            string:
                              " ('"')
                              string_fragment ('SUBSTACK2')
                              " ('"')
                            ) (')')
                        ) (')')
                      statement_block:
                        { ('{')
                        comment ("// support for n-number of branches is cringe and we don't need that kind of negativity in here")
                        comment ('// also no extensions in my pristine compiled hats')
                        if_statement:
                          if ('if')
                          parenthesized_expression:
                            ( ('(')
                            unary_expression:
                              ! ('!')
                              call_expression:
                                member_expression:
                                  member_expression:
                                    member_expression:
                                      identifier ('Object')
                                      . ('.')
                                      property_identifier ('prototype')
                                    . ('.')
                                    property_identifier ('hasOwnProperty')
                                  . ('.')
                                  property_identifier ('call')
                                arguments:
                                  ( ('(')
                                  member_expression:
                                    subscript_expression:
                                      identifier ('blocks')
                                      [ ('[')
                                      identifier ('block')
                                      ] (']')
                                    . ('.')
                                    property_identifier ('inputs')
                                  , (',')
                                  string:
                                    " ('"')
                                    string_fragment ('SUBSTACK')
                                    " ('"')
                                  ) (')')
                            ) (')')
                          statement_block:
                            { ('{')
                            expression_statement:
                              call_expression:
                                member_expression:
                                  identifier ('output')
                                  . ('.')
                                  property_identifier ('push')
                                arguments:
                                  ( ('(')
                                  array:
                                    [ ('[')
                                    ] (']')
                                  ) (')')
                              ; (';')
                            } ('}')
                        expression_statement:
                          call_expression:
                            member_expression:
                              identifier ('output')
                              . ('.')
                              property_identifier ('push')
                            arguments:
                              ( ('(')
                              call_expression:
                                member_expression:
                                  this ('this')
                                  . ('.')
                                  property_identifier ('compile')
                                arguments:
                                  ( ('(')
                                  identifier ('util')
                                  , (',')
                                  identifier ('thread')
                                  , (',')
                                  identifier ('blocks')
                                  , (',')
                                  member_expression:
                                    member_expression:
                                      member_expression:
                                        subscript_expression:
                                          identifier ('blocks')
                                          [ ('[')
                                          identifier ('block')
                                          ] (']')
                                        . ('.')
                                        property_identifier ('inputs')
                                      . ('.')
                                      property_identifier ('SUBSTACK2')
                                    . ('.')
                                    property_identifier ('block')
                                  , (',')
                                  true ('true')
                                  ) (')')
                              ) (')')
                          ; (';')
                        } ('}')
                    return_statement:
                      return ('return')
                      identifier ('output')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('compile')
                  formal_parameters:
                    ( ('(')
                    identifier ('util')
                    , (',')
                    identifier ('thread')
                    , (',')
                    identifier ('blocks')
                    , (',')
                    identifier ('firstblock')
                    , (',')
                    identifier ('addStart')
                    ) (')')
                  statement_block:
                    { ('{')
                    lexical_declaration:
                      let ('let')
                      variable_declarator:
                        identifier ('output')
                        = ('=')
                        array:
                          [ ('[')
                          ] (']')
                      ; (';')
                    lexical_declaration:
                      let ('let')
                      variable_declarator:
                        identifier ('held')
                        = ('=')
                        identifier ('firstblock')
                      ; (';')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        identifier ('addStart')
                        ) (')')
                      statement_block:
                        { ('{')
                        expression_statement:
                          assignment_expression:
                            identifier ('output')
                            = ('=')
                            call_expression:
                              member_expression:
                                identifier ('output')
                                . ('.')
                                property_identifier ('concat')
                              arguments:
                                ( ('(')
                                call_expression:
                                  member_expression:
                                    this ('this')
                                    . ('.')
                                    property_identifier ('genBlock')
                                  arguments:
                                    ( ('(')
                                    identifier ('util')
                                    , (',')
                                    identifier ('thread')
                                    , (',')
                                    identifier ('blocks')
                                    , (',')
                                    identifier ('held')
                                    ) (')')
                                ) (')')
                          ; (';')
                        } ('}')
                    lexical_declaration:
                      let ('let')
                      variable_declarator:
                        identifier ('next')
                        = ('=')
                        member_expression:
                          subscript_expression:
                            identifier ('blocks')
                            [ ('[')
                            identifier ('held')
                            ] (']')
                          . ('.')
                          property_identifier ('next')
                      ; (';')
                    while_statement:
                      while ('while')
                      parenthesized_expression:
                        ( ('(')
                        binary_expression:
                          identifier ('next')
                          != ('!=')
                          null ('null')
                        ) (')')
                      statement_block:
                        { ('{')
                        expression_statement:
                          assignment_expression:
                            identifier ('held')
                            = ('=')
                            identifier ('next')
                          ; (';')
                        expression_statement:
                          assignment_expression:
                            identifier ('next')
                            = ('=')
                            member_expression:
                              subscript_expression:
                                identifier ('blocks')
                                [ ('[')
                                identifier ('held')
                                ] (']')
                              . ('.')
                              property_identifier ('next')
                          ; (';')
                        expression_statement:
                          call_expression:
                            member_expression:
                              identifier ('output')
                              . ('.')
                              property_identifier ('push')
                            arguments:
                              ( ('(')
                              member_expression:
                                subscript_expression:
                                  identifier ('blocks')
                                  [ ('[')
                                  identifier ('held')
                                  ] (']')
                                . ('.')
                                property_identifier ('opcode')
                              ) (')')
                          ; (';')
                        lexical_declaration:
                          let ('let')
                          variable_declarator:
                            identifier ('heldInputs')
                            = ('=')
                            call_expression:
                              identifier ('structuredClone')
                              arguments:
                                ( ('(')
                                member_expression:
                                  subscript_expression:
                                    identifier ('blocks')
                                    [ ('[')
                                    identifier ('held')
                                    ] (']')
                                  . ('.')
                                  property_identifier ('inputs')
                                ) (')')
                          ; (';')
                        comment ('//output.push(gpusb3Info.blocks.find((v) => v.info.opcode == blocks[held].opcode)?.info?.blockType === "reporter" && Object.getOwnPropertyNames(heldInputs).length < 1 ? [blocks[held].opcode] : blocks[held].opcode)')
                        if_statement:
                          if ('if')
                          parenthesized_expression:
                            ( ('(')
                            call_expression:
                              member_expression:
                                member_expression:
                                  member_expression:
                                    identifier ('Object')
                                    . ('.')
                                    property_identifier ('prototype')
                                  . ('.')
                                  property_identifier ('hasOwnProperty')
                                . ('.')
                                property_identifier ('call')
                              arguments:
                                ( ('(')
                                identifier ('heldInputs')
                                , (',')
                                string:
                                  " ('"')
                                  string_fragment ('SUBSTACK')
                                  " ('"')
                                ) (')')
                            ) (')')
                          statement_block:
                            { ('{')
                            expression_statement:
                              unary_expression:
                                delete ('delete')
                                member_expression:
                                  identifier ('heldInputs')
                                  . ('.')
                                  property_identifier ('SUBSTACK')
                              ; (';')
                            comment ("// this is a quick fix and probably won't play well with other extensions.")
                            comment ('// i will make a custom math/block system later')
                            } ('}')
                        if_statement:
                          if ('if')
                          parenthesized_expression:
                            ( ('(')
                            call_expression:
                              member_expression:
                                member_expression:
                                  member_expression:
                                    identifier ('Object')
                                    . ('.')
                                    property_identifier ('prototype')
                                  . ('.')
                                  property_identifier ('hasOwnProperty')
                                . ('.')
                                property_identifier ('call')
                              arguments:
                                ( ('(')
                                identifier ('heldInputs')
                                , (',')
                                string:
                                  " ('"')
                                  string_fragment ('SUBSTACK2')
                                  " ('"')
                                ) (')')
                            ) (')')
                          statement_block:
                            { ('{')
                            expression_statement:
                              unary_expression:
                                delete ('delete')
                                member_expression:
                                  identifier ('heldInputs')
                                  . ('.')
                                  property_identifier ('SUBSTACK2')
                              ; (';')
                            comment ('// see previous comment')
                            } ('}')
                        if_statement:
                          if ('if')
                          parenthesized_expression:
                            ( ('(')
                            binary_expression:
                              binary_expression:
                                binary_expression:
                                  binary_expression:
                                    call_expression:
                                      member_expression:
                                        identifier ('JSON')
                                        . ('.')
                                        property_identifier ('stringify')
                                      arguments:
                                        ( ('(')
                                        identifier ('heldInputs')
                                        ) (')')
                                    != ('!=')
                                    call_expression:
                                      member_expression:
                                        identifier ('JSON')
                                        . ('.')
                                        property_identifier ('stringify')
                                      arguments:
                                        ( ('(')
                                        object:
                                          { ('{')
                                          } ('}')
                                        ) (')')
                                  || ('||')
                                  binary_expression:
                                    member_expression:
                                      subscript_expression:
                                        identifier ('blocks')
                                        [ ('[')
                                        identifier ('held')
                                        ] (']')
                                      . ('.')
                                      property_identifier ('opcode')
                                    === ('===')
                                    string:
                                      " ('"')
                                      string_fragment ('control_if')
                                      " ('"')
                                || ('||')
                                binary_expression:
                                  member_expression:
                                    subscript_expression:
                                      identifier ('blocks')
                                      [ ('[')
                                      identifier ('held')
                                      ] (']')
                                    . ('.')
                                    property_identifier ('opcode')
                                  === ('===')
                                  string:
                                    " ('"')
                                    string_fragment ('control_if_else')
                                    " ('"')
                              || ('||')
                              binary_expression:
                                member_expression:
                                  subscript_expression:
                                    identifier ('blocks')
                                    [ ('[')
                                    identifier ('held')
                                    ] (']')
                                  . ('.')
                                  property_identifier ('opcode')
                                === ('===')
                                string:
                                  " ('"')
                                  string_fragment ('gpusb3_computeFunc')
                                  " ('"')
                            ) (')')
                          statement_block:
                            { ('{')
                            comment ('// if the block takes inputs excluding SUBSTACK and SUBSTACK2, generate an input tree for it')
                            comment ('//output.push(Object.getOwnPropertyNames(heldInputs).length)')
                            if_statement:
                              if ('if')
                              parenthesized_expression:
                                ( ('(')
                                binary_expression:
                                  member_expression:
                                    call_expression:
                                      member_expression:
                                        identifier ('Object')
                                        . ('.')
                                        property_identifier ('getOwnPropertyNames')
                                      arguments:
                                        ( ('(')
                                        identifier ('heldInputs')
                                        ) (')')
                                    . ('.')
                                    property_identifier ('length')
                                  === ('===')
                                  number ('0')
                                ) (')')
                              statement_block:
                                { ('{')
                                expression_statement:
                                  call_expression:
                                    member_expression:
                                      identifier ('output')
                                      . ('.')
                                      property_identifier ('push')
                                    arguments:
                                      ( ('(')
                                      array:
                                        [ ('[')
                                        ] (']')
                                      ) (')')
                                  ; (';')
                                } ('}')
                              else_clause:
                                else ('else')
                                statement_block:
                                  { ('{')
                                  lexical_declaration:
                                    const ('const')
                                    variable_declarator:
                                      identifier ('props')
                                      = ('=')
                                      call_expression:
                                        member_expression:
                                          identifier ('Object')
                                          . ('.')
                                          property_identifier ('getOwnPropertyNames')
                                        arguments:
                                          ( ('(')
                                          identifier ('heldInputs')
                                          ) (')')
                                    ; (';')
                                  for_statement:
                                    for ('for')
                                    ( ('(')
                                    lexical_declaration:
                                      let ('let')
                                      variable_declarator:
                                        identifier ('i')
                                        = ('=')
                                        number ('0')
                                      ; (';')
                                    binary_expression:
                                      identifier ('i')
                                      < ('<')
                                      member_expression:
                                        identifier ('props')
                                        . ('.')
                                        property_identifier ('length')
                                    ; (';')
                                    update_expression:
                                      identifier ('i')
                                      ++ ('++')
                                    ) (')')
                                    statement_block:
                                      { ('{')
                                      expression_statement:
                                        call_expression:
                                          member_expression:
                                            identifier ('output')
                                            . ('.')
                                            property_identifier ('push')
                                          arguments:
                                            ( ('(')
                                            call_expression:
                                              member_expression:
                                                this ('this')
                                                . ('.')
                                                property_identifier ('genInputTree')
                                              arguments:
                                                ( ('(')
                                                identifier ('util')
                                                , (',')
                                                identifier ('thread')
                                                , (',')
                                                identifier ('blocks')
                                                , (',')
                                                member_expression:
                                                  subscript_expression:
                                                    identifier ('heldInputs')
                                                    [ ('[')
                                                    subscript_expression:
                                                      call_expression:
                                                        member_expression:
                                                          identifier ('Object')
                                                          . ('.')
                                                          property_identifier ('getOwnPropertyNames')
                                                        arguments:
                                                          ( ('(')
                                                          identifier ('heldInputs')
                                                          ) (')')
                                                      [ ('[')
                                                      identifier ('i')
                                                      ] (']')
                                                    ] (']')
                                                  . ('.')
                                                  property_identifier ('block')
                                                , (',')
                                                true ('true')
                                                ) (')')
                                            ) (')')
                                        ; (';')
                                      } ('}')
                                  comment ('// here')
                                  if_statement:
                                    if ('if')
                                    parenthesized_expression:
                                      ( ('(')
                                      binary_expression:
                                        binary_expression:
                                          member_expression:
                                            subscript_expression:
                                              identifier ('blocks')
                                              [ ('[')
                                              identifier ('held')
                                              ] (']')
                                            . ('.')
                                            property_identifier ('opcode')
                                          === ('===')
                                          string:
                                            " ('"')
                                            string_fragment ('gpusb3_defFunc')
                                            " ('"')
                                        && ('&&')
                                        unary_expression:
                                          ! ('!')
                                          call_expression:
                                            member_expression:
                                              member_expression:
                                                member_expression:
                                                  identifier ('Object')
                                                  . ('.')
                                                  property_identifier ('prototype')
                                                . ('.')
                                                property_identifier ('hasOwnProperty')
                                              . ('.')
                                              property_identifier ('call')
                                            arguments:
                                              ( ('(')
                                              identifier ('heldInputs')
                                              , (',')
                                              string:
                                                " ('"')
                                                string_fragment ('ARGS')
                                                " ('"')
                                              ) (')')
                                      ) (')')
                                    statement_block:
                                      { ('{')
                                      expression_statement:
                                        call_expression:
                                          member_expression:
                                            identifier ('output')
                                            . ('.')
                                            property_identifier ('push')
                                          arguments:
                                            ( ('(')
                                            null ('null')
                                            ) (')')
                                        ; (';')
                                      } ('}')
                                  } ('}')
                            } ('}')
                        if_statement:
                          if ('if')
                          parenthesized_expression:
                            ( ('(')
                            binary_expression:
                              binary_expression:
                                binary_expression:
                                  binary_expression:
                                    call_expression:
                                      member_expression:
                                        member_expression:
                                          member_expression:
                                            identifier ('Object')
                                            . ('.')
                                            property_identifier ('prototype')
                                          . ('.')
                                          property_identifier ('hasOwnProperty')
                                        . ('.')
                                        property_identifier ('call')
                                      arguments:
                                        ( ('(')
                                        member_expression:
                                          subscript_expression:
                                            identifier ('blocks')
                                            [ ('[')
                                            identifier ('held')
                                            ] (']')
                                          . ('.')
                                          property_identifier ('inputs')
                                        , (',')
                                        string:
                                          " ('"')
                                          string_fragment ('SUBSTACK')
                                          " ('"')
                                        ) (')')
                                    || ('||')
                                    binary_expression:
                                      member_expression:
                                        subscript_expression:
                                          identifier ('blocks')
                                          [ ('[')
                                          identifier ('held')
                                          ] (']')
                                        . ('.')
                                        property_identifier ('opcode')
                                      === ('===')
                                      string:
                                        " ('"')
                                        string_fragment ('control_if')
                                        " ('"')
                                  || ('||')
                                  binary_expression:
                                    member_expression:
                                      subscript_expression:
                                        identifier ('blocks')
                                        [ ('[')
                                        identifier ('held')
                                        ] (']')
                                      . ('.')
                                      property_identifier ('opcode')
                                    === ('===')
                                    string:
                                      " ('"')
                                      string_fragment ('control_if_else')
                                      " ('"')
                                || ('||')
                                binary_expression:
                                  member_expression:
                                    subscript_expression:
                                      identifier ('blocks')
                                      [ ('[')
                                      identifier ('held')
                                      ] (']')
                                    . ('.')
                                    property_identifier ('opcode')
                                  === ('===')
                                  string:
                                    " ('"')
                                    string_fragment ('gpusb3_computeFunc')
                                    " ('"')
                              || ('||')
                              binary_expression:
                                member_expression:
                                  subscript_expression:
                                    identifier ('blocks')
                                    [ ('[')
                                    identifier ('held')
                                    ] (']')
                                  . ('.')
                                  property_identifier ('opcode')
                                === ('===')
                                string:
                                  " ('"')
                                  string_fragment ('gpusb3_defFunc')
                                  " ('"')
                            ) (')')
                          statement_block:
                            { ('{')
                            if_statement:
                              if ('if')
                              parenthesized_expression:
                                ( ('(')
                                binary_expression:
                                  parenthesized_expression:
                                    ( ('(')
                                    binary_expression:
                                      binary_expression:
                                        binary_expression:
                                          binary_expression:
                                            member_expression:
                                              subscript_expression:
                                                identifier ('blocks')
                                                [ ('[')
                                                identifier ('held')
                                                ] (']')
                                              . ('.')
                                              property_identifier ('opcode')
                                            === ('===')
                                            string:
                                              " ('"')
                                              string_fragment ('control_if')
                                              " ('"')
                                          || ('||')
                                          binary_expression:
                                            member_expression:
                                              subscript_expression:
                                                identifier ('blocks')
                                                [ ('[')
                                                identifier ('held')
                                                ] (']')
                                              . ('.')
                                              property_identifier ('opcode')
                                            === ('===')
                                            string:
                                              " ('"')
                                              string_fragment ('gpusb3_computeFunc')
                                              " ('"')
                                        || ('||')
                                        binary_expression:
                                          member_expression:
                                            subscript_expression:
                                              identifier ('blocks')
                                              [ ('[')
                                              identifier ('held')
                                              ] (']')
                                            . ('.')
                                            property_identifier ('opcode')
                                          === ('===')
                                          string:
                                            " ('"')
                                            string_fragment ('gpusb3_defFunc')
                                            " ('"')
                                      || ('||')
                                      binary_expression:
                                        member_expression:
                                          subscript_expression:
                                            identifier ('blocks')
                                            [ ('[')
                                            identifier ('held')
                                            ] (']')
                                          . ('.')
                                          property_identifier ('opcode')
                                        === ('===')
                                        string:
                                          " ('"')
                                          string_fragment ('control_if_else')
                                          " ('"')
                                    ) (')')
                                  && ('&&')
                                  unary_expression:
                                    ! ('!')
                                    call_expression:
                                      member_expression:
                                        member_expression:
                                          member_expression:
                                            identifier ('Object')
                                            . ('.')
                                            property_identifier ('prototype')
                                          . ('.')
                                          property_identifier ('hasOwnProperty')
                                        . ('.')
                                        property_identifier ('call')
                                      arguments:
                                        ( ('(')
                                        member_expression:
                                          subscript_expression:
                                            identifier ('blocks')
                                            [ ('[')
                                            identifier ('held')
                                            ] (']')
                                          . ('.')
                                          property_identifier ('inputs')
                                        , (',')
                                        string:
                                          " ('"')
                                          string_fragment ('SUBSTACK')
                                          " ('"')
                                        ) (')')
                                ) (')')
                              statement_block:
                                { ('{')
                                expression_statement:
                                  call_expression:
                                    member_expression:
                                      identifier ('output')
                                      . ('.')
                                      property_identifier ('push')
                                    arguments:
                                      ( ('(')
                                      array:
                                        [ ('[')
                                        ] (']')
                                      ) (')')
                                  ; (';')
                                } ('}')
                              else_clause:
                                else ('else')
                                statement_block:
                                  { ('{')
                                  expression_statement:
                                    call_expression:
                                      member_expression:
                                        identifier ('output')
                                        . ('.')
                                        property_identifier ('push')
                                      arguments:
                                        ( ('(')
                                        call_expression:
                                          member_expression:
                                            this ('this')
                                            . ('.')
                                            property_identifier ('compile')
                                          arguments:
                                            ( ('(')
                                            identifier ('util')
                                            , (',')
                                            identifier ('thread')
                                            , (',')
                                            identifier ('blocks')
                                            , (',')
                                            member_expression:
                                              member_expression:
                                                member_expression:
                                                  subscript_expression:
                                                    identifier ('blocks')
                                                    [ ('[')
                                                    identifier ('held')
                                                    ] (']')
                                                  . ('.')
                                                  property_identifier ('inputs')
                                                . ('.')
                                                property_identifier ('SUBSTACK')
                                              . ('.')
                                              property_identifier ('block')
                                            , (',')
                                            true ('true')
                                            ) (')')
                                        ) (')')
                                    ; (';')
                                  } ('}')
                            } ('}')
                        if_statement:
                          if ('if')
                          parenthesized_expression:
                            ( ('(')
                            binary_expression:
                              call_expression:
                                member_expression:
                                  member_expression:
                                    member_expression:
                                      identifier ('Object')
                                      . ('.')
                                      property_identifier ('prototype')
                                    . ('.')
                                    property_identifier ('hasOwnProperty')
                                  . ('.')
                                  property_identifier ('call')
                                arguments:
                                  ( ('(')
                                  member_expression:
                                    subscript_expression:
                                      identifier ('blocks')
                                      [ ('[')
                                      identifier ('held')
                                      ] (']')
                                    . ('.')
                                    property_identifier ('inputs')
                                  , (',')
                                  string:
                                    " ('"')
                                    string_fragment ('SUBSTACK2')
                                    " ('"')
                                  ) (')')
                              || ('||')
                              binary_expression:
                                member_expression:
                                  subscript_expression:
                                    identifier ('blocks')
                                    [ ('[')
                                    identifier ('held')
                                    ] (']')
                                  . ('.')
                                  property_identifier ('opcode')
                                === ('===')
                                string:
                                  " ('"')
                                  string_fragment ('control_if_else')
                                  " ('"')
                            ) (')')
                          statement_block:
                            { ('{')
                            comment ("// support for n-number of branches is cringe and we don't need that kind of negativity in here")
                            comment ('// also no extensions in my pristine compiled hats')
                            if_statement:
                              if ('if')
                              parenthesized_expression:
                                ( ('(')
                                binary_expression:
                                  binary_expression:
                                    member_expression:
                                      subscript_expression:
                                        identifier ('blocks')
                                        [ ('[')
                                        identifier ('held')
                                        ] (']')
                                      . ('.')
                                      property_identifier ('opcode')
                                    === ('===')
                                    string:
                                      " ('"')
                                      string_fragment ('control_if_else')
                                      " ('"')
                                  && ('&&')
                                  unary_expression:
                                    ! ('!')
                                    call_expression:
                                      member_expression:
                                        member_expression:
                                          member_expression:
                                            identifier ('Object')
                                            . ('.')
                                            property_identifier ('prototype')
                                          . ('.')
                                          property_identifier ('hasOwnProperty')
                                        . ('.')
                                        property_identifier ('call')
                                      arguments:
                                        ( ('(')
                                        member_expression:
                                          subscript_expression:
                                            identifier ('blocks')
                                            [ ('[')
                                            identifier ('held')
                                            ] (']')
                                          . ('.')
                                          property_identifier ('inputs')
                                        , (',')
                                        string:
                                          " ('"')
                                          string_fragment ('SUBSTACK2')
                                          " ('"')
                                        ) (')')
                                ) (')')
                              statement_block:
                                { ('{')
                                expression_statement:
                                  call_expression:
                                    member_expression:
                                      identifier ('output')
                                      . ('.')
                                      property_identifier ('push')
                                    arguments:
                                      ( ('(')
                                      array:
                                        [ ('[')
                                        ] (']')
                                      ) (')')
                                  ; (';')
                                } ('}')
                              else_clause:
                                else ('else')
                                statement_block:
                                  { ('{')
                                  expression_statement:
                                    call_expression:
                                      member_expression:
                                        identifier ('output')
                                        . ('.')
                                        property_identifier ('push')
                                      arguments:
                                        ( ('(')
                                        call_expression:
                                          member_expression:
                                            this ('this')
                                            . ('.')
                                            property_identifier ('compile')
                                          arguments:
                                            ( ('(')
                                            identifier ('util')
                                            , (',')
                                            identifier ('thread')
                                            , (',')
                                            identifier ('blocks')
                                            , (',')
                                            member_expression:
                                              member_expression:
                                                member_expression:
                                                  subscript_expression:
                                                    identifier ('blocks')
                                                    [ ('[')
                                                    identifier ('held')
                                                    ] (']')
                                                  . ('.')
                                                  property_identifier ('inputs')
                                                . ('.')
                                                property_identifier ('SUBSTACK2')
                                              . ('.')
                                              property_identifier ('block')
                                            , (',')
                                            true ('true')
                                            ) (')')
                                        ) (')')
                                    ; (';')
                                  } ('}')
                            } ('}')
                        } ('}')
                    return_statement:
                      return ('return')
                      identifier ('output')
                      ; (';')
                    } ('}')
                method_definition:
                  async ('async')
                  property_identifier ('compileStart')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    expression_statement:
                      call_expression:
                        member_expression:
                          identifier ('console')
                          . ('.')
                          property_identifier ('log')
                        arguments:
                          ( ('(')
                          identifier ('util')
                          ) (')')
                      ; (';')
                    comment ('// helpful error site: https://toji.dev/webgpu-best-practices/error-handling.html')
                    comment ('// seems to be one of the only places to explain this in human readable terms')
                    lexical_declaration:
                      let ('let')
                      variable_declarator:
                        identifier ('threads')
                        = ('=')
                        call_expression:
                          member_expression:
                            identifier ('util')
                            . ('.')
                            property_identifier ('startHats')
                          arguments:
                            ( ('(')
                            string:
                              " ('"')
                              string_fragment ('gpusb3_compileHat')
                              " ('"')
                            ) (')')
                      ; (';')
                    comment ("// NOTE TO SELF: THIS DOESN'T START THE HATS(why is it named that then. this is stupid and i don't like it, i am going to complain on my twitter dot com (just kidding twitter is for nerds and i don't use it. also as of writing this comment for some it reason allows weird stuff now, what were they even thinking. twitter was bad to begin with but elon musk's midlife crisis ran it so far into the ground that it burned alive, also i'm not calling it x)), thanks sharkpool")
                    lexical_declaration:
                      let ('let')
                      variable_declarator:
                        identifier ('newthreads')
                        = ('=')
                        array:
                          [ ('[')
                          ] (']')
                      ; (';')
                    expression_statement:
                      call_expression:
                        member_expression:
                          member_expression:
                            member_expression:
                              identifier ('vm')
                              . ('.')
                              property_identifier ('runtime')
                            . ('.')
                            property_identifier ('threads')
                          . ('.')
                          property_identifier ('forEach')
                        arguments:
                          ( ('(')
                          arrow_function:
                            formal_parameters:
                              ( ('(')
                              identifier ('i')
                              ) (')')
                            => ('=>')
                            statement_block:
                              { ('{')
                              comment ('//console.log(i.topBlock)')
                              if_statement:
                                if ('if')
                                parenthesized_expression:
                                  ( ('(')
                                  call_expression:
                                    member_expression:
                                      member_expression:
                                        member_expression:
                                          identifier ('Object')
                                          . ('.')
                                          property_identifier ('prototype')
                                        . ('.')
                                        property_identifier ('hasOwnProperty')
                                      . ('.')
                                      property_identifier ('call')
                                    arguments:
                                      ( ('(')
                                      member_expression:
                                        member_expression:
                                          member_expression:
                                            identifier ('util')
                                            . ('.')
                                            property_identifier ('thread')
                                          . ('.')
                                          property_identifier ('blockContainer')
                                        . ('.')
                                        property_identifier ('_blocks')
                                      , (',')
                                      member_expression:
                                        identifier ('i')
                                        . ('.')
                                        property_identifier ('topBlock')
                                      ) (')')
                                  ) (')')
                                statement_block:
                                  { ('{')
                                  if_statement:
                                    if ('if')
                                    parenthesized_expression:
                                      ( ('(')
                                      binary_expression:
                                        member_expression:
                                          subscript_expression:
                                            member_expression:
                                              member_expression:
                                                member_expression:
                                                  identifier ('util')
                                                  . ('.')
                                                  property_identifier ('thread')
                                                . ('.')
                                                property_identifier ('blockContainer')
                                              . ('.')
                                              property_identifier ('_blocks')
                                            [ ('[')
                                            member_expression:
                                              identifier ('i')
                                              . ('.')
                                              property_identifier ('topBlock')
                                            ] (']')
                                          . ('.')
                                          property_identifier ('opcode')
                                        === ('===')
                                        string:
                                          " ('"')
                                          string_fragment ('gpusb3_compileHat')
                                          " ('"')
                                      ) (')')
                                    statement_block:
                                      { ('{')
                                      expression_statement:
                                        call_expression:
                                          member_expression:
                                            identifier ('newthreads')
                                            . ('.')
                                            property_identifier ('push')
                                          arguments:
                                            ( ('(')
                                            identifier ('i')
                                            ) (')')
                                        ; (';')
                                      } ('}')
                                  } ('}')
                              } ('}')
                          ) (')')
                      ; (';')
                    expression_statement:
                      assignment_expression:
                        identifier ('threads')
                        = ('=')
                        identifier ('newthreads')
                      ; (';')
                    comment ('//threads = vm.runtime.threads.filter((i) => util.thread.blockContainer._blocks[i.topBlock].opcode === "gpusb3_compileHat")')
                    comment ('//console.log(threads)')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        binary_expression:
                          member_expression:
                            identifier ('threads')
                            . ('.')
                            property_identifier ('length')
                          > ('>')
                          number ('0')
                        ) (')')
                      statement_block:
                        { ('{')
                        expression_statement:
                          await_expression:
                            await ('await')
                            call_expression:
                              member_expression:
                                identifier ('threads')
                                . ('.')
                                property_identifier ('forEach')
                              arguments:
                                ( ('(')
                                arrow_function:
                                  async ('async')
                                  formal_parameters:
                                    ( ('(')
                                    identifier ('t')
                                    ) (')')
                                  => ('=>')
                                  statement_block:
                                    { ('{')
                                    expression_statement:
                                      call_expression:
                                        member_expression:
                                          identifier ('t')
                                          . ('.')
                                          property_identifier ('tryCompile')
                                        arguments:
                                          ( ('(')
                                          ) (')')
                                      ; (';')
                                    comment ("// this doesn't do anything =D")
                                    lexical_declaration:
                                      const ('const')
                                      variable_declarator:
                                        identifier ('arraycompiled')
                                        = ('=')
                                        call_expression:
                                          member_expression:
                                            this ('this')
                                            . ('.')
                                            property_identifier ('compile')
                                          arguments:
                                            ( ('(')
                                            identifier ('util')
                                            , (',')
                                            subscript_expression:
                                              identifier ('threads')
                                              [ ('[')
                                              number ('0')
                                              ] (']')
                                            , (',')
                                            member_expression:
                                              member_expression:
                                                subscript_expression:
                                                  identifier ('threads')
                                                  [ ('[')
                                                  number ('0')
                                                  ] (']')
                                                . ('.')
                                                property_identifier ('blockContainer')
                                              . ('.')
                                              property_identifier ('_blocks')
                                            , (',')
                                            member_expression:
                                              subscript_expression:
                                                identifier ('threads')
                                                [ ('[')
                                                number ('0')
                                                ] (']')
                                              . ('.')
                                              property_identifier ('topBlock')
                                            , (',')
                                            false ('false')
                                            ) (')')
                                      ; (';')
                                    expression_statement:
                                      call_expression:
                                        member_expression:
                                          identifier ('console')
                                          . ('.')
                                          property_identifier ('log')
                                        arguments:
                                          ( ('(')
                                          identifier ('arraycompiled')
                                          ) (')')
                                      ; (';')
                                    lexical_declaration:
                                      const ('const')
                                      variable_declarator:
                                        identifier ('compiled')
                                        = ('=')
                                        call_expression:
                                          member_expression:
                                            this ('this')
                                            . ('.')
                                            property_identifier ('genWGSL')
                                          arguments:
                                            ( ('(')
                                            identifier ('util')
                                            , (',')
                                            identifier ('arraycompiled')
                                            , (',')
                                            number ('0')
                                            ) (')')
                                      ; (';')
                                    expression_statement:
                                      call_expression:
                                        member_expression:
                                          identifier ('console')
                                          . ('.')
                                          property_identifier ('log')
                                        arguments:
                                          ( ('(')
                                          identifier ('compiled')
                                          ) (')')
                                      ; (';')
                                    comment ('//let idkman = this.genInputTree(util, t, t.blockContainer._blocks, t.topBlock, true)')
                                    lexical_declaration:
                                      let ('let')
                                      variable_declarator:
                                        identifier ('bglInput')
                                        = ('=')
                                        subscript_expression:
                                          member_expression:
                                            member_expression:
                                              identifier ('t')
                                              . ('.')
                                              property_identifier ('blockContainer')
                                            . ('.')
                                            property_identifier ('_blocks')
                                          [ ('[')
                                          member_expression:
                                            member_expression:
                                              member_expression:
                                                subscript_expression:
                                                  member_expression:
                                                    member_expression:
                                                      identifier ('t')
                                                      . ('.')
                                                      property_identifier ('blockContainer')
                                                    . ('.')
                                                    property_identifier ('_blocks')
                                                  [ ('[')
                                                  member_expression:
                                                    identifier ('t')
                                                    . ('.')
                                                    property_identifier ('topBlock')
                                                  ] (']')
                                                . ('.')
                                                property_identifier ('inputs')
                                              . ('.')
                                              property_identifier ('BGL')
                                            . ('.')
                                            property_identifier ('block')
                                          ] (']')
                                      ; (';')
                                    lexical_declaration:
                                      let ('let')
                                      variable_declarator:
                                        identifier ('nameInput')
                                        = ('=')
                                        subscript_expression:
                                          member_expression:
                                            member_expression:
                                              identifier ('t')
                                              . ('.')
                                              property_identifier ('blockContainer')
                                            . ('.')
                                            property_identifier ('_blocks')
                                          [ ('[')
                                          member_expression:
                                            member_expression:
                                              member_expression:
                                                subscript_expression:
                                                  member_expression:
                                                    member_expression:
                                                      identifier ('t')
                                                      . ('.')
                                                      property_identifier ('blockContainer')
                                                    . ('.')
                                                    property_identifier ('_blocks')
                                                  [ ('[')
                                                  member_expression:
                                                    identifier ('t')
                                                    . ('.')
                                                    property_identifier ('topBlock')
                                                  ] (']')
                                                . ('.')
                                                property_identifier ('inputs')
                                              . ('.')
                                              property_identifier ('NAME')
                                            . ('.')
                                            property_identifier ('block')
                                          ] (']')
                                      ; (';')
                                    if_statement:
                                      if ('if')
                                      parenthesized_expression:
                                        ( ('(')
                                        binary_expression:
                                          binary_expression:
                                            member_expression:
                                              identifier ('nameInput')
                                              . ('.')
                                              property_identifier ('opcode')
                                            != ('!=')
                                            string:
                                              " ('"')
                                              string_fragment ('text')
                                              " ('"')
                                          || ('||')
                                          binary_expression:
                                            member_expression:
                                              identifier ('bglInput')
                                              . ('.')
                                              property_identifier ('opcode')
                                            != ('!=')
                                            string:
                                              " ('"')
                                              string_fragment ('text')
                                              " ('"')
                                        ) (')')
                                      statement_block:
                                        { ('{')
                                        expression_statement:
                                          call_expression:
                                            member_expression:
                                              this ('this')
                                              . ('.')
                                              property_identifier ('throwError')
                                            arguments:
                                              ( ('(')
                                              string:
                                                " ('"')
                                                string_fragment ('UnexpectedInput')
                                                " ('"')
                                              , (',')
                                              string:
                                                " ('"')
                                                string_fragment ('Unexpected input for block input!')
                                                " ('"')
                                              , (',')
                                              string:
                                                " ('"')
                                                string_fragment ('ShaderDefinition')
                                                " ('"')
                                              , (',')
                                              string:
                                                " ('"')
                                                string_fragment ('Shader name and bind group layout cannot have inputs!')
                                                " ('"')
                                              , (',')
                                              identifier ('util')
                                              ) (')')
                                          ; (';')
                                        } ('}')
                                      else_clause:
                                        else ('else')
                                        if_statement:
                                          if ('if')
                                          parenthesized_expression:
                                            ( ('(')
                                            unary_expression:
                                              ! ('!')
                                              call_expression:
                                                member_expression:
                                                  member_expression:
                                                    member_expression:
                                                      identifier ('Object')
                                                      . ('.')
                                                      property_identifier ('prototype')
                                                    . ('.')
                                                    property_identifier ('hasOwnProperty')
                                                  . ('.')
                                                  property_identifier ('call')
                                                arguments:
                                                  ( ('(')
                                                  member_expression:
                                                    identifier ('resources')
                                                    . ('.')
                                                    property_identifier ('bindGroupLayouts')
                                                  , (',')
                                                  member_expression:
                                                    member_expression:
                                                      member_expression:
                                                        identifier ('bglInput')
                                                        . ('.')
                                                        property_identifier ('fields')
                                                      . ('.')
                                                      property_identifier ('TEXT')
                                                    . ('.')
                                                    property_identifier ('value')
                                                  ) (')')
                                            ) (')')
                                          statement_block:
                                            { ('{')
                                            expression_statement:
                                              call_expression:
                                                member_expression:
                                                  this ('this')
                                                  . ('.')
                                                  property_identifier ('throwError')
                                                arguments:
                                                  ( ('(')
                                                  string:
                                                    " ('"')
                                                    string_fragment ('BindGroupLayoutNotFound')
                                                    " ('"')
                                                  , (',')
                                                  string:
                                                    " ('"')
                                                    string_fragment ('Bind group layout not found!')
                                                    " ('"')
                                                  , (',')
                                                  template_string:
                                                    ` ('`')
                                                    string_fragment ('Shader "')
                                                    template_substitution:
                                                      ${ ('${')
                                                      member_expression:
                                                        member_expression:
                                                          member_expression:
                                                            identifier ('nameInput')
                                                            . ('.')
                                                            property_identifier ('fields')
                                                          . ('.')
                                                          property_identifier ('TEXT')
                                                        . ('.')
                                                        property_identifier ('value')
                                                      } ('}')
                                                    string_fragment ('"')
                                                    ` ('`')
                                                  , (',')
                                                  template_string:
                                                    ` ('`')
                                                    string_fragment ('Couldn\'t find bind group layout"')
                                                    template_substitution:
                                                      ${ ('${')
                                                      member_expression:
                                                        member_expression:
                                                          member_expression:
                                                            identifier ('bglInput')
                                                            . ('.')
                                                            property_identifier ('fields')
                                                          . ('.')
                                                          property_identifier ('TEXT')
                                                        . ('.')
                                                        property_identifier ('value')
                                                      } ('}')
                                                    string_fragment ('", make sure to define it before compiling!')
                                                    ` ('`')
                                                  , (',')
                                                  identifier ('util')
                                                  ) (')')
                                              ; (';')
                                            } ('}')
                                          else_clause:
                                            else ('else')
                                            statement_block:
                                              { ('{')
                                              lexical_declaration:
                                                let ('let')
                                                variable_declarator:
                                                  identifier ('funcname')
                                                  = ('=')
                                                  member_expression:
                                                    member_expression:
                                                      member_expression:
                                                        identifier ('nameInput')
                                                        . ('.')
                                                        property_identifier ('fields')
                                                      . ('.')
                                                      property_identifier ('TEXT')
                                                    . ('.')
                                                    property_identifier ('value')
                                                ; (';')
                                              expression_statement:
                                                call_expression:
                                                  member_expression:
                                                    member_expression:
                                                      this ('this')
                                                      . ('.')
                                                      property_identifier ('device')
                                                    . ('.')
                                                    property_identifier ('pushErrorScope')
                                                  arguments:
                                                    ( ('(')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('internal')
                                                      " ('"')
                                                    ) (')')
                                                ; (';')
                                              expression_statement:
                                                call_expression:
                                                  member_expression:
                                                    member_expression:
                                                      this ('this')
                                                      . ('.')
                                                      property_identifier ('device')
                                                    . ('.')
                                                    property_identifier ('pushErrorScope')
                                                  arguments:
                                                    ( ('(')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('validation')
                                                      " ('"')
                                                    ) (')')
                                                ; (';')
                                              lexical_declaration:
                                                const ('const')
                                                variable_declarator:
                                                  identifier ('shaderModule')
                                                  = ('=')
                                                  call_expression:
                                                    member_expression:
                                                      member_expression:
                                                        this ('this')
                                                        . ('.')
                                                        property_identifier ('device')
                                                      . ('.')
                                                      property_identifier ('createShaderModule')
                                                    arguments:
                                                      ( ('(')
                                                      object:
                                                        { ('{')
                                                        pair:
                                                          property_identifier ('label')
                                                          : (':')
                                                          template_string:
                                                            ` ('`')
                                                            string_fragment ('Shader "')
                                                            template_substitution:
                                                              ${ ('${')
                                                              identifier ('funcname')
                                                              } ('}')
                                                            string_fragment ('"')
                                                            ` ('`')
                                                        , (',')
                                                        pair:
                                                          property_identifier ('code')
                                                          : (':')
                                                          identifier ('compiled')
                                                        , (',')
                                                        } ('}')
                                                      ) (')')
                                                ; (';')
                                              lexical_declaration:
                                                let ('let')
                                                variable_declarator:
                                                  identifier ('errored')
                                                  = ('=')
                                                  false ('false')
                                                ; (';')
                                              expression_statement:
                                                call_expression:
                                                  member_expression:
                                                    call_expression:
                                                      member_expression:
                                                        member_expression:
                                                          this ('this')
                                                          . ('.')
                                                          property_identifier ('device')
                                                        . ('.')
                                                        property_identifier ('popErrorScope')
                                                      arguments:
                                                        ( ('(')
                                                        ) (')')
                                                    . ('.')
                                                    property_identifier ('then')
                                                  arguments:
                                                    ( ('(')
                                                    arrow_function:
                                                      formal_parameters:
                                                        ( ('(')
                                                        identifier ('error')
                                                        ) (')')
                                                      => ('=>')
                                                      statement_block:
                                                        { ('{')
                                                        if_statement:
                                                          if ('if')
                                                          parenthesized_expression:
                                                            ( ('(')
                                                            identifier ('error')
                                                            ) (')')
                                                          statement_block:
                                                            { ('{')
                                                            expression_statement:
                                                              call_expression:
                                                                member_expression:
                                                                  this ('this')
                                                                  . ('.')
                                                                  property_identifier ('throwError')
                                                                arguments:
                                                                  ( ('(')
                                                                  string:
                                                                    " ('"')
                                                                    string_fragment ('ShaderCreationError')
                                                                    " ('"')
                                                                  , (',')
                                                                  member_expression:
                                                                    identifier ('error')
                                                                    . ('.')
                                                                    property_identifier ('message')
                                                                  , (',')
                                                                  string:
                                                                    " ('"')
                                                                    string_fragment ('ShaderModuleCreation')
                                                                    " ('"')
                                                                  , (',')
                                                                  identifier ('error')
                                                                  , (',')
                                                                  identifier ('util')
                                                                  ) (')')
                                                              ; (';')
                                                            expression_statement:
                                                              assignment_expression:
                                                                identifier ('errored')
                                                                = ('=')
                                                                true ('true')
                                                              ; (';')
                                                            } ('}')
                                                        } ('}')
                                                    ) (')')
                                                ; (';')
                                              expression_statement:
                                                call_expression:
                                                  member_expression:
                                                    call_expression:
                                                      member_expression:
                                                        member_expression:
                                                          this ('this')
                                                          . ('.')
                                                          property_identifier ('device')
                                                        . ('.')
                                                        property_identifier ('popErrorScope')
                                                      arguments:
                                                        ( ('(')
                                                        ) (')')
                                                    . ('.')
                                                    property_identifier ('then')
                                                  arguments:
                                                    ( ('(')
                                                    arrow_function:
                                                      formal_parameters:
                                                        ( ('(')
                                                        identifier ('error')
                                                        ) (')')
                                                      => ('=>')
                                                      statement_block:
                                                        { ('{')
                                                        if_statement:
                                                          if ('if')
                                                          parenthesized_expression:
                                                            ( ('(')
                                                            identifier ('error')
                                                            ) (')')
                                                          statement_block:
                                                            { ('{')
                                                            expression_statement:
                                                              call_expression:
                                                                member_expression:
                                                                  this ('this')
                                                                  . ('.')
                                                                  property_identifier ('throwError')
                                                                arguments:
                                                                  ( ('(')
                                                                  string:
                                                                    " ('"')
                                                                    string_fragment ('ShaderCreationError')
                                                                    " ('"')
                                                                  , (',')
                                                                  member_expression:
                                                                    identifier ('error')
                                                                    . ('.')
                                                                    property_identifier ('message')
                                                                  , (',')
                                                                  string:
                                                                    " ('"')
                                                                    string_fragment ('ShaderModuleCreation')
                                                                    " ('"')
                                                                  , (',')
                                                                  identifier ('error')
                                                                  , (',')
                                                                  identifier ('util')
                                                                  ) (')')
                                                              ; (';')
                                                            expression_statement:
                                                              assignment_expression:
                                                                identifier ('errored')
                                                                = ('=')
                                                                true ('true')
                                                              ; (';')
                                                            } ('}')
                                                        } ('}')
                                                    ) (')')
                                                ; (';')
                                              expression_statement:
                                                assignment_expression:
                                                  subscript_expression:
                                                    identifier ('shaders')
                                                    [ ('[')
                                                    identifier ('funcname')
                                                    ] (']')
                                                  = ('=')
                                                  object:
                                                    { ('{')
                                                    pair:
                                                      property_identifier ('name')
                                                      : (':')
                                                      identifier ('funcname')
                                                    , (',')
                                                    } ('}')
                                                ; (';')
                                              lexical_declaration:
                                                let ('let')
                                                variable_declarator:
                                                  identifier ('shader')
                                                  = ('=')
                                                  subscript_expression:
                                                    identifier ('shaders')
                                                    [ ('[')
                                                    identifier ('funcname')
                                                    ] (']')
                                                ; (';')
                                              lexical_declaration:
                                                const ('const')
                                                variable_declarator:
                                                  identifier ('compilationinfo')
                                                  = ('=')
                                                  await_expression:
                                                    await ('await')
                                                    call_expression:
                                                      member_expression:
                                                        identifier ('shaderModule')
                                                        . ('.')
                                                        property_identifier ('getCompilationInfo')
                                                      arguments:
                                                        ( ('(')
                                                        ) (')')
                                                ; (';')
                                              expression_statement:
                                                call_expression:
                                                  member_expression:
                                                    identifier ('console')
                                                    . ('.')
                                                    property_identifier ('log')
                                                  arguments:
                                                    ( ('(')
                                                    identifier ('compilationinfo')
                                                    ) (')')
                                                ; (';')
                                              for_in_statement:
                                                for ('for')
                                                ( ('(')
                                                const ('const')
                                                identifier ('message')
                                                of ('of')
                                                member_expression:
                                                  identifier ('compilationinfo')
                                                  . ('.')
                                                  property_identifier ('messages')
                                                ) (')')
                                                statement_block:
                                                  { ('{')
                                                  expression_statement:
                                                    call_expression:
                                                      member_expression:
                                                        this ('this')
                                                        . ('.')
                                                        property_identifier ('throwError')
                                                      arguments:
                                                        ( ('(')
                                                        string:
                                                          " ('"')
                                                          string_fragment ('WGSLError')
                                                          " ('"')
                                                        , (',')
                                                        member_expression:
                                                          identifier ('message')
                                                          . ('.')
                                                          property_identifier ('message')
                                                        , (',')
                                                        template_string:
                                                          ` ('`')
                                                          string_fragment ('ShaderCreation')
                                                          ` ('`')
                                                        , (',')
                                                        template_string:
                                                          ` ('`')
                                                          string_fragment ('Error parsing WGSL in shader "')
                                                          template_substitution:
                                                            ${ ('${')
                                                            identifier ('funcname')
                                                            } ('}')
                                                          string_fragment ('": ')
                                                          template_substitution:
                                                            ${ ('${')
                                                            member_expression:
                                                              identifier ('message')
                                                              . ('.')
                                                              property_identifier ('message')
                                                            } ('}')
                                                          string_fragment (' - Line ')
                                                          template_substitution:
                                                            ${ ('${')
                                                            member_expression:
                                                              identifier ('message')
                                                              . ('.')
                                                              property_identifier ('lineNum')
                                                            } ('}')
                                                          string_fragment (':')
                                                          template_substitution:
                                                            ${ ('${')
                                                            member_expression:
                                                              identifier ('message')
                                                              . ('.')
                                                              property_identifier ('linePos')
                                                            } ('}')
                                                          string_fragment (' ')
                                                          template_substitution:
                                                            ${ ('${')
                                                            call_expression:
                                                              member_expression:
                                                                identifier ('compiled')
                                                                . ('.')
                                                                property_identifier ('substring')
                                                              arguments:
                                                                ( ('(')
                                                                call_expression:
                                                                  member_expression:
                                                                    identifier ('Math')
                                                                    . ('.')
                                                                    property_identifier ('max')
                                                                  arguments:
                                                                    ( ('(')
                                                                    number ('0')
                                                                    , (',')
                                                                    binary_expression:
                                                                      member_expression:
                                                                        identifier ('message')
                                                                        . ('.')
                                                                        property_identifier ('offset')
                                                                      - ('-')
                                                                      number ('15')
                                                                    ) (')')
                                                                , (',')
                                                                member_expression:
                                                                  identifier ('message')
                                                                  . ('.')
                                                                  property_identifier ('offset')
                                                                ) (')')
                                                            } ('}')
                                                          string_fragment ('**')
                                                          template_substitution:
                                                            ${ ('${')
                                                            call_expression:
                                                              member_expression:
                                                                identifier ('compiled')
                                                                . ('.')
                                                                property_identifier ('substring')
                                                              arguments:
                                                                ( ('(')
                                                                member_expression:
                                                                  identifier ('message')
                                                                  . ('.')
                                                                  property_identifier ('offset')
                                                                , (',')
                                                                binary_expression:
                                                                  member_expression:
                                                                    identifier ('message')
                                                                    . ('.')
                                                                    property_identifier ('offset')
                                                                  + ('+')
                                                                  member_expression:
                                                                    identifier ('message')
                                                                    . ('.')
                                                                    property_identifier ('length')
                                                                ) (')')
                                                            } ('}')
                                                          string_fragment ('**')
                                                          template_substitution:
                                                            ${ ('${')
                                                            call_expression:
                                                              member_expression:
                                                                identifier ('compiled')
                                                                . ('.')
                                                                property_identifier ('substring')
                                                              arguments:
                                                                ( ('(')
                                                                binary_expression:
                                                                  member_expression:
                                                                    identifier ('message')
                                                                    . ('.')
                                                                    property_identifier ('offset')
                                                                  + ('+')
                                                                  member_expression:
                                                                    identifier ('message')
                                                                    . ('.')
                                                                    property_identifier ('length')
                                                                , (',')
                                                                call_expression:
                                                                  member_expression:
                                                                    identifier ('Math')
                                                                    . ('.')
                                                                    property_identifier ('min')
                                                                  arguments:
                                                                    ( ('(')
                                                                    member_expression:
                                                                      identifier ('compiled')
                                                                      . ('.')
                                                                      property_identifier ('length')
                                                                    , (',')
                                                                    binary_expression:
                                                                      binary_expression:
                                                                        member_expression:
                                                                          identifier ('message')
                                                                          . ('.')
                                                                          property_identifier ('offset')
                                                                        + ('+')
                                                                        member_expression:
                                                                          identifier ('message')
                                                                          . ('.')
                                                                          property_identifier ('length')
                                                                      + ('+')
                                                                      number ('15')
                                                                    ) (')')
                                                                ) (')')
                                                            } ('}')
                                                          ` ('`')
                                                        ) (')')
                                                    ; (';')
                                                  expression_statement:
                                                    assignment_expression:
                                                      identifier ('errored')
                                                      = ('=')
                                                      true ('true')
                                                    ; (';')
                                                  } ('}')
                                              expression_statement:
                                                call_expression:
                                                  member_expression:
                                                    member_expression:
                                                      this ('this')
                                                      . ('.')
                                                      property_identifier ('device')
                                                    . ('.')
                                                    property_identifier ('pushErrorScope')
                                                  arguments:
                                                    ( ('(')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('validation')
                                                      " ('"')
                                                    ) (')')
                                                ; (';')
                                              expression_statement:
                                                call_expression:
                                                  member_expression:
                                                    member_expression:
                                                      this ('this')
                                                      . ('.')
                                                      property_identifier ('device')
                                                    . ('.')
                                                    property_identifier ('pushErrorScope')
                                                  arguments:
                                                    ( ('(')
                                                    string:
                                                      " ('"')
                                                      string_fragment ('internal')
                                                      " ('"')
                                                    ) (')')
                                                ; (';')
                                              expression_statement:
                                                assignment_expression:
                                                  member_expression:
                                                    identifier ('shader')
                                                    . ('.')
                                                    property_identifier ('computePipeline')
                                                  = ('=')
                                                  call_expression:
                                                    member_expression:
                                                      member_expression:
                                                        this ('this')
                                                        . ('.')
                                                        property_identifier ('device')
                                                      . ('.')
                                                      property_identifier ('createComputePipeline')
                                                    arguments:
                                                      ( ('(')
                                                      object:
                                                        { ('{')
                                                        pair:
                                                          property_identifier ('layout')
                                                          : (':')
                                                          call_expression:
                                                            member_expression:
                                                              member_expression:
                                                                this ('this')
                                                                . ('.')
                                                                property_identifier ('device')
                                                              . ('.')
                                                              property_identifier ('createPipelineLayout')
                                                            arguments:
                                                              ( ('(')
                                                              object:
                                                                { ('{')
                                                                pair:
                                                                  property_identifier ('bindGroupLayouts')
                                                                  : (':')
                                                                  array:
                                                                    [ ('[')
                                                                    subscript_expression:
                                                                      member_expression:
                                                                        identifier ('resources')
                                                                        . ('.')
                                                                        property_identifier ('bindGroupLayouts')
                                                                      [ ('[')
                                                                      member_expression:
                                                                        member_expression:
                                                                          member_expression:
                                                                            identifier ('bglInput')
                                                                            . ('.')
                                                                            property_identifier ('fields')
                                                                          . ('.')
                                                                          property_identifier ('TEXT')
                                                                        . ('.')
                                                                        property_identifier ('value')
                                                                      ] (']')
                                                                    , (',')
                                                                    ] (']')
                                                                , (',')
                                                                } ('}')
                                                              ) (')')
                                                        , (',')
                                                        pair:
                                                          property_identifier ('compute')
                                                          : (':')
                                                          object:
                                                            { ('{')
                                                            pair:
                                                              property_identifier ('module')
                                                              : (':')
                                                              identifier ('shaderModule')
                                                            , (',')
                                                            pair:
                                                              property_identifier ('entryPoint')
                                                              : (':')
                                                              string:
                                                                " ('"')
                                                                string_fragment ('computeShader')
                                                                " ('"')
                                                            , (',')
                                                            } ('}')
                                                        , (',')
                                                        } ('}')
                                                      ) (')')
                                                ; (';')
                                              expression_statement:
                                                call_expression:
                                                  member_expression:
                                                    call_expression:
                                                      member_expression:
                                                        member_expression:
                                                          this ('this')
                                                          . ('.')
                                                          property_identifier ('device')
                                                        . ('.')
                                                        property_identifier ('popErrorScope')
                                                      arguments:
                                                        ( ('(')
                                                        ) (')')
                                                    . ('.')
                                                    property_identifier ('then')
                                                  arguments:
                                                    ( ('(')
                                                    arrow_function:
                                                      formal_parameters:
                                                        ( ('(')
                                                        identifier ('error')
                                                        ) (')')
                                                      => ('=>')
                                                      statement_block:
                                                        { ('{')
                                                        if_statement:
                                                          if ('if')
                                                          parenthesized_expression:
                                                            ( ('(')
                                                            identifier ('error')
                                                            ) (')')
                                                          statement_block:
                                                            { ('{')
                                                            expression_statement:
                                                              call_expression:
                                                                member_expression:
                                                                  this ('this')
                                                                  . ('.')
                                                                  property_identifier ('throwError')
                                                                arguments:
                                                                  ( ('(')
                                                                  string:
                                                                    " ('"')
                                                                    string_fragment ('ComputePipelineError')
                                                                    " ('"')
                                                                  , (',')
                                                                  member_expression:
                                                                    identifier ('error')
                                                                    . ('.')
                                                                    property_identifier ('message')
                                                                  , (',')
                                                                  string:
                                                                    " ('"')
                                                                    string_fragment ('ComputePipelineCreation')
                                                                    " ('"')
                                                                  , (',')
                                                                  identifier ('error')
                                                                  , (',')
                                                                  identifier ('util')
                                                                  ) (')')
                                                              ; (';')
                                                            expression_statement:
                                                              assignment_expression:
                                                                identifier ('errored')
                                                                = ('=')
                                                                true ('true')
                                                              ; (';')
                                                            } ('}')
                                                        } ('}')
                                                    ) (')')
                                                ; (';')
                                              expression_statement:
                                                call_expression:
                                                  member_expression:
                                                    call_expression:
                                                      member_expression:
                                                        member_expression:
                                                          this ('this')
                                                          . ('.')
                                                          property_identifier ('device')
                                                        . ('.')
                                                        property_identifier ('popErrorScope')
                                                      arguments:
                                                        ( ('(')
                                                        ) (')')
                                                    . ('.')
                                                    property_identifier ('then')
                                                  arguments:
                                                    ( ('(')
                                                    arrow_function:
                                                      formal_parameters:
                                                        ( ('(')
                                                        identifier ('error')
                                                        ) (')')
                                                      => ('=>')
                                                      statement_block:
                                                        { ('{')
                                                        if_statement:
                                                          if ('if')
                                                          parenthesized_expression:
                                                            ( ('(')
                                                            identifier ('error')
                                                            ) (')')
                                                          statement_block:
                                                            { ('{')
                                                            expression_statement:
                                                              call_expression:
                                                                member_expression:
                                                                  this ('this')
                                                                  . ('.')
                                                                  property_identifier ('throwError')
                                                                arguments:
                                                                  ( ('(')
                                                                  string:
                                                                    " ('"')
                                                                    string_fragment ('ComputePipelineError')
                                                                    " ('"')
                                                                  , (',')
                                                                  member_expression:
                                                                    identifier ('error')
                                                                    . ('.')
                                                                    property_identifier ('message')
                                                                  , (',')
                                                                  string:
                                                                    " ('"')
                                                                    string_fragment ('ComputePipelineCreation')
                                                                    " ('"')
                                                                  , (',')
                                                                  identifier ('error')
                                                                  , (',')
                                                                  identifier ('util')
                                                                  ) (')')
                                                              ; (';')
                                                            expression_statement:
                                                              assignment_expression:
                                                                identifier ('errored')
                                                                = ('=')
                                                                true ('true')
                                                              ; (';')
                                                            } ('}')
                                                        } ('}')
                                                    ) (')')
                                                ; (';')
                                              comment ('// if (errored) delete shaders[funcname]')
                                              expression_statement:
                                                call_expression:
                                                  member_expression:
                                                    identifier ('console')
                                                    . ('.')
                                                    property_identifier ('log')
                                                  arguments:
                                                    ( ('(')
                                                    identifier ('errored')
                                                    ) (')')
                                                ; (';')
                                              } ('}')
                                    } ('}')
                                ) (')')
                          ; (';')
                        expression_statement:
                          call_expression:
                            member_expression:
                              identifier ('console')
                              . ('.')
                              property_identifier ('log')
                            arguments:
                              ( ('(')
                              identifier ('util')
                              ) (')')
                          ; (';')
                        comment ('//console.log(threads)')
                        comment ('// const e = this.compile(util,threads[0],threads[0].blockContainer._blocks,threads[0].topBlock,false)')
                        comment ('// const compiled = this.genWGSL(util, e, false, 0)')
                        comment ('// console.log(e)')
                        comment ('// console.log(compiled)')
                        } ('}')
                    } ('}')
                comment ("/*\n        compute shader reference implementation\n        https://developer.mozilla.org/en-US/docs/Web/API/WebGPU_API#basic_compute_pipeline\n\n            notes:\n            \n            most of this can stay the same across multiple modules, the only things that might change\n            are the different input buffers and their usage, but that can probably be generated\n            fairly easily\n\n            this documentation is horrible, i'm fairly sure the writer forgot they were writing about\n            compute shaders halfway through and then just decided to talk about render shaders\n\n            \n\n\n        */")
                method_definition:
                  property_identifier ('runGPU')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        unary_expression:
                          ! ('!')
                          call_expression:
                            member_expression:
                              member_expression:
                                member_expression:
                                  identifier ('Object')
                                  . ('.')
                                  property_identifier ('prototype')
                                . ('.')
                                property_identifier ('hasOwnProperty')
                              . ('.')
                              property_identifier ('call')
                            arguments:
                              ( ('(')
                              identifier ('shaders')
                              , (',')
                              member_expression:
                                identifier ('args')
                                . ('.')
                                property_identifier ('GPUFUNC')
                              ) (')')
                        ) (')')
                      statement_block:
                        { ('{')
                        expression_statement:
                          call_expression:
                            member_expression:
                              this ('this')
                              . ('.')
                              property_identifier ('throwError')
                            arguments:
                              ( ('(')
                              string:
                                " ('"')
                                string_fragment ('ShaderNotFound')
                                " ('"')
                              , (',')
                              string:
                                " ('"')
                                string_fragment ("Couldn't find specified shader!")
                                " ('"')
                              , (',')
                              string:
                                " ('"')
                                string_fragment ('RunShaderBlock')
                                " ('"')
                              , (',')
                              binary_expression:
                                binary_expression:
                                  string:
                                    " ('"')
                                    string_fragment ("Couldn't find shader ")
                                    escape_sequence ('\\"')
                                    " ('"')
                                  + ('+')
                                  call_expression:
                                    member_expression:
                                      member_expression:
                                        identifier ('Scratch')
                                        . ('.')
                                        property_identifier ('Cast')
                                      . ('.')
                                      property_identifier ('toString')
                                    arguments:
                                      ( ('(')
                                      member_expression:
                                        identifier ('args')
                                        . ('.')
                                        property_identifier ('GPUFUNC')
                                      ) (')')
                                + ('+')
                                string:
                                  ' ("'")
                                  string_fragment ('"!')
                                  ' ("'")
                              , (',')
                              identifier ('util')
                              ) (')')
                          ; (';')
                        return_statement:
                          return ('return')
                          ; (';')
                        } ('}')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        unary_expression:
                          ! ('!')
                          call_expression:
                            member_expression:
                              member_expression:
                                member_expression:
                                  identifier ('Object')
                                  . ('.')
                                  property_identifier ('prototype')
                                . ('.')
                                property_identifier ('hasOwnProperty')
                              . ('.')
                              property_identifier ('call')
                            arguments:
                              ( ('(')
                              member_expression:
                                identifier ('resources')
                                . ('.')
                                property_identifier ('bindGroups')
                              , (',')
                              call_expression:
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('Cast')
                                  . ('.')
                                  property_identifier ('toString')
                                arguments:
                                  ( ('(')
                                  member_expression:
                                    identifier ('args')
                                    . ('.')
                                    property_identifier ('BINDGROUP')
                                  ) (')')
                              ) (')')
                        ) (')')
                      statement_block:
                        { ('{')
                        expression_statement:
                          call_expression:
                            member_expression:
                              this ('this')
                              . ('.')
                              property_identifier ('throwError')
                            arguments:
                              ( ('(')
                              string:
                                " ('"')
                                string_fragment ('BindGroupNotFound')
                                " ('"')
                              , (',')
                              string:
                                " ('"')
                                string_fragment ("Couldn't find specified bind group!")
                                " ('"')
                              , (',')
                              string:
                                " ('"')
                                string_fragment ('RunShaderBlock')
                                " ('"')
                              , (',')
                              binary_expression:
                                binary_expression:
                                  string:
                                    " ('"')
                                    string_fragment ("Couldn't find bind group ")
                                    escape_sequence ('\\"')
                                    " ('"')
                                  + ('+')
                                  call_expression:
                                    member_expression:
                                      member_expression:
                                        identifier ('Scratch')
                                        . ('.')
                                        property_identifier ('Cast')
                                      . ('.')
                                      property_identifier ('toString')
                                    arguments:
                                      ( ('(')
                                      member_expression:
                                        identifier ('args')
                                        . ('.')
                                        property_identifier ('BINDGROUP')
                                      ) (')')
                                + ('+')
                                string:
                                  ' ("'")
                                  string_fragment ('"!')
                                  ' ("'")
                              , (',')
                              identifier ('util')
                              ) (')')
                          ; (';')
                        return_statement:
                          return ('return')
                          ; (';')
                        } ('}')
                    lexical_declaration:
                      let ('let')
                      variable_declarator:
                        identifier ('shader')
                        = ('=')
                        subscript_expression:
                          identifier ('shaders')
                          [ ('[')
                          member_expression:
                            identifier ('args')
                            . ('.')
                            property_identifier ('GPUFUNC')
                          ] (']')
                      ; (';')
                    expression_statement:
                      call_expression:
                        member_expression:
                          member_expression:
                            this ('this')
                            . ('.')
                            property_identifier ('device')
                          . ('.')
                          property_identifier ('pushErrorScope')
                        arguments:
                          ( ('(')
                          string:
                            " ('"')
                            string_fragment ('validation')
                            " ('"')
                          ) (')')
                      ; (';')
                    expression_statement:
                      call_expression:
                        member_expression:
                          member_expression:
                            this ('this')
                            . ('.')
                            property_identifier ('device')
                          . ('.')
                          property_identifier ('pushErrorScope')
                        arguments:
                          ( ('(')
                          string:
                            " ('"')
                            string_fragment ('internal')
                            " ('"')
                          ) (')')
                      ; (';')
                    expression_statement:
                      call_expression:
                        member_expression:
                          member_expression:
                            this ('this')
                            . ('.')
                            property_identifier ('device')
                          . ('.')
                          property_identifier ('pushErrorScope')
                        arguments:
                          ( ('(')
                          string:
                            " ('"')
                            string_fragment ('out-of-memory')
                            " ('"')
                          ) (')')
                      ; (';')
                    lexical_declaration:
                      const ('const')
                      variable_declarator:
                        identifier ('commandEncoder')
                        = ('=')
                        call_expression:
                          member_expression:
                            member_expression:
                              this ('this')
                              . ('.')
                              property_identifier ('device')
                            . ('.')
                            property_identifier ('createCommandEncoder')
                          arguments:
                            ( ('(')
                            ) (')')
                      ; (';')
                    lexical_declaration:
                      const ('const')
                      variable_declarator:
                        identifier ('passEncoder')
                        = ('=')
                        call_expression:
                          member_expression:
                            identifier ('commandEncoder')
                            . ('.')
                            property_identifier ('beginComputePass')
                          arguments:
                            ( ('(')
                            ) (')')
                      ; (';')
                    expression_statement:
                      call_expression:
                        member_expression:
                          identifier ('passEncoder')
                          . ('.')
                          property_identifier ('setPipeline')
                        arguments:
                          ( ('(')
                          member_expression:
                            identifier ('shader')
                            . ('.')
                            property_identifier ('computePipeline')
                          ) (')')
                      ; (';')
                    expression_statement:
                      call_expression:
                        member_expression:
                          identifier ('passEncoder')
                          . ('.')
                          property_identifier ('setBindGroup')
                        arguments:
                          ( ('(')
                          number ('0')
                          , (',')
                          subscript_expression:
                            member_expression:
                              identifier ('resources')
                              . ('.')
                              property_identifier ('bindGroups')
                            [ ('[')
                            call_expression:
                              member_expression:
                                member_expression:
                                  identifier ('Scratch')
                                  . ('.')
                                  property_identifier ('Cast')
                                . ('.')
                                property_identifier ('toString')
                              arguments:
                                ( ('(')
                                member_expression:
                                  identifier ('args')
                                  . ('.')
                                  property_identifier ('BINDGROUP')
                                ) (')')
                            ] (']')
                          ) (')')
                      ; (';')
                    expression_statement:
                      call_expression:
                        member_expression:
                          identifier ('passEncoder')
                          . ('.')
                          property_identifier ('dispatchWorkgroups')
                        arguments:
                          ( ('(')
                          call_expression:
                            member_expression:
                              member_expression:
                                identifier ('Scratch')
                                . ('.')
                                property_identifier ('Cast')
                              . ('.')
                              property_identifier ('toNumber')
                            arguments:
                              ( ('(')
                              member_expression:
                                identifier ('args')
                                . ('.')
                                property_identifier ('X')
                              ) (')')
                          , (',')
                          call_expression:
                            member_expression:
                              member_expression:
                                identifier ('Scratch')
                                . ('.')
                                property_identifier ('Cast')
                              . ('.')
                              property_identifier ('toNumber')
                            arguments:
                              ( ('(')
                              member_expression:
                                identifier ('args')
                                . ('.')
                                property_identifier ('Y')
                              ) (')')
                          , (',')
                          call_expression:
                            member_expression:
                              member_expression:
                                identifier ('Scratch')
                                . ('.')
                                property_identifier ('Cast')
                              . ('.')
                              property_identifier ('toNumber')
                            arguments:
                              ( ('(')
                              member_expression:
                                identifier ('args')
                                . ('.')
                                property_identifier ('Z')
                              ) (')')
                          ) (')')
                      ; (';')
                    expression_statement:
                      call_expression:
                        member_expression:
                          identifier ('passEncoder')
                          . ('.')
                          property_identifier ('end')
                        arguments:
                          ( ('(')
                          ) (')')
                      ; (';')
                    expression_statement:
                      call_expression:
                        member_expression:
                          member_expression:
                            member_expression:
                              this ('this')
                              . ('.')
                              property_identifier ('device')
                            . ('.')
                            property_identifier ('queue')
                          . ('.')
                          property_identifier ('submit')
                        arguments:
                          ( ('(')
                          array:
                            [ ('[')
                            call_expression:
                              member_expression:
                                identifier ('commandEncoder')
                                . ('.')
                                property_identifier ('finish')
                              arguments:
                                ( ('(')
                                ) (')')
                            ] (']')
                          ) (')')
                      ; (';')
                    expression_statement:
                      call_expression:
                        member_expression:
                          call_expression:
                            member_expression:
                              member_expression:
                                this ('this')
                                . ('.')
                                property_identifier ('device')
                              . ('.')
                              property_identifier ('popErrorScope')
                            arguments:
                              ( ('(')
                              ) (')')
                          . ('.')
                          property_identifier ('then')
                        arguments:
                          ( ('(')
                          arrow_function:
                            formal_parameters:
                              ( ('(')
                              identifier ('error')
                              ) (')')
                            => ('=>')
                            statement_block:
                              { ('{')
                              if_statement:
                                if ('if')
                                parenthesized_expression:
                                  ( ('(')
                                  identifier ('error')
                                  ) (')')
                                expression_statement:
                                  call_expression:
                                    member_expression:
                                      this ('this')
                                      . ('.')
                                      property_identifier ('throwError')
                                    arguments:
                                      ( ('(')
                                      string:
                                        " ('"')
                                        string_fragment ('UnclassifiedRuntimeErrorOOM')
                                        " ('"')
                                      , (',')
                                      member_expression:
                                        identifier ('error')
                                        . ('.')
                                        property_identifier ('message')
                                      , (',')
                                      string:
                                        " ('"')
                                        string_fragment ('RunShaderBlock')
                                        " ('"')
                                      , (',')
                                      identifier ('error')
                                      , (',')
                                      identifier ('util')
                                      ) (')')
                                  ; (';')
                              } ('}')
                          ) (')')
                      ; (';')
                    expression_statement:
                      call_expression:
                        member_expression:
                          call_expression:
                            member_expression:
                              member_expression:
                                this ('this')
                                . ('.')
                                property_identifier ('device')
                              . ('.')
                              property_identifier ('popErrorScope')
                            arguments:
                              ( ('(')
                              ) (')')
                          . ('.')
                          property_identifier ('then')
                        arguments:
                          ( ('(')
                          arrow_function:
                            formal_parameters:
                              ( ('(')
                              identifier ('error')
                              ) (')')
                            => ('=>')
                            statement_block:
                              { ('{')
                              if_statement:
                                if ('if')
                                parenthesized_expression:
                                  ( ('(')
                                  identifier ('error')
                                  ) (')')
                                expression_statement:
                                  call_expression:
                                    member_expression:
                                      this ('this')
                                      . ('.')
                                      property_identifier ('throwError')
                                    arguments:
                                      ( ('(')
                                      string:
                                        " ('"')
                                        string_fragment ('UnclassifiedRuntimeError')
                                        " ('"')
                                      , (',')
                                      member_expression:
                                        identifier ('error')
                                        . ('.')
                                        property_identifier ('message')
                                      , (',')
                                      string:
                                        " ('"')
                                        string_fragment ('RunShaderBlock')
                                        " ('"')
                                      , (',')
                                      identifier ('error')
                                      , (',')
                                      identifier ('util')
                                      ) (')')
                                  ; (';')
                              } ('}')
                          ) (')')
                      ; (';')
                    expression_statement:
                      call_expression:
                        member_expression:
                          call_expression:
                            member_expression:
                              member_expression:
                                this ('this')
                                . ('.')
                                property_identifier ('device')
                              . ('.')
                              property_identifier ('popErrorScope')
                            arguments:
                              ( ('(')
                              ) (')')
                          . ('.')
                          property_identifier ('then')
                        arguments:
                          ( ('(')
                          arrow_function:
                            formal_parameters:
                              ( ('(')
                              identifier ('error')
                              ) (')')
                            => ('=>')
                            statement_block:
                              { ('{')
                              if_statement:
                                if ('if')
                                parenthesized_expression:
                                  ( ('(')
                                  identifier ('error')
                                  ) (')')
                                expression_statement:
                                  call_expression:
                                    member_expression:
                                      this ('this')
                                      . ('.')
                                      property_identifier ('throwError')
                                    arguments:
                                      ( ('(')
                                      string:
                                        " ('"')
                                        string_fragment ('UnclassifiedRuntimeError')
                                        " ('"')
                                      , (',')
                                      member_expression:
                                        identifier ('error')
                                        . ('.')
                                        property_identifier ('message')
                                      , (',')
                                      string:
                                        " ('"')
                                        string_fragment ('RunShaderBlock')
                                        " ('"')
                                      , (',')
                                      identifier ('error')
                                      , (',')
                                      identifier ('util')
                                      ) (')')
                                  ; (';')
                              } ('}')
                          ) (')')
                      ; (';')
                    comment ('//console.log("yay the function ran without errors =D")')
                    } ('}')
                method_definition:
                  property_identifier ('compileHat')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    } ('}')
                method_definition:
                  property_identifier ('getVar')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    return_statement:
                      return ('return')
                      string:
                        " ('"')
                        string_fragment ('This block lets you get variables in your shader.')
                        " ('"')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('declareVar')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    } ('}')
                method_definition:
                  property_identifier ('varOp')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    } ('}')
                method_definition:
                  property_identifier ('wgslFunc')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    return_statement:
                      return ('return')
                      string:
                        " ('"')
                        string_fragment ('This block has a bunch of WGSL builtin functions.')
                        " ('"')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('funcArgs')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    return_statement:
                      return ('return')
                      string:
                        " ('"')
                        string_fragment ('Chain multiple of this block together to create function inputs.')
                        " ('"')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('computeFunc')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    } ('}')
                method_definition:
                  property_identifier ('wgslForLoop')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    } ('}')
                method_definition:
                  property_identifier ('defFunc')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    } ('}')
                method_definition:
                  property_identifier ('defFuncArgs')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    return_statement:
                      return ('return')
                      string:
                        " ('"')
                        string_fragment ('This is used to add arguments to your functions.')
                        " ('"')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('getFuncArg')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    return_statement:
                      return ('return')
                      string:
                        " ('"')
                        string_fragment ('Use this block to get the value of an argument you defined using the def function arg block.')
                        " ('"')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('funcReturn')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    } ('}')
                method_definition:
                  property_identifier ('c_runFunc')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    } ('}')
                method_definition:
                  property_identifier ('r_runFunc')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    return_statement:
                      return ('return')
                      string:
                        " ('"')
                        string_fragment ('This block will run a given function and return the output.')
                        " ('"')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('gpuFuncArgDef')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    return_statement:
                      return ('return')
                      string:
                        " ('"')
                        string_fragment ('This is used to add input arguments to your shaders.')
                        " ('"')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('bindInput')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    } ('}')
                method_definition:
                  property_identifier ('typeConstructor')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    return_statement:
                      return ('return')
                      string:
                        " ('"')
                        string_fragment ('This block lets you constructor types. You can put this block inside of itself(with a base type at the end) to create complex types, for example an array of vec2s of f32.')
                        " ('"')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('rootType')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    return_statement:
                      return ('return')
                      string:
                        " ('"')
                        string_fragment ('This can be used with the above block for a root type.')
                        " ('"')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('matrixType')
                  formal_parameters:
                    ( ('(')
                    ) (')')
                  statement_block:
                    { ('{')
                    return_statement:
                      return ('return')
                      string:
                        " ('"')
                        string_fragment ('This block creates a type for a matrix with the dimensions specified.')
                        " ('"')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('bufferUsage')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    comment ("/* eslint-disable-next-line --\n       * Eslint doesn't like WebGPU, there's a type module for this.\n       */")
                    return_statement:
                      return ('return')
                      binary_expression:
                        subscript_expression:
                          identifier ('GPUBufferUsage')
                          [ ('[')
                          call_expression:
                            member_expression:
                              member_expression:
                                identifier ('Scratch')
                                . ('.')
                                property_identifier ('Cast')
                              . ('.')
                              property_identifier ('toString')
                            arguments:
                              ( ('(')
                              member_expression:
                                identifier ('args')
                                . ('.')
                                property_identifier ('USAGE')
                              ) (')')
                          ] (']')
                        ?? ('??')
                        number ('1')
                      ; (';')
                    comment ('//return "This is used by the def shader arg block to define inputs. It\'s different from the usage in the bind input block."')
                    } ('}')
                method_definition:
                  property_identifier ('variableUsage')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    return_statement:
                      return ('return')
                      string:
                        " ('"')
                        string_fragment ('This block can be used in the special variable declaration block or the buffer binding usage block to describe how the variable will be used.')
                        " ('"')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('indexObject')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    return_statement:
                      return ('return')
                      string:
                        ' ("'")
                        string_fragment ('This block can be used to index into an array. You can modify the returned value by putting it as the variable value in the "variable (operation) (value)" block')
                        ' ("'")
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('getProp')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    return_statement:
                      return ('return')
                      string:
                        " ('"')
                        string_fragment ('This can be used to get a component from a struct, or swizzle a vector.')
                        " ('"')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('constructFromType')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    return_statement:
                      return ('return')
                      string:
                        " ('"')
                        string_fragment ('This block is used to create something out of whatever type you defined.')
                        " ('"')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('createBuffer')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    expression_statement:
                      call_expression:
                        member_expression:
                          member_expression:
                            this ('this')
                            . ('.')
                            property_identifier ('device')
                          . ('.')
                          property_identifier ('pushErrorScope')
                        arguments:
                          ( ('(')
                          string:
                            " ('"')
                            string_fragment ('validation')
                            " ('"')
                          ) (')')
                      ; (';')
                    expression_statement:
                      call_expression:
                        member_expression:
                          member_expression:
                            this ('this')
                            . ('.')
                            property_identifier ('device')
                          . ('.')
                          property_identifier ('pushErrorScope')
                        arguments:
                          ( ('(')
                          string:
                            " ('"')
                            string_fragment ('internal')
                            " ('"')
                          ) (')')
                      ; (';')
                    expression_statement:
                      call_expression:
                        member_expression:
                          member_expression:
                            this ('this')
                            . ('.')
                            property_identifier ('device')
                          . ('.')
                          property_identifier ('pushErrorScope')
                        arguments:
                          ( ('(')
                          string:
                            " ('"')
                            string_fragment ('out-of-memory')
                            " ('"')
                          ) (')')
                      ; (';')
                    comment ('// currentBindGroupLayout =')
                    expression_statement:
                      assignment_expression:
                        subscript_expression:
                          member_expression:
                            identifier ('resources')
                            . ('.')
                            property_identifier ('buffers')
                          [ ('[')
                          call_expression:
                            member_expression:
                              member_expression:
                                identifier ('Scratch')
                                . ('.')
                                property_identifier ('Cast')
                              . ('.')
                              property_identifier ('toString')
                            arguments:
                              ( ('(')
                              member_expression:
                                identifier ('args')
                                . ('.')
                                property_identifier ('NAME')
                              ) (')')
                          ] (']')
                        = ('=')
                        call_expression:
                          member_expression:
                            member_expression:
                              this ('this')
                              . ('.')
                              property_identifier ('device')
                            . ('.')
                            property_identifier ('createBuffer')
                          arguments:
                            ( ('(')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('label')
                                : (':')
                                call_expression:
                                  member_expression:
                                    member_expression:
                                      identifier ('Scratch')
                                      . ('.')
                                      property_identifier ('Cast')
                                    . ('.')
                                    property_identifier ('toString')
                                  arguments:
                                    ( ('(')
                                    member_expression:
                                      identifier ('args')
                                      . ('.')
                                      property_identifier ('NAME')
                                    ) (')')
                              , (',')
                              pair:
                                property_identifier ('size')
                                : (':')
                                call_expression:
                                  member_expression:
                                    member_expression:
                                      identifier ('Scratch')
                                      . ('.')
                                      property_identifier ('Cast')
                                    . ('.')
                                    property_identifier ('toNumber')
                                  arguments:
                                    ( ('(')
                                    member_expression:
                                      identifier ('args')
                                      . ('.')
                                      property_identifier ('SIZE')
                                    ) (')')
                              , (',')
                              pair:
                                property_identifier ('usage')
                                : (':')
                                call_expression:
                                  member_expression:
                                    member_expression:
                                      identifier ('Scratch')
                                      . ('.')
                                      property_identifier ('Cast')
                                    . ('.')
                                    property_identifier ('toNumber')
                                  arguments:
                                    ( ('(')
                                    member_expression:
                                      identifier ('args')
                                      . ('.')
                                      property_identifier ('USAGE')
                                    ) (')')
                              , (',')
                              } ('}')
                            ) (')')
                      ; (';')
                    expression_statement:
                      call_expression:
                        member_expression:
                          call_expression:
                            member_expression:
                              member_expression:
                                this ('this')
                                . ('.')
                                property_identifier ('device')
                              . ('.')
                              property_identifier ('popErrorScope')
                            arguments:
                              ( ('(')
                              ) (')')
                          . ('.')
                          property_identifier ('then')
                        arguments:
                          ( ('(')
                          arrow_function:
                            formal_parameters:
                              ( ('(')
                              identifier ('error')
                              ) (')')
                            => ('=>')
                            statement_block:
                              { ('{')
                              if_statement:
                                if ('if')
                                parenthesized_expression:
                                  ( ('(')
                                  identifier ('error')
                                  ) (')')
                                expression_statement:
                                  call_expression:
                                    member_expression:
                                      this ('this')
                                      . ('.')
                                      property_identifier ('throwError')
                                    arguments:
                                      ( ('(')
                                      string:
                                        " ('"')
                                        string_fragment ('BufferCreationErrorOOM')
                                        " ('"')
                                      , (',')
                                      member_expression:
                                        identifier ('error')
                                        . ('.')
                                        property_identifier ('message')
                                      , (',')
                                      string:
                                        " ('"')
                                        string_fragment ('BufferCreation')
                                        " ('"')
                                      , (',')
                                      identifier ('error')
                                      , (',')
                                      identifier ('util')
                                      ) (')')
                                  ; (';')
                              } ('}')
                          ) (')')
                      ; (';')
                    expression_statement:
                      call_expression:
                        member_expression:
                          call_expression:
                            member_expression:
                              member_expression:
                                this ('this')
                                . ('.')
                                property_identifier ('device')
                              . ('.')
                              property_identifier ('popErrorScope')
                            arguments:
                              ( ('(')
                              ) (')')
                          . ('.')
                          property_identifier ('then')
                        arguments:
                          ( ('(')
                          arrow_function:
                            formal_parameters:
                              ( ('(')
                              identifier ('error')
                              ) (')')
                            => ('=>')
                            statement_block:
                              { ('{')
                              if_statement:
                                if ('if')
                                parenthesized_expression:
                                  ( ('(')
                                  identifier ('error')
                                  ) (')')
                                expression_statement:
                                  call_expression:
                                    member_expression:
                                      this ('this')
                                      . ('.')
                                      property_identifier ('throwError')
                                    arguments:
                                      ( ('(')
                                      string:
                                        " ('"')
                                        string_fragment ('BufferCreationError')
                                        " ('"')
                                      , (',')
                                      member_expression:
                                        identifier ('error')
                                        . ('.')
                                        property_identifier ('message')
                                      , (',')
                                      string:
                                        " ('"')
                                        string_fragment ('BufferCreation')
                                        " ('"')
                                      , (',')
                                      identifier ('error')
                                      , (',')
                                      identifier ('util')
                                      ) (')')
                                  ; (';')
                              } ('}')
                          ) (')')
                      ; (';')
                    expression_statement:
                      call_expression:
                        member_expression:
                          call_expression:
                            member_expression:
                              member_expression:
                                this ('this')
                                . ('.')
                                property_identifier ('device')
                              . ('.')
                              property_identifier ('popErrorScope')
                            arguments:
                              ( ('(')
                              ) (')')
                          . ('.')
                          property_identifier ('then')
                        arguments:
                          ( ('(')
                          arrow_function:
                            formal_parameters:
                              ( ('(')
                              identifier ('error')
                              ) (')')
                            => ('=>')
                            statement_block:
                              { ('{')
                              if_statement:
                                if ('if')
                                parenthesized_expression:
                                  ( ('(')
                                  identifier ('error')
                                  ) (')')
                                expression_statement:
                                  call_expression:
                                    member_expression:
                                      this ('this')
                                      . ('.')
                                      property_identifier ('throwError')
                                    arguments:
                                      ( ('(')
                                      string:
                                        " ('"')
                                        string_fragment ('BufferCreationError')
                                        " ('"')
                                      , (',')
                                      member_expression:
                                        identifier ('error')
                                        . ('.')
                                        property_identifier ('message')
                                      , (',')
                                      string:
                                        " ('"')
                                        string_fragment ('BufferCreation')
                                        " ('"')
                                      , (',')
                                      identifier ('error')
                                      , (',')
                                      identifier ('util')
                                      ) (')')
                                  ; (';')
                              } ('}')
                          ) (')')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('createBindGroupLayout')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    comment ('// thanks to cst1229 for this section <3')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        member_expression:
                          member_expression:
                            identifier ('util')
                            . ('.')
                            property_identifier ('stackFrame')
                          . ('.')
                          property_identifier ('blockRanOnce')
                        ) (')')
                      statement_block:
                        { ('{')
                        expression_statement:
                          call_expression:
                            member_expression:
                              member_expression:
                                this ('this')
                                . ('.')
                                property_identifier ('device')
                              . ('.')
                              property_identifier ('pushErrorScope')
                            arguments:
                              ( ('(')
                              string:
                                " ('"')
                                string_fragment ('validation')
                                " ('"')
                              ) (')')
                          ; (';')
                        expression_statement:
                          call_expression:
                            member_expression:
                              member_expression:
                                this ('this')
                                . ('.')
                                property_identifier ('device')
                              . ('.')
                              property_identifier ('pushErrorScope')
                            arguments:
                              ( ('(')
                              string:
                                " ('"')
                                string_fragment ('internal')
                                " ('"')
                              ) (')')
                          ; (';')
                        expression_statement:
                          call_expression:
                            member_expression:
                              member_expression:
                                this ('this')
                                . ('.')
                                property_identifier ('device')
                              . ('.')
                              property_identifier ('pushErrorScope')
                            arguments:
                              ( ('(')
                              string:
                                " ('"')
                                string_fragment ('out-of-memory')
                                " ('"')
                              ) (')')
                          ; (';')
                        expression_statement:
                          assignment_expression:
                            subscript_expression:
                              member_expression:
                                identifier ('resources')
                                . ('.')
                                property_identifier ('bindGroupLayouts')
                              [ ('[')
                              call_expression:
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('Cast')
                                  . ('.')
                                  property_identifier ('toString')
                                arguments:
                                  ( ('(')
                                  member_expression:
                                    identifier ('args')
                                    . ('.')
                                    property_identifier ('NAME')
                                  ) (')')
                              ] (']')
                            = ('=')
                            call_expression:
                              member_expression:
                                member_expression:
                                  this ('this')
                                  . ('.')
                                  property_identifier ('device')
                                . ('.')
                                property_identifier ('createBindGroupLayout')
                              arguments:
                                ( ('(')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('entries')
                                    : (':')
                                    subscript_expression:
                                      member_expression:
                                        identifier ('resources')
                                        . ('.')
                                        property_identifier ('bindGroupLayouts')
                                      [ ('[')
                                      call_expression:
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('Cast')
                                          . ('.')
                                          property_identifier ('toString')
                                        arguments:
                                          ( ('(')
                                          member_expression:
                                            identifier ('args')
                                            . ('.')
                                            property_identifier ('NAME')
                                          ) (')')
                                      ] (']')
                                  , (',')
                                  pair:
                                    property_identifier ('label')
                                    : (':')
                                    call_expression:
                                      member_expression:
                                        member_expression:
                                          identifier ('Scratch')
                                          . ('.')
                                          property_identifier ('Cast')
                                        . ('.')
                                        property_identifier ('toString')
                                      arguments:
                                        ( ('(')
                                        member_expression:
                                          identifier ('args')
                                          . ('.')
                                          property_identifier ('NAME')
                                        ) (')')
                                  , (',')
                                  } ('}')
                                ) (')')
                          ; (';')
                        expression_statement:
                          call_expression:
                            member_expression:
                              call_expression:
                                member_expression:
                                  member_expression:
                                    this ('this')
                                    . ('.')
                                    property_identifier ('device')
                                  . ('.')
                                  property_identifier ('popErrorScope')
                                arguments:
                                  ( ('(')
                                  ) (')')
                              . ('.')
                              property_identifier ('then')
                            arguments:
                              ( ('(')
                              arrow_function:
                                formal_parameters:
                                  ( ('(')
                                  identifier ('error')
                                  ) (')')
                                => ('=>')
                                statement_block:
                                  { ('{')
                                  if_statement:
                                    if ('if')
                                    parenthesized_expression:
                                      ( ('(')
                                      identifier ('error')
                                      ) (')')
                                    expression_statement:
                                      call_expression:
                                        member_expression:
                                          this ('this')
                                          . ('.')
                                          property_identifier ('throwError')
                                        arguments:
                                          ( ('(')
                                          string:
                                            " ('"')
                                            string_fragment ('BindGroupLayoutCreationErrorOOM')
                                            " ('"')
                                          , (',')
                                          member_expression:
                                            identifier ('error')
                                            . ('.')
                                            property_identifier ('message')
                                          , (',')
                                          string:
                                            " ('"')
                                            string_fragment ('BindGroupLayoutCreation')
                                            " ('"')
                                          , (',')
                                          identifier ('error')
                                          , (',')
                                          identifier ('util')
                                          ) (')')
                                      ; (';')
                                  } ('}')
                              ) (')')
                          ; (';')
                        expression_statement:
                          call_expression:
                            member_expression:
                              call_expression:
                                member_expression:
                                  member_expression:
                                    this ('this')
                                    . ('.')
                                    property_identifier ('device')
                                  . ('.')
                                  property_identifier ('popErrorScope')
                                arguments:
                                  ( ('(')
                                  ) (')')
                              . ('.')
                              property_identifier ('then')
                            arguments:
                              ( ('(')
                              arrow_function:
                                formal_parameters:
                                  ( ('(')
                                  identifier ('error')
                                  ) (')')
                                => ('=>')
                                statement_block:
                                  { ('{')
                                  if_statement:
                                    if ('if')
                                    parenthesized_expression:
                                      ( ('(')
                                      identifier ('error')
                                      ) (')')
                                    expression_statement:
                                      call_expression:
                                        member_expression:
                                          this ('this')
                                          . ('.')
                                          property_identifier ('throwError')
                                        arguments:
                                          ( ('(')
                                          string:
                                            " ('"')
                                            string_fragment ('BindGroupLayoutCreationError')
                                            " ('"')
                                          , (',')
                                          member_expression:
                                            identifier ('error')
                                            . ('.')
                                            property_identifier ('message')
                                          , (',')
                                          string:
                                            " ('"')
                                            string_fragment ('BindGroupLayoutCreation')
                                            " ('"')
                                          , (',')
                                          identifier ('error')
                                          , (',')
                                          identifier ('util')
                                          ) (')')
                                      ; (';')
                                  } ('}')
                              ) (')')
                          ; (';')
                        expression_statement:
                          call_expression:
                            member_expression:
                              call_expression:
                                member_expression:
                                  member_expression:
                                    this ('this')
                                    . ('.')
                                    property_identifier ('device')
                                  . ('.')
                                  property_identifier ('popErrorScope')
                                arguments:
                                  ( ('(')
                                  ) (')')
                              . ('.')
                              property_identifier ('then')
                            arguments:
                              ( ('(')
                              arrow_function:
                                formal_parameters:
                                  ( ('(')
                                  identifier ('error')
                                  ) (')')
                                => ('=>')
                                statement_block:
                                  { ('{')
                                  if_statement:
                                    if ('if')
                                    parenthesized_expression:
                                      ( ('(')
                                      identifier ('error')
                                      ) (')')
                                    expression_statement:
                                      call_expression:
                                        member_expression:
                                          this ('this')
                                          . ('.')
                                          property_identifier ('throwError')
                                        arguments:
                                          ( ('(')
                                          string:
                                            " ('"')
                                            string_fragment ('BindGroupLayoutCreationError')
                                            " ('"')
                                          , (',')
                                          member_expression:
                                            identifier ('error')
                                            . ('.')
                                            property_identifier ('message')
                                          , (',')
                                          string:
                                            " ('"')
                                            string_fragment ('BindGroupLayoutCreation')
                                            " ('"')
                                          , (',')
                                          identifier ('error')
                                          , (',')
                                          identifier ('util')
                                          ) (')')
                                      ; (';')
                                  } ('}')
                              ) (')')
                          ; (';')
                        return_statement:
                          return ('return')
                          ; (';')
                        } ('}')
                    expression_statement:
                      assignment_expression:
                        identifier ('currentBindGroupLayout')
                        = ('=')
                        call_expression:
                          member_expression:
                            member_expression:
                              identifier ('Scratch')
                              . ('.')
                              property_identifier ('Cast')
                            . ('.')
                            property_identifier ('toString')
                          arguments:
                            ( ('(')
                            member_expression:
                              identifier ('args')
                              . ('.')
                              property_identifier ('NAME')
                            ) (')')
                      ; (';')
                    expression_statement:
                      assignment_expression:
                        subscript_expression:
                          member_expression:
                            identifier ('resources')
                            . ('.')
                            property_identifier ('bindGroupLayouts')
                          [ ('[')
                          call_expression:
                            member_expression:
                              member_expression:
                                identifier ('Scratch')
                                . ('.')
                                property_identifier ('Cast')
                              . ('.')
                              property_identifier ('toString')
                            arguments:
                              ( ('(')
                              member_expression:
                                identifier ('args')
                                . ('.')
                                property_identifier ('NAME')
                              ) (')')
                          ] (']')
                        = ('=')
                        array:
                          [ ('[')
                          ] (']')
                      ; (';')
                    comment ('// temporarily store a list of entries here, things will be added to it via the bindGroupLayoutEntry block')
                    expression_statement:
                      call_expression:
                        member_expression:
                          identifier ('util')
                          . ('.')
                          property_identifier ('startBranch')
                        arguments:
                          ( ('(')
                          number ('1')
                          , (',')
                          true ('true')
                          ) (')')
                      ; (';')
                    expression_statement:
                      assignment_expression:
                        member_expression:
                          member_expression:
                            identifier ('util')
                            . ('.')
                            property_identifier ('stackFrame')
                          . ('.')
                          property_identifier ('blockRanOnce')
                        = ('=')
                        true ('true')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('bindGroupLayoutEntry')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    lexical_declaration:
                      let ('let')
                      variable_declarator:
                        identifier ('parsed')
                      ; (';')
                    try_statement:
                      try ('try')
                      statement_block:
                        { ('{')
                        expression_statement:
                          assignment_expression:
                            identifier ('parsed')
                            = ('=')
                            call_expression:
                              member_expression:
                                identifier ('JSON')
                                . ('.')
                                property_identifier ('parse')
                              arguments:
                                ( ('(')
                                member_expression:
                                  identifier ('args')
                                  . ('.')
                                  property_identifier ('DESC')
                                ) (')')
                          ; (';')
                        comment ('// if (!Object.prototype.hasOwnProperty.call(parsed,"type")) throw new Error("skibidi toilet ohio grimace shake rizz")')
                        } ('}')
                      catch_clause:
                        catch ('catch')
                        statement_block:
                          { ('{')
                          expression_statement:
                            call_expression:
                              member_expression:
                                this ('this')
                                . ('.')
                                property_identifier ('throwError')
                              arguments:
                                ( ('(')
                                string:
                                  " ('"')
                                  string_fragment ('InvalidEntryDescriptor')
                                  " ('"')
                                , (',')
                                string:
                                  " ('"')
                                  string_fragment ('Invalid bind group layout entry descriptor!')
                                  " ('"')
                                , (',')
                                string:
                                  " ('"')
                                  string_fragment ('BindGroupLayoutEntryBlock')
                                  " ('"')
                                , (',')
                                string:
                                  " ('"')
                                  string_fragment ('The recieved descriptor for the bind group layout entry block is invalid, did you use the wrong block?')
                                  " ('"')
                                , (',')
                                identifier ('util')
                                ) (')')
                            ; (';')
                          return_statement:
                            return ('return')
                            ; (';')
                          } ('}')
                    lexical_declaration:
                      let ('let')
                      variable_declarator:
                        identifier ('o')
                        = ('=')
                        object:
                          { ('{')
                          pair:
                            property_identifier ('binding')
                            : (':')
                            call_expression:
                              member_expression:
                                member_expression:
                                  identifier ('Scratch')
                                  . ('.')
                                  property_identifier ('Cast')
                                . ('.')
                                property_identifier ('toNumber')
                              arguments:
                                ( ('(')
                                member_expression:
                                  identifier ('args')
                                  . ('.')
                                  property_identifier ('BINDING')
                                ) (')')
                          , (',')
                          comment ('// this extension only has compute shaders')
                          comment ("/* eslint-disable-next-line --\n         * Eslint doesn't like WebGPU, there's a type module for this.\n         */")
                          pair:
                            property_identifier ('visibility')
                            : (':')
                            member_expression:
                              identifier ('GPUShaderStage')
                              . ('.')
                              property_identifier ('COMPUTE')
                          , (',')
                          } ('}')
                      ; (';')
                    expression_statement:
                      assignment_expression:
                        subscript_expression:
                          identifier ('o')
                          [ ('[')
                          member_expression:
                            identifier ('args')
                            . ('.')
                            property_identifier ('TYPE')
                          ] (']')
                        = ('=')
                        identifier ('parsed')
                      ; (';')
                    expression_statement:
                      call_expression:
                        member_expression:
                          subscript_expression:
                            member_expression:
                              identifier ('resources')
                              . ('.')
                              property_identifier ('bindGroupLayouts')
                            [ ('[')
                            identifier ('currentBindGroupLayout')
                            ] (']')
                          . ('.')
                          property_identifier ('push')
                        arguments:
                          ( ('(')
                          identifier ('o')
                          ) (')')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('createBindGroup')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    comment ('// thanks to cst1229 for this section <3')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        member_expression:
                          member_expression:
                            identifier ('util')
                            . ('.')
                            property_identifier ('stackFrame')
                          . ('.')
                          property_identifier ('blockRanOnce')
                        ) (')')
                      statement_block:
                        { ('{')
                        expression_statement:
                          call_expression:
                            member_expression:
                              member_expression:
                                this ('this')
                                . ('.')
                                property_identifier ('device')
                              . ('.')
                              property_identifier ('pushErrorScope')
                            arguments:
                              ( ('(')
                              string:
                                " ('"')
                                string_fragment ('validation')
                                " ('"')
                              ) (')')
                          ; (';')
                        expression_statement:
                          call_expression:
                            member_expression:
                              member_expression:
                                this ('this')
                                . ('.')
                                property_identifier ('device')
                              . ('.')
                              property_identifier ('pushErrorScope')
                            arguments:
                              ( ('(')
                              string:
                                " ('"')
                                string_fragment ('internal')
                                " ('"')
                              ) (')')
                          ; (';')
                        expression_statement:
                          call_expression:
                            member_expression:
                              member_expression:
                                this ('this')
                                . ('.')
                                property_identifier ('device')
                              . ('.')
                              property_identifier ('pushErrorScope')
                            arguments:
                              ( ('(')
                              string:
                                " ('"')
                                string_fragment ('out-of-memory')
                                " ('"')
                              ) (')')
                          ; (';')
                        expression_statement:
                          assignment_expression:
                            subscript_expression:
                              member_expression:
                                identifier ('resources')
                                . ('.')
                                property_identifier ('bindGroups')
                              [ ('[')
                              call_expression:
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('Cast')
                                  . ('.')
                                  property_identifier ('toString')
                                arguments:
                                  ( ('(')
                                  member_expression:
                                    identifier ('args')
                                    . ('.')
                                    property_identifier ('NAME')
                                  ) (')')
                              ] (']')
                            = ('=')
                            call_expression:
                              member_expression:
                                member_expression:
                                  this ('this')
                                  . ('.')
                                  property_identifier ('device')
                                . ('.')
                                property_identifier ('createBindGroup')
                              arguments:
                                ( ('(')
                                object:
                                  { ('{')
                                  pair:
                                    property_identifier ('layout')
                                    : (':')
                                    subscript_expression:
                                      member_expression:
                                        identifier ('resources')
                                        . ('.')
                                        property_identifier ('bindGroupLayouts')
                                      [ ('[')
                                      call_expression:
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('Cast')
                                          . ('.')
                                          property_identifier ('toString')
                                        arguments:
                                          ( ('(')
                                          member_expression:
                                            identifier ('args')
                                            . ('.')
                                            property_identifier ('LAYOUT')
                                          ) (')')
                                      ] (']')
                                  , (',')
                                  pair:
                                    property_identifier ('entries')
                                    : (':')
                                    subscript_expression:
                                      member_expression:
                                        identifier ('resources')
                                        . ('.')
                                        property_identifier ('bindGroups')
                                      [ ('[')
                                      call_expression:
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('Cast')
                                          . ('.')
                                          property_identifier ('toString')
                                        arguments:
                                          ( ('(')
                                          member_expression:
                                            identifier ('args')
                                            . ('.')
                                            property_identifier ('NAME')
                                          ) (')')
                                      ] (']')
                                  , (',')
                                  pair:
                                    property_identifier ('label')
                                    : (':')
                                    call_expression:
                                      member_expression:
                                        member_expression:
                                          identifier ('Scratch')
                                          . ('.')
                                          property_identifier ('Cast')
                                        . ('.')
                                        property_identifier ('toString')
                                      arguments:
                                        ( ('(')
                                        member_expression:
                                          identifier ('args')
                                          . ('.')
                                          property_identifier ('NAME')
                                        ) (')')
                                  , (',')
                                  } ('}')
                                ) (')')
                          ; (';')
                        expression_statement:
                          call_expression:
                            member_expression:
                              call_expression:
                                member_expression:
                                  member_expression:
                                    this ('this')
                                    . ('.')
                                    property_identifier ('device')
                                  . ('.')
                                  property_identifier ('popErrorScope')
                                arguments:
                                  ( ('(')
                                  ) (')')
                              . ('.')
                              property_identifier ('then')
                            arguments:
                              ( ('(')
                              arrow_function:
                                formal_parameters:
                                  ( ('(')
                                  identifier ('error')
                                  ) (')')
                                => ('=>')
                                statement_block:
                                  { ('{')
                                  if_statement:
                                    if ('if')
                                    parenthesized_expression:
                                      ( ('(')
                                      identifier ('error')
                                      ) (')')
                                    expression_statement:
                                      call_expression:
                                        member_expression:
                                          this ('this')
                                          . ('.')
                                          property_identifier ('throwError')
                                        arguments:
                                          ( ('(')
                                          string:
                                            " ('"')
                                            string_fragment ('BindGroupCreationErrorOOM')
                                            " ('"')
                                          , (',')
                                          member_expression:
                                            identifier ('error')
                                            . ('.')
                                            property_identifier ('message')
                                          , (',')
                                          string:
                                            " ('"')
                                            string_fragment ('BindGroupCreation')
                                            " ('"')
                                          , (',')
                                          identifier ('error')
                                          , (',')
                                          identifier ('util')
                                          ) (')')
                                      ; (';')
                                  } ('}')
                              ) (')')
                          ; (';')
                        expression_statement:
                          call_expression:
                            member_expression:
                              call_expression:
                                member_expression:
                                  member_expression:
                                    this ('this')
                                    . ('.')
                                    property_identifier ('device')
                                  . ('.')
                                  property_identifier ('popErrorScope')
                                arguments:
                                  ( ('(')
                                  ) (')')
                              . ('.')
                              property_identifier ('then')
                            arguments:
                              ( ('(')
                              arrow_function:
                                formal_parameters:
                                  ( ('(')
                                  identifier ('error')
                                  ) (')')
                                => ('=>')
                                statement_block:
                                  { ('{')
                                  if_statement:
                                    if ('if')
                                    parenthesized_expression:
                                      ( ('(')
                                      identifier ('error')
                                      ) (')')
                                    expression_statement:
                                      call_expression:
                                        member_expression:
                                          this ('this')
                                          . ('.')
                                          property_identifier ('throwError')
                                        arguments:
                                          ( ('(')
                                          string:
                                            " ('"')
                                            string_fragment ('BindGroupCreationError')
                                            " ('"')
                                          , (',')
                                          member_expression:
                                            identifier ('error')
                                            . ('.')
                                            property_identifier ('message')
                                          , (',')
                                          string:
                                            " ('"')
                                            string_fragment ('BindGroupCreation')
                                            " ('"')
                                          , (',')
                                          identifier ('error')
                                          , (',')
                                          identifier ('util')
                                          ) (')')
                                      ; (';')
                                  } ('}')
                              ) (')')
                          ; (';')
                        expression_statement:
                          call_expression:
                            member_expression:
                              call_expression:
                                member_expression:
                                  member_expression:
                                    this ('this')
                                    . ('.')
                                    property_identifier ('device')
                                  . ('.')
                                  property_identifier ('popErrorScope')
                                arguments:
                                  ( ('(')
                                  ) (')')
                              . ('.')
                              property_identifier ('then')
                            arguments:
                              ( ('(')
                              arrow_function:
                                formal_parameters:
                                  ( ('(')
                                  identifier ('error')
                                  ) (')')
                                => ('=>')
                                statement_block:
                                  { ('{')
                                  if_statement:
                                    if ('if')
                                    parenthesized_expression:
                                      ( ('(')
                                      identifier ('error')
                                      ) (')')
                                    expression_statement:
                                      call_expression:
                                        member_expression:
                                          this ('this')
                                          . ('.')
                                          property_identifier ('throwError')
                                        arguments:
                                          ( ('(')
                                          string:
                                            " ('"')
                                            string_fragment ('BindGroupCreationError')
                                            " ('"')
                                          , (',')
                                          member_expression:
                                            identifier ('error')
                                            . ('.')
                                            property_identifier ('message')
                                          , (',')
                                          string:
                                            " ('"')
                                            string_fragment ('BindGroupCreation')
                                            " ('"')
                                          , (',')
                                          identifier ('error')
                                          , (',')
                                          identifier ('util')
                                          ) (')')
                                      ; (';')
                                  } ('}')
                              ) (')')
                          ; (';')
                        return_statement:
                          return ('return')
                          ; (';')
                        } ('}')
                    expression_statement:
                      assignment_expression:
                        identifier ('currentBindGroup')
                        = ('=')
                        call_expression:
                          member_expression:
                            member_expression:
                              identifier ('Scratch')
                              . ('.')
                              property_identifier ('Cast')
                            . ('.')
                            property_identifier ('toString')
                          arguments:
                            ( ('(')
                            member_expression:
                              identifier ('args')
                              . ('.')
                              property_identifier ('NAME')
                            ) (')')
                      ; (';')
                    expression_statement:
                      assignment_expression:
                        subscript_expression:
                          member_expression:
                            identifier ('resources')
                            . ('.')
                            property_identifier ('bindGroups')
                          [ ('[')
                          call_expression:
                            member_expression:
                              member_expression:
                                identifier ('Scratch')
                                . ('.')
                                property_identifier ('Cast')
                              . ('.')
                              property_identifier ('toString')
                            arguments:
                              ( ('(')
                              member_expression:
                                identifier ('args')
                                . ('.')
                                property_identifier ('NAME')
                              ) (')')
                          ] (']')
                        = ('=')
                        array:
                          [ ('[')
                          ] (']')
                      ; (';')
                    comment ('// temporarily store a list of entries here, things will be added to it via the bindGroupLayoutEntry block')
                    expression_statement:
                      call_expression:
                        member_expression:
                          identifier ('util')
                          . ('.')
                          property_identifier ('startBranch')
                        arguments:
                          ( ('(')
                          number ('1')
                          , (',')
                          true ('true')
                          ) (')')
                      ; (';')
                    expression_statement:
                      assignment_expression:
                        member_expression:
                          member_expression:
                            identifier ('util')
                            . ('.')
                            property_identifier ('stackFrame')
                          . ('.')
                          property_identifier ('blockRanOnce')
                        = ('=')
                        true ('true')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('bindGroupEntry')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    lexical_declaration:
                      const ('const')
                      variable_declarator:
                        identifier ('kv')
                        = ('=')
                        object:
                          { ('{')
                          pair:
                            property_identifier ('buffer')
                            : (':')
                            string:
                              " ('"')
                              string_fragment ('buffers')
                              " ('"')
                          , (',')
                          pair:
                            property_identifier ('storageTexture')
                            : (':')
                            string:
                              " ('"')
                              string_fragment ('textures')
                              " ('"')
                          , (',')
                          pair:
                            property_identifier ('sampler')
                            : (':')
                            string:
                              " ('"')
                              string_fragment ('samplers')
                              " ('"')
                          , (',')
                          } ('}')
                      ; (';')
                    comment ('// bind group entry type -> resources key')
                    comment ('// the object to bind to that slot. buffers are freaky and need a special object')
                    lexical_declaration:
                      let ('let')
                      variable_declarator:
                        identifier ('o')
                      ; (';')
                    lexical_declaration:
                      const ('const')
                      variable_declarator:
                        identifier ('type')
                        = ('=')
                        binary_expression:
                          subscript_expression:
                            identifier ('kv')
                            [ ('[')
                            member_expression:
                              identifier ('args')
                              . ('.')
                              property_identifier ('TYPE')
                            ] (']')
                          ?? ('??')
                          string:
                            " ('"')
                            string_fragment ('buffers')
                            " ('"')
                      ; (';')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        unary_expression:
                          ! ('!')
                          call_expression:
                            member_expression:
                              member_expression:
                                member_expression:
                                  identifier ('Object')
                                  . ('.')
                                  property_identifier ('prototype')
                                . ('.')
                                property_identifier ('hasOwnProperty')
                              . ('.')
                              property_identifier ('call')
                            arguments:
                              ( ('(')
                              subscript_expression:
                                identifier ('resources')
                                [ ('[')
                                identifier ('type')
                                ] (']')
                              , (',')
                              call_expression:
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('Cast')
                                  . ('.')
                                  property_identifier ('toString')
                                arguments:
                                  ( ('(')
                                  member_expression:
                                    identifier ('args')
                                    . ('.')
                                    property_identifier ('RESOURCE')
                                  ) (')')
                              ) (')')
                        ) (')')
                      statement_block:
                        { ('{')
                        expression_statement:
                          call_expression:
                            member_expression:
                              this ('this')
                              . ('.')
                              property_identifier ('throwError')
                            arguments:
                              ( ('(')
                              string:
                                " ('"')
                                string_fragment ('ResourceNotFound')
                                " ('"')
                              , (',')
                              string:
                                " ('"')
                                string_fragment ("The specified resource doesn't exist")
                                " ('"')
                              , (',')
                              string:
                                " ('"')
                                string_fragment ('BindGroupEntryBlock')
                                " ('"')
                              , (',')
                              template_string:
                                ` ('`')
                                string_fragment ("Either the resource type is invalid or the provided resource name doesn't exist.")
                                ` ('`')
                              , (',')
                              identifier ('util')
                              ) (')')
                          ; (';')
                        return_statement:
                          return ('return')
                          ; (';')
                        } ('}')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        binary_expression:
                          identifier ('type')
                          == ('==')
                          string:
                            " ('"')
                            string_fragment ('buffers')
                            " ('"')
                        ) (')')
                      statement_block:
                        { ('{')
                        expression_statement:
                          assignment_expression:
                            identifier ('o')
                            = ('=')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('buffer')
                                : (':')
                                subscript_expression:
                                  member_expression:
                                    identifier ('resources')
                                    . ('.')
                                    property_identifier ('buffers')
                                  [ ('[')
                                  member_expression:
                                    identifier ('args')
                                    . ('.')
                                    property_identifier ('RESOURCE')
                                  ] (']')
                              , (',')
                              } ('}')
                          ; (';')
                        comment ('//console.log(o)')
                        } ('}')
                      else_clause:
                        else ('else')
                        statement_block:
                          { ('{')
                          expression_statement:
                            assignment_expression:
                              identifier ('o')
                              = ('=')
                              subscript_expression:
                                subscript_expression:
                                  identifier ('resources')
                                  [ ('[')
                                  identifier ('type')
                                  ] (']')
                                [ ('[')
                                member_expression:
                                  identifier ('args')
                                  . ('.')
                                  property_identifier ('RESOURCE')
                                ] (']')
                            ; (';')
                          if_statement:
                            if ('if')
                            parenthesized_expression:
                              ( ('(')
                              binary_expression:
                                identifier ('type')
                                == ('==')
                                string:
                                  " ('"')
                                  string_fragment ('textures')
                                  " ('"')
                              ) (')')
                            expression_statement:
                              assignment_expression:
                                identifier ('o')
                                = ('=')
                                call_expression:
                                  member_expression:
                                    identifier ('o')
                                    . ('.')
                                    property_identifier ('createView')
                                  arguments:
                                    ( ('(')
                                    ) (')')
                              ; (';')
                          } ('}')
                    expression_statement:
                      call_expression:
                        member_expression:
                          subscript_expression:
                            member_expression:
                              identifier ('resources')
                              . ('.')
                              property_identifier ('bindGroups')
                            [ ('[')
                            identifier ('currentBindGroup')
                            ] (']')
                          . ('.')
                          property_identifier ('push')
                        arguments:
                          ( ('(')
                          object:
                            { ('{')
                            pair:
                              property_identifier ('binding')
                              : (':')
                              call_expression:
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('Cast')
                                  . ('.')
                                  property_identifier ('toNumber')
                                arguments:
                                  ( ('(')
                                  member_expression:
                                    identifier ('args')
                                    . ('.')
                                    property_identifier ('BINDING')
                                  ) (')')
                            , (',')
                            pair:
                              property_identifier ('resource')
                              : (':')
                              identifier ('o')
                            , (',')
                            } ('}')
                          ) (')')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('bufferEntryDescriptor')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    return_statement:
                      return ('return')
                      call_expression:
                        member_expression:
                          identifier ('JSON')
                          . ('.')
                          property_identifier ('stringify')
                        arguments:
                          ( ('(')
                          object:
                            { ('{')
                            pair:
                              property_identifier ('type')
                              : (':')
                              member_expression:
                                identifier ('args')
                                . ('.')
                                property_identifier ('TYPE')
                            , (',')
                            } ('}')
                          ) (')')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('binaryOr')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    return_statement:
                      return ('return')
                      binary_expression:
                        call_expression:
                          member_expression:
                            member_expression:
                              identifier ('Scratch')
                              . ('.')
                              property_identifier ('Cast')
                            . ('.')
                            property_identifier ('toNumber')
                          arguments:
                            ( ('(')
                            member_expression:
                              identifier ('args')
                              . ('.')
                              property_identifier ('A')
                            ) (')')
                        | ('|')
                        call_expression:
                          member_expression:
                            member_expression:
                              identifier ('Scratch')
                              . ('.')
                              property_identifier ('Cast')
                            . ('.')
                            property_identifier ('toNumber')
                          arguments:
                            ( ('(')
                            member_expression:
                              identifier ('args')
                              . ('.')
                              property_identifier ('B')
                            ) (')')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('genF32')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    lexical_declaration:
                      let ('let')
                      variable_declarator:
                        identifier ('array')
                      ; (';')
                    try_statement:
                      try ('try')
                      statement_block:
                        { ('{')
                        expression_statement:
                          assignment_expression:
                            identifier ('array')
                            = ('=')
                            call_expression:
                              member_expression:
                                identifier ('JSON')
                                . ('.')
                                property_identifier ('parse')
                              arguments:
                                ( ('(')
                                member_expression:
                                  identifier ('args')
                                  . ('.')
                                  property_identifier ('ARRAY')
                                ) (')')
                          ; (';')
                        } ('}')
                      catch_clause:
                        catch ('catch')
                        statement_block:
                          { ('{')
                          expression_statement:
                            assignment_expression:
                              identifier ('array')
                              = ('=')
                              array:
                                [ ('[')
                                ] (']')
                            ; (';')
                          } ('}')
                    expression_statement:
                      assignment_expression:
                        subscript_expression:
                          member_expression:
                            identifier ('resources')
                            . ('.')
                            property_identifier ('bufferRefs')
                          [ ('[')
                          call_expression:
                            member_expression:
                              this ('this')
                              . ('.')
                              property_identifier ('getBlockId')
                            arguments:
                              ( ('(')
                              identifier ('util')
                              ) (')')
                          ] (']')
                        = ('=')
                        new_expression:
                          new ('new')
                          identifier ('Float32Array')
                          arguments:
                            ( ('(')
                            identifier ('array')
                            ) (')')
                      ; (';')
                    return_statement:
                      return ('return')
                      call_expression:
                        member_expression:
                          this ('this')
                          . ('.')
                          property_identifier ('getBlockId')
                        arguments:
                          ( ('(')
                          identifier ('util')
                          ) (')')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('wgslWhileLoop')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    } ('}')
                method_definition:
                  property_identifier ('break')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    } ('}')
                method_definition:
                  property_identifier ('continue')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    } ('}')
                method_definition:
                  property_identifier ('writeBuffer')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    comment ('// todo: more input types here')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        unary_expression:
                          ! ('!')
                          call_expression:
                            member_expression:
                              member_expression:
                                member_expression:
                                  identifier ('Object')
                                  . ('.')
                                  property_identifier ('prototype')
                                . ('.')
                                property_identifier ('hasOwnProperty')
                              . ('.')
                              property_identifier ('call')
                            arguments:
                              ( ('(')
                              member_expression:
                                identifier ('resources')
                                . ('.')
                                property_identifier ('buffers')
                              , (',')
                              call_expression:
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('Cast')
                                  . ('.')
                                  property_identifier ('toString')
                                arguments:
                                  ( ('(')
                                  member_expression:
                                    identifier ('args')
                                    . ('.')
                                    property_identifier ('BUFFER')
                                  ) (')')
                              ) (')')
                        ) (')')
                      statement_block:
                        { ('{')
                        expression_statement:
                          call_expression:
                            member_expression:
                              this ('this')
                              . ('.')
                              property_identifier ('throwError')
                            arguments:
                              ( ('(')
                              string:
                                " ('"')
                                string_fragment ('BufferNotFound')
                                " ('"')
                              , (',')
                              string:
                                " ('"')
                                string_fragment ("The provided buffer doesn't exist")
                                " ('"')
                              , (',')
                              string:
                                " ('"')
                                string_fragment ('ClearBuffer')
                                " ('"')
                              , (',')
                              template_string:
                                ` ('`')
                                string_fragment ('The buffer "')
                                template_substitution:
                                  ${ ('${')
                                  call_expression:
                                    member_expression:
                                      member_expression:
                                        identifier ('Scratch')
                                        . ('.')
                                        property_identifier ('Cast')
                                      . ('.')
                                      property_identifier ('toString')
                                    arguments:
                                      ( ('(')
                                      member_expression:
                                        identifier ('args')
                                        . ('.')
                                        property_identifier ('BUFFER')
                                      ) (')')
                                  } ('}')
                                string_fragment ('" doesn\'t exist')
                                ` ('`')
                              , (',')
                              identifier ('util')
                              ) (')')
                          ; (';')
                        } ('}')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        unary_expression:
                          ! ('!')
                          call_expression:
                            member_expression:
                              member_expression:
                                member_expression:
                                  identifier ('Object')
                                  . ('.')
                                  property_identifier ('prototype')
                                . ('.')
                                property_identifier ('hasOwnProperty')
                              . ('.')
                              property_identifier ('call')
                            arguments:
                              ( ('(')
                              member_expression:
                                identifier ('resources')
                                . ('.')
                                property_identifier ('arrayBuffers')
                              , (',')
                              call_expression:
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('Cast')
                                  . ('.')
                                  property_identifier ('toString')
                                arguments:
                                  ( ('(')
                                  member_expression:
                                    identifier ('args')
                                    . ('.')
                                    property_identifier ('ARRAY')
                                  ) (')')
                              ) (')')
                        ) (')')
                      statement_block:
                        { ('{')
                        expression_statement:
                          call_expression:
                            member_expression:
                              this ('this')
                              . ('.')
                              property_identifier ('throwError')
                            arguments:
                              ( ('(')
                              string:
                                " ('"')
                                string_fragment ('ArrayNotFound')
                                " ('"')
                              , (',')
                              string:
                                " ('"')
                                string_fragment ("The provided array doesn't exist")
                                " ('"')
                              , (',')
                              string:
                                " ('"')
                                string_fragment ('ClearBuffer')
                                " ('"')
                              , (',')
                              template_string:
                                ` ('`')
                                string_fragment ('The array "')
                                template_substitution:
                                  ${ ('${')
                                  call_expression:
                                    member_expression:
                                      member_expression:
                                        identifier ('Scratch')
                                        . ('.')
                                        property_identifier ('Cast')
                                      . ('.')
                                      property_identifier ('toString')
                                    arguments:
                                      ( ('(')
                                      member_expression:
                                        identifier ('args')
                                        . ('.')
                                        property_identifier ('ARRAY')
                                      ) (')')
                                  } ('}')
                                string_fragment ('" doesn\'t exist')
                                ` ('`')
                              , (',')
                              identifier ('util')
                              ) (')')
                          ; (';')
                        } ('}')
                    expression_statement:
                      call_expression:
                        member_expression:
                          member_expression:
                            member_expression:
                              this ('this')
                              . ('.')
                              property_identifier ('device')
                            . ('.')
                            property_identifier ('queue')
                          . ('.')
                          property_identifier ('writeBuffer')
                        arguments:
                          ( ('(')
                          subscript_expression:
                            member_expression:
                              identifier ('resources')
                              . ('.')
                              property_identifier ('buffers')
                            [ ('[')
                            call_expression:
                              member_expression:
                                member_expression:
                                  identifier ('Scratch')
                                  . ('.')
                                  property_identifier ('Cast')
                                . ('.')
                                property_identifier ('toString')
                              arguments:
                                ( ('(')
                                member_expression:
                                  identifier ('args')
                                  . ('.')
                                  property_identifier ('BUFFER')
                                ) (')')
                            ] (']')
                          , (',')
                          call_expression:
                            member_expression:
                              member_expression:
                                identifier ('Scratch')
                                . ('.')
                                property_identifier ('Cast')
                              . ('.')
                              property_identifier ('toNumber')
                            arguments:
                              ( ('(')
                              member_expression:
                                identifier ('args')
                                . ('.')
                                property_identifier ('OFF2')
                              ) (')')
                          , (',')
                          subscript_expression:
                            member_expression:
                              identifier ('resources')
                              . ('.')
                              property_identifier ('arrayBuffers')
                            [ ('[')
                            call_expression:
                              member_expression:
                                member_expression:
                                  identifier ('Scratch')
                                  . ('.')
                                  property_identifier ('Cast')
                                . ('.')
                                property_identifier ('toString')
                              arguments:
                                ( ('(')
                                member_expression:
                                  identifier ('args')
                                  . ('.')
                                  property_identifier ('ARRAY')
                                ) (')')
                            ] (']')
                          , (',')
                          call_expression:
                            member_expression:
                              member_expression:
                                identifier ('Scratch')
                                . ('.')
                                property_identifier ('Cast')
                              . ('.')
                              property_identifier ('toNumber')
                            arguments:
                              ( ('(')
                              member_expression:
                                identifier ('args')
                                . ('.')
                                property_identifier ('OFF1')
                              ) (')')
                          , (',')
                          call_expression:
                            member_expression:
                              member_expression:
                                identifier ('Scratch')
                                . ('.')
                                property_identifier ('Cast')
                              . ('.')
                              property_identifier ('toNumber')
                            arguments:
                              ( ('(')
                              member_expression:
                                identifier ('args')
                                . ('.')
                                property_identifier ('SIZE')
                              ) (')')
                          ) (')')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('copyBufferToBuffer')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        binary_expression:
                          binary_expression:
                            binary_expression:
                              binary_expression:
                                call_expression:
                                  member_expression:
                                    member_expression:
                                      identifier ('Scratch')
                                      . ('.')
                                      property_identifier ('Cast')
                                    . ('.')
                                    property_identifier ('toNumber')
                                  arguments:
                                    ( ('(')
                                    member_expression:
                                      identifier ('args')
                                      . ('.')
                                      property_identifier ('NUMBYTES')
                                    ) (')')
                                <= ('<=')
                                number ('0')
                              || ('||')
                              binary_expression:
                                member_expression:
                                  identifier ('args')
                                  . ('.')
                                  property_identifier ('BUF1')
                                === ('===')
                                member_expression:
                                  identifier ('args')
                                  . ('.')
                                  property_identifier ('BUF2')
                            || ('||')
                            unary_expression:
                              ! ('!')
                              call_expression:
                                member_expression:
                                  member_expression:
                                    member_expression:
                                      identifier ('Object')
                                      . ('.')
                                      property_identifier ('prototype')
                                    . ('.')
                                    property_identifier ('hasOwnProperty')
                                  . ('.')
                                  property_identifier ('call')
                                arguments:
                                  ( ('(')
                                  member_expression:
                                    identifier ('resources')
                                    . ('.')
                                    property_identifier ('buffers')
                                  , (',')
                                  member_expression:
                                    identifier ('args')
                                    . ('.')
                                    property_identifier ('BUF1')
                                  ) (')')
                          || ('||')
                          unary_expression:
                            ! ('!')
                            call_expression:
                              member_expression:
                                member_expression:
                                  member_expression:
                                    identifier ('Object')
                                    . ('.')
                                    property_identifier ('prototype')
                                  . ('.')
                                  property_identifier ('hasOwnProperty')
                                . ('.')
                                property_identifier ('call')
                              arguments:
                                ( ('(')
                                member_expression:
                                  identifier ('resources')
                                  . ('.')
                                  property_identifier ('buffers')
                                , (',')
                                member_expression:
                                  identifier ('args')
                                  . ('.')
                                  property_identifier ('BUF1')
                                ) (')')
                        ) (')')
                      statement_block:
                        { ('{')
                        expression_statement:
                          call_expression:
                            member_expression:
                              this ('this')
                              . ('.')
                              property_identifier ('throwError')
                            arguments:
                              ( ('(')
                              string:
                                " ('"')
                                string_fragment ('InvalidInput')
                                " ('"')
                              , (',')
                              string:
                                " ('"')
                                string_fragment ('Invalid input recieved when trying to copy data')
                                " ('"')
                              , (',')
                              string:
                                " ('"')
                                string_fragment ('CopyDataBlock')
                                " ('"')
                              , (',')
                              string:
                                " ('"')
                                string_fragment ("Failed to copy data between buffers, check that the buffers exist, buffer 1 isn't the same as buffer 2, and the number of bytes is more than or equal to 0")
                                " ('"')
                              , (',')
                              identifier ('util')
                              ) (')')
                          ; (';')
                        return_statement:
                          return ('return')
                          ; (';')
                        } ('}')
                    lexical_declaration:
                      const ('const')
                      variable_declarator:
                        identifier ('commandEncoder')
                        = ('=')
                        call_expression:
                          member_expression:
                            member_expression:
                              this ('this')
                              . ('.')
                              property_identifier ('device')
                            . ('.')
                            property_identifier ('createCommandEncoder')
                          arguments:
                            ( ('(')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('label')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('copyBuffer encoder')
                                  " ('"')
                              , (',')
                              } ('}')
                            ) (')')
                      ; (';')
                    expression_statement:
                      call_expression:
                        member_expression:
                          member_expression:
                            this ('this')
                            . ('.')
                            property_identifier ('device')
                          . ('.')
                          property_identifier ('pushErrorScope')
                        arguments:
                          ( ('(')
                          string:
                            " ('"')
                            string_fragment ('validation')
                            " ('"')
                          ) (')')
                      ; (';')
                    expression_statement:
                      call_expression:
                        member_expression:
                          member_expression:
                            this ('this')
                            . ('.')
                            property_identifier ('device')
                          . ('.')
                          property_identifier ('pushErrorScope')
                        arguments:
                          ( ('(')
                          string:
                            " ('"')
                            string_fragment ('internal')
                            " ('"')
                          ) (')')
                      ; (';')
                    expression_statement:
                      call_expression:
                        member_expression:
                          identifier ('commandEncoder')
                          . ('.')
                          property_identifier ('copyBufferToBuffer')
                        arguments:
                          ( ('(')
                          subscript_expression:
                            member_expression:
                              identifier ('resources')
                              . ('.')
                              property_identifier ('buffers')
                            [ ('[')
                            member_expression:
                              identifier ('args')
                              . ('.')
                              property_identifier ('BUF1')
                            ] (']')
                          , (',')
                          call_expression:
                            member_expression:
                              member_expression:
                                identifier ('Scratch')
                                . ('.')
                                property_identifier ('Cast')
                              . ('.')
                              property_identifier ('toNumber')
                            arguments:
                              ( ('(')
                              member_expression:
                                identifier ('args')
                                . ('.')
                                property_identifier ('BUF1OFF')
                              ) (')')
                          , (',')
                          subscript_expression:
                            member_expression:
                              identifier ('resources')
                              . ('.')
                              property_identifier ('buffers')
                            [ ('[')
                            member_expression:
                              identifier ('args')
                              . ('.')
                              property_identifier ('BUF2')
                            ] (']')
                          , (',')
                          call_expression:
                            member_expression:
                              member_expression:
                                identifier ('Scratch')
                                . ('.')
                                property_identifier ('Cast')
                              . ('.')
                              property_identifier ('toNumber')
                            arguments:
                              ( ('(')
                              member_expression:
                                identifier ('args')
                                . ('.')
                                property_identifier ('BUF2OFF')
                              ) (')')
                          , (',')
                          call_expression:
                            member_expression:
                              member_expression:
                                identifier ('Scratch')
                                . ('.')
                                property_identifier ('Cast')
                              . ('.')
                              property_identifier ('toNumber')
                            arguments:
                              ( ('(')
                              member_expression:
                                identifier ('args')
                                . ('.')
                                property_identifier ('NUMBYTES')
                              ) (')')
                          ) (')')
                      ; (';')
                    expression_statement:
                      call_expression:
                        member_expression:
                          call_expression:
                            member_expression:
                              member_expression:
                                this ('this')
                                . ('.')
                                property_identifier ('device')
                              . ('.')
                              property_identifier ('popErrorScope')
                            arguments:
                              ( ('(')
                              ) (')')
                          . ('.')
                          property_identifier ('then')
                        arguments:
                          ( ('(')
                          arrow_function:
                            formal_parameters:
                              ( ('(')
                              identifier ('error')
                              ) (')')
                            => ('=>')
                            statement_block:
                              { ('{')
                              if_statement:
                                if ('if')
                                parenthesized_expression:
                                  ( ('(')
                                  identifier ('error')
                                  ) (')')
                                expression_statement:
                                  call_expression:
                                    member_expression:
                                      this ('this')
                                      . ('.')
                                      property_identifier ('throwError')
                                    arguments:
                                      ( ('(')
                                      string:
                                        " ('"')
                                        string_fragment ('CopyBufferToBufferError')
                                        " ('"')
                                      , (',')
                                      member_expression:
                                        identifier ('error')
                                        . ('.')
                                        property_identifier ('message')
                                      , (',')
                                      string:
                                        " ('"')
                                        string_fragment ('CopyingBufferToBuffer')
                                        " ('"')
                                      , (',')
                                      identifier ('error')
                                      , (',')
                                      identifier ('util')
                                      ) (')')
                                  ; (';')
                              } ('}')
                          ) (')')
                      ; (';')
                    expression_statement:
                      call_expression:
                        member_expression:
                          call_expression:
                            member_expression:
                              member_expression:
                                this ('this')
                                . ('.')
                                property_identifier ('device')
                              . ('.')
                              property_identifier ('popErrorScope')
                            arguments:
                              ( ('(')
                              ) (')')
                          . ('.')
                          property_identifier ('then')
                        arguments:
                          ( ('(')
                          arrow_function:
                            formal_parameters:
                              ( ('(')
                              identifier ('error')
                              ) (')')
                            => ('=>')
                            statement_block:
                              { ('{')
                              if_statement:
                                if ('if')
                                parenthesized_expression:
                                  ( ('(')
                                  identifier ('error')
                                  ) (')')
                                expression_statement:
                                  call_expression:
                                    member_expression:
                                      this ('this')
                                      . ('.')
                                      property_identifier ('throwError')
                                    arguments:
                                      ( ('(')
                                      string:
                                        " ('"')
                                        string_fragment ('CopyBufferToBufferError')
                                        " ('"')
                                      , (',')
                                      member_expression:
                                        identifier ('error')
                                        . ('.')
                                        property_identifier ('message')
                                      , (',')
                                      string:
                                        " ('"')
                                        string_fragment ('CopyingBufferToBuffer')
                                        " ('"')
                                      , (',')
                                      identifier ('error')
                                      , (',')
                                      identifier ('util')
                                      ) (')')
                                  ; (';')
                              } ('}')
                          ) (')')
                      ; (';')
                    expression_statement:
                      call_expression:
                        member_expression:
                          member_expression:
                            member_expression:
                              this ('this')
                              . ('.')
                              property_identifier ('device')
                            . ('.')
                            property_identifier ('queue')
                          . ('.')
                          property_identifier ('submit')
                        arguments:
                          ( ('(')
                          array:
                            [ ('[')
                            call_expression:
                              member_expression:
                                identifier ('commandEncoder')
                                . ('.')
                                property_identifier ('finish')
                              arguments:
                                ( ('(')
                                ) (')')
                            ] (']')
                          ) (')')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('clearBuffer')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        binary_expression:
                          binary_expression:
                            call_expression:
                              member_expression:
                                member_expression:
                                  identifier ('Scratch')
                                  . ('.')
                                  property_identifier ('Cast')
                                . ('.')
                                property_identifier ('toNumber')
                              arguments:
                                ( ('(')
                                member_expression:
                                  identifier ('args')
                                  . ('.')
                                  property_identifier ('NUMBYTES')
                                ) (')')
                            <= ('<=')
                            number ('0')
                          && ('&&')
                          binary_expression:
                            call_expression:
                              member_expression:
                                member_expression:
                                  identifier ('Scratch')
                                  . ('.')
                                  property_identifier ('Cast')
                                . ('.')
                                property_identifier ('toNumber')
                              arguments:
                                ( ('(')
                                member_expression:
                                  identifier ('args')
                                  . ('.')
                                  property_identifier ('NUMBYTES')
                                ) (')')
                            !== ('!==')
                            unary_expression:
                              - ('-')
                              number ('1')
                        ) (')')
                      statement_block:
                        { ('{')
                        expression_statement:
                          call_expression:
                            member_expression:
                              this ('this')
                              . ('.')
                              property_identifier ('throwError')
                            arguments:
                              ( ('(')
                              string:
                                " ('"')
                                string_fragment ('InvalidInput')
                                " ('"')
                              , (',')
                              string:
                                " ('"')
                                string_fragment ('Invalid number of bytes to clear')
                                " ('"')
                              , (',')
                              string:
                                " ('"')
                                string_fragment ('ClearBuffer')
                                " ('"')
                              , (',')
                              template_string:
                                ` ('`')
                                string_fragment ('The provided number of bytes to clear, ')
                                template_substitution:
                                  ${ ('${')
                                  call_expression:
                                    member_expression:
                                      member_expression:
                                        identifier ('Scratch')
                                        . ('.')
                                        property_identifier ('Cast')
                                      . ('.')
                                      property_identifier ('toNumber')
                                    arguments:
                                      ( ('(')
                                      member_expression:
                                        identifier ('args')
                                        . ('.')
                                        property_identifier ('NUMBYTES')
                                      ) (')')
                                  } ('}')
                                string_fragment (', is invalid. Must be more than 0, or -1 to clear all.')
                                ` ('`')
                              ) (')')
                          ; (';')
                        } ('}')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        unary_expression:
                          ! ('!')
                          call_expression:
                            member_expression:
                              member_expression:
                                member_expression:
                                  identifier ('Object')
                                  . ('.')
                                  property_identifier ('prototype')
                                . ('.')
                                property_identifier ('hasOwnProperty')
                              . ('.')
                              property_identifier ('call')
                            arguments:
                              ( ('(')
                              member_expression:
                                identifier ('resources')
                                . ('.')
                                property_identifier ('buffers')
                              , (',')
                              call_expression:
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('Cast')
                                  . ('.')
                                  property_identifier ('toString')
                                arguments:
                                  ( ('(')
                                  member_expression:
                                    identifier ('args')
                                    . ('.')
                                    property_identifier ('BUFFER')
                                  ) (')')
                              ) (')')
                        ) (')')
                      statement_block:
                        { ('{')
                        expression_statement:
                          call_expression:
                            member_expression:
                              this ('this')
                              . ('.')
                              property_identifier ('throwError')
                            arguments:
                              ( ('(')
                              string:
                                " ('"')
                                string_fragment ('BufferNotFound')
                                " ('"')
                              , (',')
                              string:
                                " ('"')
                                string_fragment ("The provided buffer doesn't exist")
                                " ('"')
                              , (',')
                              string:
                                " ('"')
                                string_fragment ('ClearBuffer')
                                " ('"')
                              , (',')
                              template_string:
                                ` ('`')
                                string_fragment ('The buffer "')
                                template_substitution:
                                  ${ ('${')
                                  call_expression:
                                    member_expression:
                                      member_expression:
                                        identifier ('Scratch')
                                        . ('.')
                                        property_identifier ('Cast')
                                      . ('.')
                                      property_identifier ('toString')
                                    arguments:
                                      ( ('(')
                                      member_expression:
                                        identifier ('args')
                                        . ('.')
                                        property_identifier ('BUFFER')
                                      ) (')')
                                  } ('}')
                                string_fragment ('" doesn\'t exist')
                                ` ('`')
                              , (',')
                              identifier ('util')
                              ) (')')
                          ; (';')
                        } ('}')
                    lexical_declaration:
                      const ('const')
                      variable_declarator:
                        identifier ('commandEncoder')
                        = ('=')
                        call_expression:
                          member_expression:
                            member_expression:
                              this ('this')
                              . ('.')
                              property_identifier ('device')
                            . ('.')
                            property_identifier ('createCommandEncoder')
                          arguments:
                            ( ('(')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('label')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('clearBuffer encoder')
                                  " ('"')
                              , (',')
                              } ('}')
                            ) (')')
                      ; (';')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        binary_expression:
                          call_expression:
                            member_expression:
                              member_expression:
                                identifier ('Scratch')
                                . ('.')
                                property_identifier ('Cast')
                              . ('.')
                              property_identifier ('toNumber')
                            arguments:
                              ( ('(')
                              member_expression:
                                identifier ('args')
                                . ('.')
                                property_identifier ('NUMBYTES')
                              ) (')')
                          === ('===')
                          unary_expression:
                            - ('-')
                            number ('1')
                        ) (')')
                      statement_block:
                        { ('{')
                        expression_statement:
                          call_expression:
                            member_expression:
                              identifier ('commandEncoder')
                              . ('.')
                              property_identifier ('clearBuffer')
                            arguments:
                              ( ('(')
                              subscript_expression:
                                member_expression:
                                  identifier ('resources')
                                  . ('.')
                                  property_identifier ('buffers')
                                [ ('[')
                                call_expression:
                                  member_expression:
                                    member_expression:
                                      identifier ('Scratch')
                                      . ('.')
                                      property_identifier ('Cast')
                                    . ('.')
                                    property_identifier ('toString')
                                  arguments:
                                    ( ('(')
                                    member_expression:
                                      identifier ('args')
                                      . ('.')
                                      property_identifier ('BUFFER')
                                    ) (')')
                                ] (']')
                              ) (')')
                          ; (';')
                        } ('}')
                      else_clause:
                        else ('else')
                        statement_block:
                          { ('{')
                          expression_statement:
                            call_expression:
                              member_expression:
                                identifier ('commandEncoder')
                                . ('.')
                                property_identifier ('clearBuffer')
                              arguments:
                                ( ('(')
                                subscript_expression:
                                  member_expression:
                                    identifier ('resources')
                                    . ('.')
                                    property_identifier ('buffers')
                                  [ ('[')
                                  call_expression:
                                    member_expression:
                                      member_expression:
                                        identifier ('Scratch')
                                        . ('.')
                                        property_identifier ('Cast')
                                      . ('.')
                                      property_identifier ('toString')
                                    arguments:
                                      ( ('(')
                                      member_expression:
                                        identifier ('args')
                                        . ('.')
                                        property_identifier ('BUFFER')
                                      ) (')')
                                  ] (']')
                                , (',')
                                call_expression:
                                  member_expression:
                                    member_expression:
                                      identifier ('Scratch')
                                      . ('.')
                                      property_identifier ('Cast')
                                    . ('.')
                                    property_identifier ('toNumber')
                                  arguments:
                                    ( ('(')
                                    member_expression:
                                      identifier ('args')
                                      . ('.')
                                      property_identifier ('OFFSET')
                                    ) (')')
                                , (',')
                                call_expression:
                                  member_expression:
                                    member_expression:
                                      identifier ('Scratch')
                                      . ('.')
                                      property_identifier ('Cast')
                                    . ('.')
                                    property_identifier ('toNumber')
                                  arguments:
                                    ( ('(')
                                    member_expression:
                                      identifier ('args')
                                      . ('.')
                                      property_identifier ('NUMBYTES')
                                    ) (')')
                                ) (')')
                            ; (';')
                          } ('}')
                    } ('}')
                method_definition:
                  async ('async')
                  property_identifier ('readBuffer')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    comment ('// WARNING:')
                    comment ('// MAY CONTAIN BAD IDEA JUICE')
                    comment ('// GPUMapMode.READ assumes no writing will be done')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        unary_expression:
                          ! ('!')
                          call_expression:
                            member_expression:
                              member_expression:
                                member_expression:
                                  identifier ('Object')
                                  . ('.')
                                  property_identifier ('prototype')
                                . ('.')
                                property_identifier ('hasOwnProperty')
                              . ('.')
                              property_identifier ('call')
                            arguments:
                              ( ('(')
                              member_expression:
                                identifier ('resources')
                                . ('.')
                                property_identifier ('buffers')
                              , (',')
                              member_expression:
                                identifier ('args')
                                . ('.')
                                property_identifier ('BUFFER')
                              ) (')')
                        ) (')')
                      statement_block:
                        { ('{')
                        expression_statement:
                          call_expression:
                            member_expression:
                              this ('this')
                              . ('.')
                              property_identifier ('throwError')
                            arguments:
                              ( ('(')
                              string:
                                " ('"')
                                string_fragment ('BufferNotFound')
                                " ('"')
                              , (',')
                              string:
                                " ('"')
                                string_fragment ("The buffer provided doesn't exist")
                                " ('"')
                              , (',')
                              string:
                                " ('"')
                                string_fragment ('ReadBuffer')
                                " ('"')
                              , (',')
                              template_string:
                                ` ('`')
                                string_fragment ('Buffer "')
                                template_substitution:
                                  ${ ('${')
                                  member_expression:
                                    identifier ('args')
                                    . ('.')
                                    property_identifier ('BUFFER')
                                  } ('}')
                                string_fragment ('" doesn\'t exist.')
                                ` ('`')
                              , (',')
                              identifier ('util')
                              ) (')')
                          ; (';')
                        return_statement:
                          return ('return')
                          ; (';')
                        } ('}')
                    comment ('// let data = ["you done messed up"]')
                    expression_statement:
                      call_expression:
                        member_expression:
                          member_expression:
                            this ('this')
                            . ('.')
                            property_identifier ('device')
                          . ('.')
                          property_identifier ('pushErrorScope')
                        arguments:
                          ( ('(')
                          string:
                            " ('"')
                            string_fragment ('validation')
                            " ('"')
                          ) (')')
                      ; (';')
                    expression_statement:
                      call_expression:
                        member_expression:
                          member_expression:
                            this ('this')
                            . ('.')
                            property_identifier ('device')
                          . ('.')
                          property_identifier ('pushErrorScope')
                        arguments:
                          ( ('(')
                          string:
                            " ('"')
                            string_fragment ('internal')
                            " ('"')
                          ) (')')
                      ; (';')
                    expression_statement:
                      await_expression:
                        await ('await')
                        call_expression:
                          member_expression:
                            subscript_expression:
                              member_expression:
                                identifier ('resources')
                                . ('.')
                                property_identifier ('buffers')
                              [ ('[')
                              member_expression:
                                identifier ('args')
                                . ('.')
                                property_identifier ('BUFFER')
                              ] (']')
                            . ('.')
                            property_identifier ('mapAsync')
                          arguments:
                            ( ('(')
                            comment ("/* eslint-disable-next-line --\n         * Eslint doesn't like WebGPU, there's a type module for this.\n         */")
                            member_expression:
                              identifier ('GPUMapMode')
                              . ('.')
                              property_identifier ('READ')
                            comment ('// 0,')
                            comment ('// shaders[args.SHADER].inputs[Scratch.Cast.toNumber(args.BINDING)].input.size,')
                            ) (')')
                      ; (';')
                    lexical_declaration:
                      const ('const')
                      variable_declarator:
                        identifier ('copyArrayBuffer')
                        = ('=')
                        call_expression:
                          member_expression:
                            call_expression:
                              member_expression:
                                subscript_expression:
                                  member_expression:
                                    identifier ('resources')
                                    . ('.')
                                    property_identifier ('buffers')
                                  [ ('[')
                                  member_expression:
                                    identifier ('args')
                                    . ('.')
                                    property_identifier ('BUFFER')
                                  ] (']')
                                . ('.')
                                property_identifier ('getMappedRange')
                              arguments:
                                ( ('(')
                                comment ('/*0, shaders[args.SHADER].inputs[Scratch.Cast.toNumber(args.BINDING)].input.size*/')
                                ) (')')
                            . ('.')
                            property_identifier ('slice')
                          arguments:
                            ( ('(')
                            ) (')')
                      ; (';')
                    expression_statement:
                      call_expression:
                        member_expression:
                          identifier ('console')
                          . ('.')
                          property_identifier ('log')
                        arguments:
                          ( ('(')
                          identifier ('copyArrayBuffer')
                          ) (')')
                      ; (';')
                    expression_statement:
                      assignment_expression:
                        member_expression:
                          member_expression:
                            identifier ('resources')
                            . ('.')
                            property_identifier ('views')
                          . ('.')
                          property_identifier ('testview')
                        = ('=')
                        new_expression:
                          new ('new')
                          identifier ('Float32Array')
                          arguments:
                            ( ('(')
                            identifier ('copyArrayBuffer')
                            ) (')')
                      ; (';')
                    expression_statement:
                      call_expression:
                        member_expression:
                          subscript_expression:
                            member_expression:
                              identifier ('resources')
                              . ('.')
                              property_identifier ('buffers')
                            [ ('[')
                            member_expression:
                              identifier ('args')
                              . ('.')
                              property_identifier ('BUFFER')
                            ] (']')
                          . ('.')
                          property_identifier ('unmap')
                        arguments:
                          ( ('(')
                          ) (')')
                      ; (';')
                    expression_statement:
                      call_expression:
                        member_expression:
                          call_expression:
                            member_expression:
                              member_expression:
                                this ('this')
                                . ('.')
                                property_identifier ('device')
                              . ('.')
                              property_identifier ('popErrorScope')
                            arguments:
                              ( ('(')
                              ) (')')
                          . ('.')
                          property_identifier ('then')
                        arguments:
                          ( ('(')
                          arrow_function:
                            formal_parameters:
                              ( ('(')
                              identifier ('error')
                              ) (')')
                            => ('=>')
                            statement_block:
                              { ('{')
                              if_statement:
                                if ('if')
                                parenthesized_expression:
                                  ( ('(')
                                  identifier ('error')
                                  ) (')')
                                expression_statement:
                                  call_expression:
                                    member_expression:
                                      this ('this')
                                      . ('.')
                                      property_identifier ('throwError')
                                    arguments:
                                      ( ('(')
                                      string:
                                        " ('"')
                                        string_fragment ('BufferReadError')
                                        " ('"')
                                      , (',')
                                      member_expression:
                                        identifier ('error')
                                        . ('.')
                                        property_identifier ('message')
                                      , (',')
                                      string:
                                        " ('"')
                                        string_fragment ('ReadBuffer')
                                        " ('"')
                                      , (',')
                                      identifier ('error')
                                      , (',')
                                      identifier ('util')
                                      ) (')')
                                  ; (';')
                              } ('}')
                          ) (')')
                      ; (';')
                    expression_statement:
                      call_expression:
                        member_expression:
                          call_expression:
                            member_expression:
                              member_expression:
                                this ('this')
                                . ('.')
                                property_identifier ('device')
                              . ('.')
                              property_identifier ('popErrorScope')
                            arguments:
                              ( ('(')
                              ) (')')
                          . ('.')
                          property_identifier ('then')
                        arguments:
                          ( ('(')
                          arrow_function:
                            formal_parameters:
                              ( ('(')
                              identifier ('error')
                              ) (')')
                            => ('=>')
                            statement_block:
                              { ('{')
                              if_statement:
                                if ('if')
                                parenthesized_expression:
                                  ( ('(')
                                  identifier ('error')
                                  ) (')')
                                expression_statement:
                                  call_expression:
                                    member_expression:
                                      this ('this')
                                      . ('.')
                                      property_identifier ('throwError')
                                    arguments:
                                      ( ('(')
                                      string:
                                        " ('"')
                                        string_fragment ('BufferReadError')
                                        " ('"')
                                      , (',')
                                      member_expression:
                                        identifier ('error')
                                        . ('.')
                                        property_identifier ('message')
                                      , (',')
                                      string:
                                        " ('"')
                                        string_fragment ('ReadBuffer')
                                        " ('"')
                                      , (',')
                                      identifier ('error')
                                      , (',')
                                      identifier ('util')
                                      ) (')')
                                  ; (';')
                              } ('}')
                          ) (')')
                      ; (';')
                    expression_statement:
                      assignment_expression:
                        subscript_expression:
                          member_expression:
                            identifier ('resources')
                            . ('.')
                            property_identifier ('arrayBuffers')
                          [ ('[')
                          call_expression:
                            member_expression:
                              member_expression:
                                identifier ('Scratch')
                                . ('.')
                                property_identifier ('Cast')
                              . ('.')
                              property_identifier ('toString')
                            arguments:
                              ( ('(')
                              member_expression:
                                identifier ('args')
                                . ('.')
                                property_identifier ('ARRAYBUFFER')
                              ) (')')
                          ] (']')
                        = ('=')
                        identifier ('copyArrayBuffer')
                      ; (';')
                    comment ('// todo: error handling here')
                    comment ('// @ts-ignore')
                    comment ('//return JSON.stringify(Array.from(new Float32Array(data)));')
                    } ('}')
                method_definition:
                  property_identifier ('error')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    return_statement:
                      return ('return')
                      call_expression:
                        member_expression:
                          identifier ('JSON')
                          . ('.')
                          property_identifier ('stringify')
                        arguments:
                          ( ('(')
                          identifier ('error')
                          ) (')')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('clearError')
                  formal_parameters:
                    ( ('(')
                    ) (')')
                  statement_block:
                    { ('{')
                    expression_statement:
                      assignment_expression:
                        identifier ('error')
                        = ('=')
                        object:
                          { ('{')
                          } ('}')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('c_arbitraryWGSL')
                  formal_parameters:
                    ( ('(')
                    ) (')')
                  statement_block:
                    { ('{')
                    } ('}')
                method_definition:
                  property_identifier ('r_arbitraryWGSL')
                  formal_parameters:
                    ( ('(')
                    ) (')')
                  statement_block:
                    { ('{')
                    return_statement:
                      return ('return')
                      string:
                        " ('"')
                        string_fragment ('This block allows you to add custom WGSL to your shaders.')
                        " ('"')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('atomicType')
                  formal_parameters:
                    ( ('(')
                    ) (')')
                  statement_block:
                    { ('{')
                    return_statement:
                      return ('return')
                      string:
                        " ('"')
                        string_fragment ('This block returns a type that can be used to declare an atomic variable.')
                        " ('"')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('atomicLoad')
                  formal_parameters:
                    ( ('(')
                    ) (')')
                  statement_block:
                    { ('{')
                    return_statement:
                      return ('return')
                      string:
                        " ('"')
                        string_fragment ('This block gets an atomic function')
                        " ('"')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('c_atomicFunc')
                  formal_parameters:
                    ( ('(')
                    ) (')')
                  statement_block:
                    { ('{')
                    } ('}')
                method_definition:
                  property_identifier ('r_atomicFunc')
                  formal_parameters:
                    ( ('(')
                    ) (')')
                  statement_block:
                    { ('{')
                    return_statement:
                      return ('return')
                      string:
                        " ('"')
                        string_fragment ('This block performs a thread safe operation on an atomic variable.')
                        " ('"')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('barrier')
                  formal_parameters:
                    ( ('(')
                    ) (')')
                  statement_block:
                    { ('{')
                    } ('}')
                method_definition:
                  property_identifier ('variablePointer')
                  formal_parameters:
                    ( ('(')
                    ) (')')
                  statement_block:
                    { ('{')
                    return_statement:
                      return ('return')
                      string:
                        " ('"')
                        string_fragment ('This block converts a variable to a pointer. Equivilant to *someVar in c.')
                        " ('"')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('createAB')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    expression_statement:
                      assignment_expression:
                        subscript_expression:
                          member_expression:
                            identifier ('resources')
                            . ('.')
                            property_identifier ('arrayBuffers')
                          [ ('[')
                          call_expression:
                            member_expression:
                              member_expression:
                                identifier ('Scratch')
                                . ('.')
                                property_identifier ('Cast')
                              . ('.')
                              property_identifier ('toString')
                            arguments:
                              ( ('(')
                              member_expression:
                                identifier ('args')
                                . ('.')
                                property_identifier ('ARRAYBUFFER')
                              ) (')')
                          ] (']')
                        = ('=')
                        new_expression:
                          new ('new')
                          identifier ('ArrayBuffer')
                          arguments:
                            ( ('(')
                            call_expression:
                              member_expression:
                                member_expression:
                                  identifier ('Scratch')
                                  . ('.')
                                  property_identifier ('Cast')
                                . ('.')
                                property_identifier ('toNumber')
                              arguments:
                                ( ('(')
                                member_expression:
                                  identifier ('args')
                                  . ('.')
                                  property_identifier ('LENGTH')
                                ) (')')
                            ) (')')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('getArrayBuffers')
                  formal_parameters:
                    ( ('(')
                    ) (')')
                  statement_block:
                    { ('{')
                    comment ('// note to self: the buffer object on view is views[key]')
                    comment ('// this code is bad and i hate it')
                    return_statement:
                      return ('return')
                      call_expression:
                        member_expression:
                          call_expression:
                            member_expression:
                              identifier ('Array')
                              . ('.')
                              property_identifier ('from')
                            arguments:
                              ( ('(')
                              call_expression:
                                member_expression:
                                  parenthesized_expression:
                                    ( ('(')
                                    binary_expression:
                                      member_expression:
                                        identifier ('buffersExt')
                                        optional_chain ('?.')
                                        property_identifier ('views')
                                      ?? ('??')
                                      new_expression:
                                        new ('new')
                                        identifier ('Map')
                                        arguments:
                                          ( ('(')
                                          ) (')')
                                    ) (')')
                                  . ('.')
                                  property_identifier ('keys')
                                arguments:
                                  ( ('(')
                                  ) (')')
                              ) (')')
                          . ('.')
                          property_identifier ('concat')
                        arguments:
                          ( ('(')
                          call_expression:
                            member_expression:
                              identifier ('Object')
                              . ('.')
                              property_identifier ('keys')
                            arguments:
                              ( ('(')
                              member_expression:
                                identifier ('resources')
                                . ('.')
                                property_identifier ('arrayBuffers')
                              ) (')')
                          ) (')')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('getArrayBuffersMenu')
                  formal_parameters:
                    ( ('(')
                    ) (')')
                  statement_block:
                    { ('{')
                    comment ('// note to self: the buffer object on view is views[key]')
                    comment ('// this code is bad and i hate it')
                    lexical_declaration:
                      const ('const')
                      variable_declarator:
                        identifier ('a')
                        = ('=')
                        call_expression:
                          member_expression:
                            call_expression:
                              member_expression:
                                identifier ('Array')
                                . ('.')
                                property_identifier ('from')
                              arguments:
                                ( ('(')
                                call_expression:
                                  member_expression:
                                    parenthesized_expression:
                                      ( ('(')
                                      binary_expression:
                                        member_expression:
                                          identifier ('buffersExt')
                                          optional_chain ('?.')
                                          property_identifier ('views')
                                        ?? ('??')
                                        new_expression:
                                          new ('new')
                                          identifier ('Map')
                                          arguments:
                                            ( ('(')
                                            ) (')')
                                      ) (')')
                                    . ('.')
                                    property_identifier ('keys')
                                  arguments:
                                    ( ('(')
                                    ) (')')
                                ) (')')
                            . ('.')
                            property_identifier ('concat')
                          arguments:
                            ( ('(')
                            call_expression:
                              member_expression:
                                identifier ('Object')
                                . ('.')
                                property_identifier ('keys')
                              arguments:
                                ( ('(')
                                member_expression:
                                  identifier ('resources')
                                  . ('.')
                                  property_identifier ('arrayBuffers')
                                ) (')')
                            ) (')')
                      ; (';')
                    return_statement:
                      return ('return')
                      ternary_expression:
                        binary_expression:
                          member_expression:
                            identifier ('a')
                            . ('.')
                            property_identifier ('length')
                          < ('<')
                          number ('1')
                        ? ('?')
                        call_expression:
                          member_expression:
                            identifier ('a')
                            . ('.')
                            property_identifier ('concat')
                          arguments:
                            ( ('(')
                            string:
                              " ('"')
                              string_fragment ('Choose a buffer')
                              " ('"')
                            ) (')')
                        : (':')
                        identifier ('a')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('createABView')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    comment ('/*if (!Object.prototype.hasOwnProperty.call(resources.arrayBuffers,Scratch.Cast.toString(args.ARRAYBUFFER))) {\n                this.throwError("ArrayBufferNotFound", "Couldn\'t find array buffer", "CreateArrayBufferView", "The specified array buffer to view doesn\'t exist")\n            }*/')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        binary_expression:
                          call_expression:
                            member_expression:
                              member_expression:
                                identifier ('Scratch')
                                . ('.')
                                property_identifier ('Cast')
                              . ('.')
                              property_identifier ('toString')
                            arguments:
                              ( ('(')
                              member_expression:
                                identifier ('args')
                                . ('.')
                                property_identifier ('NAME')
                              ) (')')
                          == ('==')
                          string:
                            " ('"')
                            " ('"')
                        ) (')')
                      return_statement:
                        return ('return')
                        ; (';')
                    comment ('// this looks weird in the list')
                    expression_statement:
                      assignment_expression:
                        subscript_expression:
                          member_expression:
                            identifier ('resources')
                            . ('.')
                            property_identifier ('views')
                          [ ('[')
                          call_expression:
                            member_expression:
                              member_expression:
                                identifier ('Scratch')
                                . ('.')
                                property_identifier ('Cast')
                              . ('.')
                              property_identifier ('toString')
                            arguments:
                              ( ('(')
                              member_expression:
                                identifier ('args')
                                . ('.')
                                property_identifier ('NAME')
                              ) (')')
                          ] (']')
                        = ('=')
                        call_expression:
                          member_expression:
                            this ('this')
                            . ('.')
                            property_identifier ('typedArrayFromType')
                          arguments:
                            ( ('(')
                            call_expression:
                              member_expression:
                                member_expression:
                                  identifier ('Scratch')
                                  . ('.')
                                  property_identifier ('Cast')
                                . ('.')
                                property_identifier ('toString')
                              arguments:
                                ( ('(')
                                member_expression:
                                  identifier ('args')
                                  . ('.')
                                  property_identifier ('TYPE')
                                ) (')')
                            , (',')
                            subscript_expression:
                              member_expression:
                                identifier ('resources')
                                . ('.')
                                property_identifier ('arrayBuffers')
                              [ ('[')
                              call_expression:
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('Cast')
                                  . ('.')
                                  property_identifier ('toString')
                                arguments:
                                  ( ('(')
                                  member_expression:
                                    identifier ('args')
                                    . ('.')
                                    property_identifier ('ARRAYBUFFER')
                                  ) (')')
                              ] (']')
                            ) (')')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('typedArrayFromType')
                  formal_parameters:
                    ( ('(')
                    identifier ('type')
                    , (',')
                    identifier ('data')
                    ) (')')
                  statement_block:
                    { ('{')
                    lexical_declaration:
                      const ('const')
                      variable_declarator:
                        identifier ('t')
                        = ('=')
                        object:
                          { ('{')
                          pair:
                            property_identifier ('Int32Array')
                            : (':')
                            identifier ('Int32Array')
                          , (',')
                          pair:
                            property_identifier ('Uint32Array')
                            : (':')
                            identifier ('Uint32Array')
                          , (',')
                          pair:
                            property_identifier ('Float32Array')
                            : (':')
                            identifier ('Float32Array')
                          , (',')
                          pair:
                            property_identifier ('Int8Array')
                            : (':')
                            identifier ('Int8Array')
                          , (',')
                          pair:
                            property_identifier ('Uint8Array')
                            : (':')
                            identifier ('Uint8Array')
                          , (',')
                          pair:
                            property_identifier ('Uint8ClampedArray')
                            : (':')
                            identifier ('Uint8ClampedArray')
                          , (',')
                          pair:
                            property_identifier ('Int16Array')
                            : (':')
                            identifier ('Int16Array')
                          , (',')
                          pair:
                            property_identifier ('Uint16Array')
                            : (':')
                            identifier ('Uint16Array')
                          , (',')
                          pair:
                            property_identifier ('BigInt64Array')
                            : (':')
                            identifier ('BigInt64Array')
                          , (',')
                          pair:
                            property_identifier ('BigUint64Array')
                            : (':')
                            identifier ('BigUint64Array')
                          , (',')
                          pair:
                            property_identifier ('Float64Array')
                            : (':')
                            identifier ('Float64Array')
                          , (',')
                          } ('}')
                      ; (';')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        unary_expression:
                          ! ('!')
                          call_expression:
                            member_expression:
                              member_expression:
                                member_expression:
                                  identifier ('Object')
                                  . ('.')
                                  property_identifier ('prototype')
                                . ('.')
                                property_identifier ('hasOwnProperty')
                              . ('.')
                              property_identifier ('call')
                            arguments:
                              ( ('(')
                              identifier ('t')
                              , (',')
                              identifier ('type')
                              ) (')')
                        ) (')')
                      expression_statement:
                        assignment_expression:
                          identifier ('type')
                          = ('=')
                          string:
                            " ('"')
                            string_fragment ('Int32Array')
                            " ('"')
                        ; (';')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        identifier ('data')
                        ) (')')
                      return_statement:
                        return ('return')
                        new_expression:
                          new ('new')
                          subscript_expression:
                            identifier ('t')
                            [ ('[')
                            identifier ('type')
                            ] (']')
                          arguments:
                            ( ('(')
                            identifier ('data')
                            ) (')')
                        ; (';')
                    return_statement:
                      return ('return')
                      new_expression:
                        new ('new')
                        subscript_expression:
                          identifier ('t')
                          [ ('[')
                          identifier ('type')
                          ] (']')
                        arguments:
                          ( ('(')
                          ) (')')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('listABs')
                  formal_parameters:
                    ( ('(')
                    ) (')')
                  statement_block:
                    { ('{')
                    return_statement:
                      return ('return')
                      call_expression:
                        member_expression:
                          identifier ('JSON')
                          . ('.')
                          property_identifier ('stringify')
                        arguments:
                          ( ('(')
                          call_expression:
                            member_expression:
                              this ('this')
                              . ('.')
                              property_identifier ('getArrayBuffers')
                            arguments:
                              ( ('(')
                              ) (')')
                          ) (')')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('listViews')
                  formal_parameters:
                    ( ('(')
                    ) (')')
                  statement_block:
                    { ('{')
                    return_statement:
                      return ('return')
                      call_expression:
                        member_expression:
                          identifier ('JSON')
                          . ('.')
                          property_identifier ('stringify')
                        arguments:
                          ( ('(')
                          call_expression:
                            member_expression:
                              call_expression:
                                member_expression:
                                  identifier ('Array')
                                  . ('.')
                                  property_identifier ('from')
                                arguments:
                                  ( ('(')
                                  call_expression:
                                    member_expression:
                                      parenthesized_expression:
                                        ( ('(')
                                        binary_expression:
                                          member_expression:
                                            identifier ('buffersExt')
                                            optional_chain ('?.')
                                            property_identifier ('views')
                                          ?? ('??')
                                          new_expression:
                                            new ('new')
                                            identifier ('Map')
                                            arguments:
                                              ( ('(')
                                              ) (')')
                                        ) (')')
                                      . ('.')
                                      property_identifier ('keys')
                                    arguments:
                                      ( ('(')
                                      ) (')')
                                  ) (')')
                              . ('.')
                              property_identifier ('concat')
                            arguments:
                              ( ('(')
                              call_expression:
                                member_expression:
                                  identifier ('Object')
                                  . ('.')
                                  property_identifier ('keys')
                                arguments:
                                  ( ('(')
                                  member_expression:
                                    identifier ('resources')
                                    . ('.')
                                    property_identifier ('views')
                                  ) (')')
                              ) (')')
                          ) (')')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('createABFromArray')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        binary_expression:
                          call_expression:
                            member_expression:
                              member_expression:
                                identifier ('Scratch')
                                . ('.')
                                property_identifier ('Cast')
                              . ('.')
                              property_identifier ('toString')
                            arguments:
                              ( ('(')
                              member_expression:
                                identifier ('args')
                                . ('.')
                                property_identifier ('NAME')
                              ) (')')
                          == ('==')
                          string:
                            " ('"')
                            " ('"')
                        ) (')')
                      return_statement:
                        return ('return')
                        ; (';')
                    comment ('// this looks weird in the list')
                    lexical_declaration:
                      let ('let')
                      variable_declarator:
                        identifier ('j')
                      ; (';')
                    try_statement:
                      try ('try')
                      statement_block:
                        { ('{')
                        expression_statement:
                          assignment_expression:
                            identifier ('j')
                            = ('=')
                            call_expression:
                              member_expression:
                                identifier ('JSON')
                                . ('.')
                                property_identifier ('parse')
                              arguments:
                                ( ('(')
                                member_expression:
                                  identifier ('args')
                                  . ('.')
                                  property_identifier ('ARRAY')
                                ) (')')
                          ; (';')
                        if_statement:
                          if ('if')
                          parenthesized_expression:
                            ( ('(')
                            unary_expression:
                              ! ('!')
                              call_expression:
                                member_expression:
                                  identifier ('Array')
                                  . ('.')
                                  property_identifier ('isArray')
                                arguments:
                                  ( ('(')
                                  identifier ('j')
                                  ) (')')
                            ) (')')
                          throw_statement:
                            throw ('throw')
                            new_expression:
                              new ('new')
                              identifier ('Error')
                              arguments:
                                ( ('(')
                                string:
                                  " ('"')
                                  string_fragment ('skibidi toilet ohio rizz')
                                  " ('"')
                                ) (')')
                            ; (';')
                        } ('}')
                      catch_clause:
                        catch ('catch')
                        statement_block:
                          { ('{')
                          expression_statement:
                            call_expression:
                              member_expression:
                                this ('this')
                                . ('.')
                                property_identifier ('throwError')
                              arguments:
                                ( ('(')
                                string:
                                  " ('"')
                                  string_fragment ('InvalidArray')
                                  " ('"')
                                , (',')
                                string:
                                  " ('"')
                                  string_fragment ('The provided array is invalid')
                                  " ('"')
                                , (',')
                                string:
                                  " ('"')
                                  string_fragment ('CreateArrayBufferFromArrayBlock')
                                  " ('"')
                                , (',')
                                string:
                                  " ('"')
                                  string_fragment ("The provided array is invalid, or isn't an array.")
                                  " ('"')
                                , (',')
                                identifier ('util')
                                ) (')')
                            ; (';')
                          } ('}')
                    lexical_declaration:
                      const ('const')
                      variable_declarator:
                        identifier ('ta')
                        = ('=')
                        call_expression:
                          member_expression:
                            this ('this')
                            . ('.')
                            property_identifier ('typedArrayFromType')
                          arguments:
                            ( ('(')
                            call_expression:
                              member_expression:
                                member_expression:
                                  identifier ('Scratch')
                                  . ('.')
                                  property_identifier ('Cast')
                                . ('.')
                                property_identifier ('toString')
                              arguments:
                                ( ('(')
                                member_expression:
                                  identifier ('args')
                                  . ('.')
                                  property_identifier ('TYPE')
                                ) (')')
                            , (',')
                            identifier ('j')
                            ) (')')
                      ; (';')
                    expression_statement:
                      assignment_expression:
                        subscript_expression:
                          member_expression:
                            identifier ('resources')
                            . ('.')
                            property_identifier ('arrayBuffers')
                          [ ('[')
                          call_expression:
                            member_expression:
                              member_expression:
                                identifier ('Scratch')
                                . ('.')
                                property_identifier ('Cast')
                              . ('.')
                              property_identifier ('toString')
                            arguments:
                              ( ('(')
                              member_expression:
                                identifier ('args')
                                . ('.')
                                property_identifier ('ARRAYBUFFER')
                              ) (')')
                          ] (']')
                        = ('=')
                        member_expression:
                          identifier ('ta')
                          . ('.')
                          property_identifier ('buffer')
                      ; (';')
                    expression_statement:
                      assignment_expression:
                        subscript_expression:
                          member_expression:
                            identifier ('resources')
                            . ('.')
                            property_identifier ('views')
                          [ ('[')
                          call_expression:
                            member_expression:
                              member_expression:
                                identifier ('Scratch')
                                . ('.')
                                property_identifier ('Cast')
                              . ('.')
                              property_identifier ('toString')
                            arguments:
                              ( ('(')
                              member_expression:
                                identifier ('args')
                                . ('.')
                                property_identifier ('ARRAYBUFFER')
                              ) (')')
                          ] (']')
                        = ('=')
                        identifier ('ta')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('deleteAB')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        call_expression:
                          member_expression:
                            member_expression:
                              member_expression:
                                identifier ('Object')
                                . ('.')
                                property_identifier ('prototype')
                              . ('.')
                              property_identifier ('hasOwnProperty')
                            . ('.')
                            property_identifier ('call')
                          arguments:
                            ( ('(')
                            member_expression:
                              identifier ('resources')
                              . ('.')
                              property_identifier ('arrayBuffers')
                            , (',')
                            call_expression:
                              member_expression:
                                member_expression:
                                  identifier ('Scratch')
                                  . ('.')
                                  property_identifier ('Cast')
                                . ('.')
                                property_identifier ('toString')
                              arguments:
                                ( ('(')
                                member_expression:
                                  identifier ('args')
                                  . ('.')
                                  property_identifier ('ARRAYBUFFER')
                                ) (')')
                            ) (')')
                        ) (')')
                      statement_block:
                        { ('{')
                        expression_statement:
                          unary_expression:
                            delete ('delete')
                            subscript_expression:
                              member_expression:
                                identifier ('resources')
                                . ('.')
                                property_identifier ('arrayBuffers')
                              [ ('[')
                              call_expression:
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('Cast')
                                  . ('.')
                                  property_identifier ('toString')
                                arguments:
                                  ( ('(')
                                  member_expression:
                                    identifier ('args')
                                    . ('.')
                                    property_identifier ('ARRAYBUFFER')
                                  ) (')')
                              ] (']')
                          ; (';')
                        } ('}')
                      else_clause:
                        else ('else')
                        statement_block:
                          { ('{')
                          expression_statement:
                            call_expression:
                              member_expression:
                                this ('this')
                                . ('.')
                                property_identifier ('throwError')
                              arguments:
                                ( ('(')
                                string:
                                  " ('"')
                                  string_fragment ('ArrayBufferNotFound')
                                  " ('"')
                                , (',')
                                string:
                                  " ('"')
                                  string_fragment ('Array buffer not found')
                                  " ('"')
                                , (',')
                                string:
                                  " ('"')
                                  string_fragment ('DeleteArrayBufferBlock')
                                  " ('"')
                                , (',')
                                string:
                                  " ('"')
                                  string_fragment ("The specified array buffer doesn't exist")
                                  " ('"')
                                , (',')
                                identifier ('util')
                                ) (')')
                            ; (';')
                          } ('}')
                    } ('}')
                method_definition:
                  property_identifier ('resizeAB')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        call_expression:
                          member_expression:
                            member_expression:
                              member_expression:
                                identifier ('Object')
                                . ('.')
                                property_identifier ('prototype')
                              . ('.')
                              property_identifier ('hasOwnProperty')
                            . ('.')
                            property_identifier ('call')
                          arguments:
                            ( ('(')
                            member_expression:
                              identifier ('resources')
                              . ('.')
                              property_identifier ('arrayBuffers')
                            , (',')
                            call_expression:
                              member_expression:
                                member_expression:
                                  identifier ('Scratch')
                                  . ('.')
                                  property_identifier ('Cast')
                                . ('.')
                                property_identifier ('toString')
                              arguments:
                                ( ('(')
                                member_expression:
                                  identifier ('args')
                                  . ('.')
                                  property_identifier ('ARRAYBUFFER')
                                ) (')')
                            ) (')')
                        ) (')')
                      statement_block:
                        { ('{')
                        expression_statement:
                          call_expression:
                            member_expression:
                              subscript_expression:
                                member_expression:
                                  identifier ('resources')
                                  . ('.')
                                  property_identifier ('arrayBuffers')
                                [ ('[')
                                call_expression:
                                  member_expression:
                                    member_expression:
                                      identifier ('Scratch')
                                      . ('.')
                                      property_identifier ('Cast')
                                    . ('.')
                                    property_identifier ('toString')
                                  arguments:
                                    ( ('(')
                                    member_expression:
                                      identifier ('args')
                                      . ('.')
                                      property_identifier ('ARRAYBUFFER')
                                    ) (')')
                                ] (']')
                              . ('.')
                              property_identifier ('resize')
                            arguments:
                              ( ('(')
                              call_expression:
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('Cast')
                                  . ('.')
                                  property_identifier ('toNumber')
                                arguments:
                                  ( ('(')
                                  member_expression:
                                    identifier ('args')
                                    . ('.')
                                    property_identifier ('SIZE')
                                  ) (')')
                              ) (')')
                          ; (';')
                        } ('}')
                      else_clause:
                        else ('else')
                        statement_block:
                          { ('{')
                          expression_statement:
                            call_expression:
                              member_expression:
                                this ('this')
                                . ('.')
                                property_identifier ('throwError')
                              arguments:
                                ( ('(')
                                string:
                                  " ('"')
                                  string_fragment ('ArrayBufferNotFound')
                                  " ('"')
                                , (',')
                                string:
                                  " ('"')
                                  string_fragment ('Array buffer not found')
                                  " ('"')
                                , (',')
                                string:
                                  " ('"')
                                  string_fragment ('ResizeArrayBufferBlock')
                                  " ('"')
                                , (',')
                                string:
                                  " ('"')
                                  string_fragment ("The specified array buffer doesn't exist")
                                  " ('"')
                                , (',')
                                identifier ('util')
                                ) (')')
                            ; (';')
                          } ('}')
                    } ('}')
                method_definition:
                  property_identifier ('deleteView')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        call_expression:
                          member_expression:
                            member_expression:
                              member_expression:
                                identifier ('Object')
                                . ('.')
                                property_identifier ('prototype')
                              . ('.')
                              property_identifier ('hasOwnProperty')
                            . ('.')
                            property_identifier ('call')
                          arguments:
                            ( ('(')
                            member_expression:
                              identifier ('resources')
                              . ('.')
                              property_identifier ('views')
                            , (',')
                            call_expression:
                              member_expression:
                                member_expression:
                                  identifier ('Scratch')
                                  . ('.')
                                  property_identifier ('Cast')
                                . ('.')
                                property_identifier ('toString')
                              arguments:
                                ( ('(')
                                member_expression:
                                  identifier ('args')
                                  . ('.')
                                  property_identifier ('VIEW')
                                ) (')')
                            ) (')')
                        ) (')')
                      statement_block:
                        { ('{')
                        expression_statement:
                          unary_expression:
                            delete ('delete')
                            subscript_expression:
                              member_expression:
                                identifier ('resources')
                                . ('.')
                                property_identifier ('views')
                              [ ('[')
                              call_expression:
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('Cast')
                                  . ('.')
                                  property_identifier ('toString')
                                arguments:
                                  ( ('(')
                                  member_expression:
                                    identifier ('args')
                                    . ('.')
                                    property_identifier ('VIEW')
                                  ) (')')
                              ] (']')
                          ; (';')
                        } ('}')
                      else_clause:
                        else ('else')
                        statement_block:
                          { ('{')
                          expression_statement:
                            call_expression:
                              member_expression:
                                this ('this')
                                . ('.')
                                property_identifier ('throwError')
                              arguments:
                                ( ('(')
                                string:
                                  " ('"')
                                  string_fragment ('ViewNotFound')
                                  " ('"')
                                , (',')
                                string:
                                  " ('"')
                                  string_fragment ('View not found')
                                  " ('"')
                                , (',')
                                string:
                                  " ('"')
                                  string_fragment ('DeleteViewBlock')
                                  " ('"')
                                , (',')
                                string:
                                  " ('"')
                                  string_fragment ("The specified view doesn't exist")
                                  " ('"')
                                , (',')
                                identifier ('util')
                                ) (')')
                            ; (';')
                          } ('}')
                    } ('}')
                method_definition:
                  property_identifier ('setItemInView')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        call_expression:
                          member_expression:
                            member_expression:
                              member_expression:
                                identifier ('Object')
                                . ('.')
                                property_identifier ('prototype')
                              . ('.')
                              property_identifier ('hasOwnProperty')
                            . ('.')
                            property_identifier ('call')
                          arguments:
                            ( ('(')
                            member_expression:
                              identifier ('resources')
                              . ('.')
                              property_identifier ('views')
                            , (',')
                            call_expression:
                              member_expression:
                                member_expression:
                                  identifier ('Scratch')
                                  . ('.')
                                  property_identifier ('Cast')
                                . ('.')
                                property_identifier ('toString')
                              arguments:
                                ( ('(')
                                member_expression:
                                  identifier ('args')
                                  . ('.')
                                  property_identifier ('VIEW')
                                ) (')')
                            ) (')')
                        ) (')')
                      statement_block:
                        { ('{')
                        expression_statement:
                          assignment_expression:
                            subscript_expression:
                              subscript_expression:
                                member_expression:
                                  identifier ('resources')
                                  . ('.')
                                  property_identifier ('views')
                                [ ('[')
                                call_expression:
                                  member_expression:
                                    member_expression:
                                      identifier ('Scratch')
                                      . ('.')
                                      property_identifier ('Cast')
                                    . ('.')
                                    property_identifier ('toString')
                                  arguments:
                                    ( ('(')
                                    member_expression:
                                      identifier ('args')
                                      . ('.')
                                      property_identifier ('VIEW')
                                    ) (')')
                                ] (']')
                              [ ('[')
                              call_expression:
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('Cast')
                                  . ('.')
                                  property_identifier ('toNumber')
                                arguments:
                                  ( ('(')
                                  member_expression:
                                    identifier ('args')
                                    . ('.')
                                    property_identifier ('INDEX')
                                  ) (')')
                              ] (']')
                            = ('=')
                            call_expression:
                              member_expression:
                                member_expression:
                                  identifier ('Scratch')
                                  . ('.')
                                  property_identifier ('Cast')
                                . ('.')
                                property_identifier ('toNumber')
                              arguments:
                                ( ('(')
                                member_expression:
                                  identifier ('args')
                                  . ('.')
                                  property_identifier ('VALUE')
                                ) (')')
                          ; (';')
                        } ('}')
                      else_clause:
                        else ('else')
                        statement_block:
                          { ('{')
                          expression_statement:
                            call_expression:
                              member_expression:
                                identifier ('console')
                                . ('.')
                                property_identifier ('log')
                              arguments:
                                ( ('(')
                                string:
                                  " ('"')
                                  string_fragment ('aaaaa')
                                  " ('"')
                                ) (')')
                            ; (';')
                          expression_statement:
                            call_expression:
                              member_expression:
                                this ('this')
                                . ('.')
                                property_identifier ('throwError')
                              arguments:
                                ( ('(')
                                string:
                                  " ('"')
                                  string_fragment ('ViewNotFound')
                                  " ('"')
                                , (',')
                                string:
                                  " ('"')
                                  string_fragment ('View not found')
                                  " ('"')
                                , (',')
                                string:
                                  " ('"')
                                  string_fragment ('SetItemInViewBlock')
                                  " ('"')
                                , (',')
                                string:
                                  " ('"')
                                  string_fragment ("The specified view doesn't exist")
                                  " ('"')
                                , (',')
                                identifier ('util')
                                ) (')')
                            ; (';')
                          } ('}')
                    } ('}')
                method_definition:
                  property_identifier ('setView')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    lexical_declaration:
                      let ('let')
                      variable_declarator:
                        identifier ('j')
                      ; (';')
                    try_statement:
                      try ('try')
                      statement_block:
                        { ('{')
                        expression_statement:
                          assignment_expression:
                            identifier ('j')
                            = ('=')
                            call_expression:
                              member_expression:
                                identifier ('JSON')
                                . ('.')
                                property_identifier ('parse')
                              arguments:
                                ( ('(')
                                member_expression:
                                  identifier ('args')
                                  . ('.')
                                  property_identifier ('ARRAY')
                                ) (')')
                          ; (';')
                        if_statement:
                          if ('if')
                          parenthesized_expression:
                            ( ('(')
                            unary_expression:
                              ! ('!')
                              call_expression:
                                member_expression:
                                  identifier ('Array')
                                  . ('.')
                                  property_identifier ('isArray')
                                arguments:
                                  ( ('(')
                                  identifier ('j')
                                  ) (')')
                            ) (')')
                          throw_statement:
                            throw ('throw')
                            new_expression:
                              new ('new')
                              identifier ('Error')
                              arguments:
                                ( ('(')
                                string:
                                  " ('"')
                                  string_fragment ('balkan rage winter arc jonkler trollge phonk')
                                  " ('"')
                                ) (')')
                            ; (';')
                        } ('}')
                      catch_clause:
                        catch ('catch')
                        statement_block:
                          { ('{')
                          expression_statement:
                            call_expression:
                              member_expression:
                                this ('this')
                                . ('.')
                                property_identifier ('throwError')
                              arguments:
                                ( ('(')
                                string:
                                  " ('"')
                                  string_fragment ('InvalidArray')
                                  " ('"')
                                , (',')
                                string:
                                  " ('"')
                                  string_fragment ('The provided array is invalid')
                                  " ('"')
                                , (',')
                                string:
                                  " ('"')
                                  string_fragment ('SetViewBlock')
                                  " ('"')
                                , (',')
                                string:
                                  " ('"')
                                  string_fragment ("The provided array is invalid, or isn't an array.")
                                  " ('"')
                                , (',')
                                identifier ('util')
                                ) (')')
                            ; (';')
                          } ('}')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        call_expression:
                          member_expression:
                            member_expression:
                              member_expression:
                                identifier ('Object')
                                . ('.')
                                property_identifier ('prototype')
                              . ('.')
                              property_identifier ('hasOwnProperty')
                            . ('.')
                            property_identifier ('call')
                          arguments:
                            ( ('(')
                            member_expression:
                              identifier ('resources')
                              . ('.')
                              property_identifier ('views')
                            , (',')
                            call_expression:
                              member_expression:
                                member_expression:
                                  identifier ('Scratch')
                                  . ('.')
                                  property_identifier ('Cast')
                                . ('.')
                                property_identifier ('toString')
                              arguments:
                                ( ('(')
                                member_expression:
                                  identifier ('args')
                                  . ('.')
                                  property_identifier ('VIEW')
                                ) (')')
                            ) (')')
                        ) (')')
                      statement_block:
                        { ('{')
                        expression_statement:
                          call_expression:
                            member_expression:
                              subscript_expression:
                                member_expression:
                                  identifier ('resources')
                                  . ('.')
                                  property_identifier ('views')
                                [ ('[')
                                call_expression:
                                  member_expression:
                                    member_expression:
                                      identifier ('Scratch')
                                      . ('.')
                                      property_identifier ('Cast')
                                    . ('.')
                                    property_identifier ('toString')
                                  arguments:
                                    ( ('(')
                                    member_expression:
                                      identifier ('args')
                                      . ('.')
                                      property_identifier ('VIEW')
                                    ) (')')
                                ] (']')
                              . ('.')
                              property_identifier ('set')
                            arguments:
                              ( ('(')
                              identifier ('j')
                              , (',')
                              call_expression:
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('Cast')
                                  . ('.')
                                  property_identifier ('toNumber')
                                arguments:
                                  ( ('(')
                                  member_expression:
                                    identifier ('args')
                                    . ('.')
                                    property_identifier ('INDEX')
                                  ) (')')
                              ) (')')
                          ; (';')
                        } ('}')
                      else_clause:
                        else ('else')
                        statement_block:
                          { ('{')
                          expression_statement:
                            call_expression:
                              member_expression:
                                this ('this')
                                . ('.')
                                property_identifier ('throwError')
                              arguments:
                                ( ('(')
                                string:
                                  " ('"')
                                  string_fragment ('ViewNotFound')
                                  " ('"')
                                , (',')
                                string:
                                  " ('"')
                                  string_fragment ('View not found')
                                  " ('"')
                                , (',')
                                string:
                                  " ('"')
                                  string_fragment ('SetViewBlock')
                                  " ('"')
                                , (',')
                                string:
                                  " ('"')
                                  string_fragment ("The specified view doesn't exist")
                                  " ('"')
                                , (',')
                                identifier ('util')
                                ) (')')
                            ; (';')
                          } ('}')
                    } ('}')
                method_definition:
                  property_identifier ('fillView')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        call_expression:
                          member_expression:
                            member_expression:
                              member_expression:
                                identifier ('Object')
                                . ('.')
                                property_identifier ('prototype')
                              . ('.')
                              property_identifier ('hasOwnProperty')
                            . ('.')
                            property_identifier ('call')
                          arguments:
                            ( ('(')
                            member_expression:
                              identifier ('resources')
                              . ('.')
                              property_identifier ('views')
                            , (',')
                            call_expression:
                              member_expression:
                                member_expression:
                                  identifier ('Scratch')
                                  . ('.')
                                  property_identifier ('Cast')
                                . ('.')
                                property_identifier ('toString')
                              arguments:
                                ( ('(')
                                member_expression:
                                  identifier ('args')
                                  . ('.')
                                  property_identifier ('VIEW')
                                ) (')')
                            ) (')')
                        ) (')')
                      statement_block:
                        { ('{')
                        expression_statement:
                          call_expression:
                            member_expression:
                              subscript_expression:
                                member_expression:
                                  identifier ('resources')
                                  . ('.')
                                  property_identifier ('views')
                                [ ('[')
                                call_expression:
                                  member_expression:
                                    member_expression:
                                      identifier ('Scratch')
                                      . ('.')
                                      property_identifier ('Cast')
                                    . ('.')
                                    property_identifier ('toString')
                                  arguments:
                                    ( ('(')
                                    member_expression:
                                      identifier ('args')
                                      . ('.')
                                      property_identifier ('VIEW')
                                    ) (')')
                                ] (']')
                              . ('.')
                              property_identifier ('fill')
                            arguments:
                              ( ('(')
                              call_expression:
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('Cast')
                                  . ('.')
                                  property_identifier ('toNumber')
                                arguments:
                                  ( ('(')
                                  member_expression:
                                    identifier ('args')
                                    . ('.')
                                    property_identifier ('VALUE')
                                  ) (')')
                              , (',')
                              call_expression:
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('Cast')
                                  . ('.')
                                  property_identifier ('toNumber')
                                arguments:
                                  ( ('(')
                                  member_expression:
                                    identifier ('args')
                                    . ('.')
                                    property_identifier ('START')
                                  ) (')')
                              , (',')
                              call_expression:
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('Cast')
                                  . ('.')
                                  property_identifier ('toNumber')
                                arguments:
                                  ( ('(')
                                  member_expression:
                                    identifier ('args')
                                    . ('.')
                                    property_identifier ('END')
                                  ) (')')
                              ) (')')
                          ; (';')
                        } ('}')
                      else_clause:
                        else ('else')
                        statement_block:
                          { ('{')
                          expression_statement:
                            call_expression:
                              member_expression:
                                this ('this')
                                . ('.')
                                property_identifier ('throwError')
                              arguments:
                                ( ('(')
                                string:
                                  " ('"')
                                  string_fragment ('ViewNotFound')
                                  " ('"')
                                , (',')
                                string:
                                  " ('"')
                                  string_fragment ('View not found')
                                  " ('"')
                                , (',')
                                string:
                                  " ('"')
                                  string_fragment ('FillViewBlock')
                                  " ('"')
                                , (',')
                                string:
                                  " ('"')
                                  string_fragment ("The specified view doesn't exist")
                                  " ('"')
                                , (',')
                                identifier ('util')
                                ) (')')
                            ; (';')
                          } ('}')
                    } ('}')
                method_definition:
                  property_identifier ('itemOfView')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        call_expression:
                          member_expression:
                            member_expression:
                              member_expression:
                                identifier ('Object')
                                . ('.')
                                property_identifier ('prototype')
                              . ('.')
                              property_identifier ('hasOwnProperty')
                            . ('.')
                            property_identifier ('call')
                          arguments:
                            ( ('(')
                            member_expression:
                              identifier ('resources')
                              . ('.')
                              property_identifier ('views')
                            , (',')
                            call_expression:
                              member_expression:
                                member_expression:
                                  identifier ('Scratch')
                                  . ('.')
                                  property_identifier ('Cast')
                                . ('.')
                                property_identifier ('toString')
                              arguments:
                                ( ('(')
                                member_expression:
                                  identifier ('args')
                                  . ('.')
                                  property_identifier ('VIEW')
                                ) (')')
                            ) (')')
                        ) (')')
                      statement_block:
                        { ('{')
                        return_statement:
                          return ('return')
                          subscript_expression:
                            subscript_expression:
                              member_expression:
                                identifier ('resources')
                                . ('.')
                                property_identifier ('views')
                              [ ('[')
                              call_expression:
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('Cast')
                                  . ('.')
                                  property_identifier ('toString')
                                arguments:
                                  ( ('(')
                                  member_expression:
                                    identifier ('args')
                                    . ('.')
                                    property_identifier ('VIEW')
                                  ) (')')
                              ] (']')
                            [ ('[')
                            call_expression:
                              member_expression:
                                member_expression:
                                  identifier ('Scratch')
                                  . ('.')
                                  property_identifier ('Cast')
                                . ('.')
                                property_identifier ('toNumber')
                              arguments:
                                ( ('(')
                                member_expression:
                                  identifier ('args')
                                  . ('.')
                                  property_identifier ('INDEX')
                                ) (')')
                            ] (']')
                          ; (';')
                        } ('}')
                      else_clause:
                        else ('else')
                        statement_block:
                          { ('{')
                          return_statement:
                            return ('return')
                            string:
                              " ('"')
                              " ('"')
                            ; (';')
                          } ('}')
                    } ('}')
                method_definition:
                  property_identifier ('sliceView')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        call_expression:
                          member_expression:
                            member_expression:
                              member_expression:
                                identifier ('Object')
                                . ('.')
                                property_identifier ('prototype')
                              . ('.')
                              property_identifier ('hasOwnProperty')
                            . ('.')
                            property_identifier ('call')
                          arguments:
                            ( ('(')
                            member_expression:
                              identifier ('resources')
                              . ('.')
                              property_identifier ('views')
                            , (',')
                            call_expression:
                              member_expression:
                                member_expression:
                                  identifier ('Scratch')
                                  . ('.')
                                  property_identifier ('Cast')
                                . ('.')
                                property_identifier ('toString')
                              arguments:
                                ( ('(')
                                member_expression:
                                  identifier ('args')
                                  . ('.')
                                  property_identifier ('VIEW')
                                ) (')')
                            ) (')')
                        ) (')')
                      statement_block:
                        { ('{')
                        lexical_declaration:
                          const ('const')
                          variable_declarator:
                            identifier ('a')
                            = ('=')
                            call_expression:
                              member_expression:
                                identifier ('Array')
                                . ('.')
                                property_identifier ('from')
                              arguments:
                                ( ('(')
                                call_expression:
                                  member_expression:
                                    subscript_expression:
                                      member_expression:
                                        identifier ('resources')
                                        . ('.')
                                        property_identifier ('views')
                                      [ ('[')
                                      call_expression:
                                        member_expression:
                                          member_expression:
                                            identifier ('Scratch')
                                            . ('.')
                                            property_identifier ('Cast')
                                          . ('.')
                                          property_identifier ('toString')
                                        arguments:
                                          ( ('(')
                                          member_expression:
                                            identifier ('args')
                                            . ('.')
                                            property_identifier ('VIEW')
                                          ) (')')
                                      ] (']')
                                    . ('.')
                                    property_identifier ('slice')
                                  arguments:
                                    ( ('(')
                                    call_expression:
                                      member_expression:
                                        member_expression:
                                          identifier ('Scratch')
                                          . ('.')
                                          property_identifier ('Cast')
                                        . ('.')
                                        property_identifier ('toNumber')
                                      arguments:
                                        ( ('(')
                                        member_expression:
                                          identifier ('args')
                                          . ('.')
                                          property_identifier ('START')
                                        ) (')')
                                    , (',')
                                    call_expression:
                                      member_expression:
                                        member_expression:
                                          identifier ('Scratch')
                                          . ('.')
                                          property_identifier ('Cast')
                                        . ('.')
                                        property_identifier ('toNumber')
                                      arguments:
                                        ( ('(')
                                        member_expression:
                                          identifier ('args')
                                          . ('.')
                                          property_identifier ('END')
                                        ) (')')
                                    ) (')')
                                ) (')')
                          ; (';')
                        expression_statement:
                          call_expression:
                            member_expression:
                              identifier ('console')
                              . ('.')
                              property_identifier ('log')
                            arguments:
                              ( ('(')
                              identifier ('a')
                              ) (')')
                          ; (';')
                        return_statement:
                          return ('return')
                          call_expression:
                            member_expression:
                              identifier ('JSON')
                              . ('.')
                              property_identifier ('stringify')
                            arguments:
                              ( ('(')
                              identifier ('a')
                              ) (')')
                          ; (';')
                        } ('}')
                      else_clause:
                        else ('else')
                        statement_block:
                          { ('{')
                          return_statement:
                            return ('return')
                            string:
                              " ('"')
                              " ('"')
                            ; (';')
                          } ('}')
                    } ('}')
                method_definition:
                  property_identifier ('viewToArray')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        call_expression:
                          member_expression:
                            member_expression:
                              member_expression:
                                identifier ('Object')
                                . ('.')
                                property_identifier ('prototype')
                              . ('.')
                              property_identifier ('hasOwnProperty')
                            . ('.')
                            property_identifier ('call')
                          arguments:
                            ( ('(')
                            member_expression:
                              identifier ('resources')
                              . ('.')
                              property_identifier ('views')
                            , (',')
                            call_expression:
                              member_expression:
                                member_expression:
                                  identifier ('Scratch')
                                  . ('.')
                                  property_identifier ('Cast')
                                . ('.')
                                property_identifier ('toString')
                              arguments:
                                ( ('(')
                                member_expression:
                                  identifier ('args')
                                  . ('.')
                                  property_identifier ('VIEW')
                                ) (')')
                            ) (')')
                        ) (')')
                      statement_block:
                        { ('{')
                        return_statement:
                          return ('return')
                          call_expression:
                            member_expression:
                              identifier ('JSON')
                              . ('.')
                              property_identifier ('stringify')
                            arguments:
                              ( ('(')
                              call_expression:
                                member_expression:
                                  identifier ('Array')
                                  . ('.')
                                  property_identifier ('from')
                                arguments:
                                  ( ('(')
                                  subscript_expression:
                                    member_expression:
                                      identifier ('resources')
                                      . ('.')
                                      property_identifier ('views')
                                    [ ('[')
                                    call_expression:
                                      member_expression:
                                        member_expression:
                                          identifier ('Scratch')
                                          . ('.')
                                          property_identifier ('Cast')
                                        . ('.')
                                        property_identifier ('toString')
                                      arguments:
                                        ( ('(')
                                        member_expression:
                                          identifier ('args')
                                          . ('.')
                                          property_identifier ('VIEW')
                                        ) (')')
                                    ] (']')
                                  ) (')')
                              ) (')')
                          ; (';')
                        } ('}')
                      else_clause:
                        else ('else')
                        statement_block:
                          { ('{')
                          return_statement:
                            return ('return')
                            string:
                              " ('"')
                              " ('"')
                            ; (';')
                          } ('}')
                    } ('}')
                method_definition:
                  property_identifier ('propFromView')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        call_expression:
                          member_expression:
                            member_expression:
                              member_expression:
                                identifier ('Object')
                                . ('.')
                                property_identifier ('prototype')
                              . ('.')
                              property_identifier ('hasOwnProperty')
                            . ('.')
                            property_identifier ('call')
                          arguments:
                            ( ('(')
                            member_expression:
                              identifier ('resources')
                              . ('.')
                              property_identifier ('views')
                            , (',')
                            call_expression:
                              member_expression:
                                member_expression:
                                  identifier ('Scratch')
                                  . ('.')
                                  property_identifier ('Cast')
                                . ('.')
                                property_identifier ('toString')
                              arguments:
                                ( ('(')
                                member_expression:
                                  identifier ('args')
                                  . ('.')
                                  property_identifier ('VIEW')
                                ) (')')
                            ) (')')
                        ) (')')
                      statement_block:
                        { ('{')
                        return_statement:
                          return ('return')
                          subscript_expression:
                            subscript_expression:
                              member_expression:
                                identifier ('resources')
                                . ('.')
                                property_identifier ('views')
                              [ ('[')
                              call_expression:
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('Cast')
                                  . ('.')
                                  property_identifier ('toString')
                                arguments:
                                  ( ('(')
                                  member_expression:
                                    identifier ('args')
                                    . ('.')
                                    property_identifier ('VIEW')
                                  ) (')')
                              ] (']')
                            [ ('[')
                            call_expression:
                              member_expression:
                                member_expression:
                                  identifier ('Scratch')
                                  . ('.')
                                  property_identifier ('Cast')
                                . ('.')
                                property_identifier ('toString')
                              arguments:
                                ( ('(')
                                member_expression:
                                  identifier ('args')
                                  . ('.')
                                  property_identifier ('PROP')
                                ) (')')
                            ] (']')
                          ; (';')
                        } ('}')
                      else_clause:
                        else ('else')
                        statement_block:
                          { ('{')
                          return_statement:
                            return ('return')
                            string:
                              " ('"')
                              " ('"')
                            ; (';')
                          } ('}')
                    } ('}')
                method_definition:
                  property_identifier ('createTexture')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    expression_statement:
                      assignment_expression:
                        subscript_expression:
                          member_expression:
                            identifier ('resources')
                            . ('.')
                            property_identifier ('textures')
                          [ ('[')
                          call_expression:
                            member_expression:
                              member_expression:
                                identifier ('Scratch')
                                . ('.')
                                property_identifier ('Cast')
                              . ('.')
                              property_identifier ('toString')
                            arguments:
                              ( ('(')
                              member_expression:
                                identifier ('args')
                                . ('.')
                                property_identifier ('NAME')
                              ) (')')
                          ] (']')
                        = ('=')
                        call_expression:
                          member_expression:
                            member_expression:
                              this ('this')
                              . ('.')
                              property_identifier ('device')
                            . ('.')
                            property_identifier ('createTexture')
                          arguments:
                            ( ('(')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('size')
                                : (':')
                                array:
                                  [ ('[')
                                  call_expression:
                                    member_expression:
                                      member_expression:
                                        identifier ('Scratch')
                                        . ('.')
                                        property_identifier ('Cast')
                                      . ('.')
                                      property_identifier ('toNumber')
                                    arguments:
                                      ( ('(')
                                      member_expression:
                                        identifier ('args')
                                        . ('.')
                                        property_identifier ('WIDTH')
                                      ) (')')
                                  , (',')
                                  call_expression:
                                    member_expression:
                                      member_expression:
                                        identifier ('Scratch')
                                        . ('.')
                                        property_identifier ('Cast')
                                      . ('.')
                                      property_identifier ('toNumber')
                                    arguments:
                                      ( ('(')
                                      member_expression:
                                        identifier ('args')
                                        . ('.')
                                        property_identifier ('HEIGHT')
                                      ) (')')
                                  , (',')
                                  ] (']')
                              , (',')
                              comment ('// @ts-expect-error')
                              pair:
                                property_identifier ('format')
                                : (':')
                                call_expression:
                                  member_expression:
                                    member_expression:
                                      identifier ('Scratch')
                                      . ('.')
                                      property_identifier ('Cast')
                                    . ('.')
                                    property_identifier ('toString')
                                  arguments:
                                    ( ('(')
                                    member_expression:
                                      identifier ('args')
                                      . ('.')
                                      property_identifier ('FORMAT')
                                    ) (')')
                              , (',')
                              pair:
                                property_identifier ('usage')
                                : (':')
                                call_expression:
                                  member_expression:
                                    member_expression:
                                      identifier ('Scratch')
                                      . ('.')
                                      property_identifier ('Cast')
                                    . ('.')
                                    property_identifier ('toNumber')
                                  arguments:
                                    ( ('(')
                                    member_expression:
                                      identifier ('args')
                                      . ('.')
                                      property_identifier ('USAGE')
                                    ) (')')
                              , (',')
                              pair:
                                property_identifier ('label')
                                : (':')
                                call_expression:
                                  member_expression:
                                    member_expression:
                                      identifier ('Scratch')
                                      . ('.')
                                      property_identifier ('Cast')
                                    . ('.')
                                    property_identifier ('toString')
                                  arguments:
                                    ( ('(')
                                    member_expression:
                                      identifier ('args')
                                      . ('.')
                                      property_identifier ('NAME')
                                    ) (')')
                              , (',')
                              } ('}')
                            ) (')')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('textureUsage')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    comment ("/* eslint-disable-next-line --\n       * Eslint doesn't like WebGPU, there's a type module for this.\n       */")
                    return_statement:
                      return ('return')
                      subscript_expression:
                        identifier ('GPUTextureUsage')
                        [ ('[')
                        call_expression:
                          member_expression:
                            member_expression:
                              identifier ('Scratch')
                              . ('.')
                              property_identifier ('Cast')
                            . ('.')
                            property_identifier ('toString')
                          arguments:
                            ( ('(')
                            member_expression:
                              identifier ('args')
                              . ('.')
                              property_identifier ('USAGE')
                            ) (')')
                        ] (']')
                      ; (';')
                    } ('}')
                comment ('/**\n     *\n     * @param {import("scratch-render").SVGSkin | import("scratch-render").BitmapSkin} skin\n     */')
                method_definition:
                  property_identifier ('skinToArray')
                  formal_parameters:
                    ( ('(')
                    identifier ('skin')
                    ) (')')
                  statement_block:
                    { ('{')
                    comment ('// https://stackoverflow.com/a/18804153/20805087')
                    comment ('// i was going to add support for the pen+ texture library but')
                    expression_statement:
                      call_expression:
                        member_expression:
                          identifier ('skin')
                          . ('.')
                          property_identifier ('updateSilhouette')
                        arguments:
                          ( ('(')
                          ) (')')
                      ; (';')
                    expression_statement:
                      call_expression:
                        member_expression:
                          identifier ('console')
                          . ('.')
                          property_identifier ('log')
                        arguments:
                          ( ('(')
                          member_expression:
                            member_expression:
                              identifier ('skin')
                              . ('.')
                              property_identifier ('_silhouette')
                            . ('.')
                            property_identifier ('_colorData')
                          ) (')')
                      ; (';')
                    return_statement:
                      return ('return')
                      member_expression:
                        member_expression:
                          identifier ('skin')
                          . ('.')
                          property_identifier ('_silhouette')
                        . ('.')
                        property_identifier ('_colorData')
                      ; (';')
                    } ('}')
                comment ('/**\n     *\n     * @param {*} args\n     * @param {import("scratch-vm").BlockUtility} util\n     */')
                method_definition:
                  property_identifier ('writeTexture')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    lexical_declaration:
                      let ('let')
                      variable_declarator:
                        identifier ('textureData')
                      ; (';')
                    comment ('// if (penPlus) {')
                    comment ('//  todo: error handling here and adding pen+ costume library support')
                    comment ('// }')
                    lexical_declaration:
                      const ('const')
                      variable_declarator:
                        identifier ('i')
                        = ('=')
                        call_expression:
                          member_expression:
                            member_expression:
                              identifier ('util')
                              . ('.')
                              property_identifier ('target')
                            . ('.')
                            property_identifier ('getCostumeIndexByName')
                          arguments:
                            ( ('(')
                            call_expression:
                              member_expression:
                                member_expression:
                                  identifier ('Scratch')
                                  . ('.')
                                  property_identifier ('Cast')
                                . ('.')
                                property_identifier ('toString')
                              arguments:
                                ( ('(')
                                member_expression:
                                  identifier ('args')
                                  . ('.')
                                  property_identifier ('IMAGE')
                                ) (')')
                            ) (')')
                      ; (';')
                    if_statement:
                      if ('if')
                      parenthesized_expression:
                        ( ('(')
                        binary_expression:
                          identifier ('i')
                          !== ('!==')
                          unary_expression:
                            - ('-')
                            number ('1')
                        ) (')')
                      statement_block:
                        { ('{')
                        comment ('// not using the properties that are causing stupid errors so who cares')
                        expression_statement:
                          assignment_expression:
                            identifier ('textureData')
                            = ('=')
                            call_expression:
                              member_expression:
                                this ('this')
                                . ('.')
                                property_identifier ('skinToArray')
                              arguments:
                                ( ('(')
                                comment ('// @ts-ignore')
                                subscript_expression:
                                  member_expression:
                                    member_expression:
                                      identifier ('vm')
                                      . ('.')
                                      property_identifier ('renderer')
                                    . ('.')
                                    property_identifier ('_allSkins')
                                  [ ('[')
                                  member_expression:
                                    subscript_expression:
                                      member_expression:
                                        member_expression:
                                          member_expression:
                                            identifier ('util')
                                            . ('.')
                                            property_identifier ('target')
                                          . ('.')
                                          property_identifier ('sprite')
                                        . ('.')
                                        property_identifier ('costumes')
                                      [ ('[')
                                      identifier ('i')
                                      ] (']')
                                    . ('.')
                                    property_identifier ('skinId')
                                  ] (']')
                                ) (')')
                          ; (';')
                        comment ('//textureData = util.target.sprite.costumes[i].asset.data')
                        comment ('//console.log(util.target.sprite.costumes[i].asset.data)')
                        } ('}')
                      else_clause:
                        else ('else')
                        statement_block:
                          { ('{')
                          throw_statement:
                            throw ('throw')
                            new_expression:
                              new ('new')
                              identifier ('Error')
                              arguments:
                                ( ('(')
                                binary_expression:
                                  string:
                                    " ('"')
                                    string_fragment ('Texture missing - ')
                                    " ('"')
                                  + ('+')
                                  member_expression:
                                    identifier ('args')
                                    . ('.')
                                    property_identifier ('IMAGE')
                                ) (')')
                            ; (';')
                          } ('}')
                    lexical_declaration:
                      const ('const')
                      variable_declarator:
                        identifier ('t')
                        = ('=')
                        subscript_expression:
                          member_expression:
                            identifier ('resources')
                            . ('.')
                            property_identifier ('textures')
                          [ ('[')
                          call_expression:
                            member_expression:
                              member_expression:
                                identifier ('Scratch')
                                . ('.')
                                property_identifier ('Cast')
                              . ('.')
                              property_identifier ('toString')
                            arguments:
                              ( ('(')
                              member_expression:
                                identifier ('args')
                                . ('.')
                                property_identifier ('TEXTURE')
                              ) (')')
                          ] (']')
                      ; (';')
                    expression_statement:
                      call_expression:
                        member_expression:
                          identifier ('console')
                          . ('.')
                          property_identifier ('log')
                        arguments:
                          ( ('(')
                          object:
                            { ('{')
                            pair:
                              property_identifier ('texture')
                              : (':')
                              identifier ('t')
                            , (',')
                            } ('}')
                          , (',')
                          identifier ('textureData')
                          , (',')
                          object:
                            { ('{')
                            pair:
                              property_identifier ('bytesPerRow')
                              : (':')
                              binary_expression:
                                call_expression:
                                  member_expression:
                                    this ('this')
                                    . ('.')
                                    property_identifier ('bytesFromFormat')
                                  arguments:
                                    ( ('(')
                                    member_expression:
                                      identifier ('t')
                                      . ('.')
                                      property_identifier ('format')
                                    ) (')')
                                * ('*')
                                member_expression:
                                  identifier ('t')
                                  . ('.')
                                  property_identifier ('width')
                            } ('}')
                          , (',')
                          comment ('// get the number of bytes per pixel, multiplied by the width of the row.')
                          object:
                            { ('{')
                            pair:
                              property_identifier ('width')
                              : (':')
                              member_expression:
                                identifier ('t')
                                . ('.')
                                property_identifier ('width')
                            , (',')
                            pair:
                              property_identifier ('height')
                              : (':')
                              member_expression:
                                identifier ('t')
                                . ('.')
                                property_identifier ('height')
                            } ('}')
                          ) (')')
                      ; (';')
                    expression_statement:
                      call_expression:
                        member_expression:
                          member_expression:
                            member_expression:
                              this ('this')
                              . ('.')
                              property_identifier ('device')
                            . ('.')
                            property_identifier ('queue')
                          . ('.')
                          property_identifier ('writeTexture')
                        arguments:
                          ( ('(')
                          object:
                            { ('{')
                            pair:
                              property_identifier ('texture')
                              : (':')
                              identifier ('t')
                            , (',')
                            } ('}')
                          , (',')
                          identifier ('textureData')
                          , (',')
                          object:
                            { ('{')
                            pair:
                              property_identifier ('bytesPerRow')
                              : (':')
                              binary_expression:
                                call_expression:
                                  member_expression:
                                    this ('this')
                                    . ('.')
                                    property_identifier ('bytesFromFormat')
                                  arguments:
                                    ( ('(')
                                    member_expression:
                                      identifier ('t')
                                      . ('.')
                                      property_identifier ('format')
                                    ) (')')
                                * ('*')
                                member_expression:
                                  identifier ('t')
                                  . ('.')
                                  property_identifier ('width')
                            } ('}')
                          , (',')
                          comment ('// get the number of bytes per pixel, multiplied by the width of the row.')
                          object:
                            { ('{')
                            pair:
                              property_identifier ('width')
                              : (':')
                              member_expression:
                                identifier ('t')
                                . ('.')
                                property_identifier ('width')
                            , (',')
                            pair:
                              property_identifier ('height')
                              : (':')
                              member_expression:
                                identifier ('t')
                                . ('.')
                                property_identifier ('height')
                            } ('}')
                          ) (')')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('getImageList')
                  formal_parameters:
                    ( ('(')
                    ) (')')
                  statement_block:
                    { ('{')
                    return_statement:
                      return ('return')
                      call_expression:
                        member_expression:
                          member_expression:
                            member_expression:
                              member_expression:
                                identifier ('vm')
                                . ('.')
                                property_identifier ('editingTarget')
                              . ('.')
                              property_identifier ('sprite')
                            . ('.')
                            property_identifier ('costumes')
                          . ('.')
                          property_identifier ('map')
                        arguments:
                          ( ('(')
                          arrow_function:
                            formal_parameters:
                              ( ('(')
                              identifier ('v')
                              ) (')')
                            => ('=>')
                            member_expression:
                              identifier ('v')
                              . ('.')
                              property_identifier ('name')
                          ) (')')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('createSampler')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    expression_statement:
                      assignment_expression:
                        subscript_expression:
                          member_expression:
                            identifier ('resources')
                            . ('.')
                            property_identifier ('samplers')
                          [ ('[')
                          call_expression:
                            member_expression:
                              member_expression:
                                identifier ('Scratch')
                                . ('.')
                                property_identifier ('Cast')
                              . ('.')
                              property_identifier ('toString')
                            arguments:
                              ( ('(')
                              member_expression:
                                identifier ('args')
                                . ('.')
                                property_identifier ('NAME')
                              ) (')')
                          ] (']')
                        = ('=')
                        call_expression:
                          member_expression:
                            member_expression:
                              this ('this')
                              . ('.')
                              property_identifier ('device')
                            . ('.')
                            property_identifier ('createSampler')
                          arguments:
                            ( ('(')
                            object:
                              { ('{')
                              comment ('// @ts-expect-error')
                              pair:
                                property_identifier ('addressModeU')
                                : (':')
                                call_expression:
                                  member_expression:
                                    member_expression:
                                      identifier ('Scratch')
                                      . ('.')
                                      property_identifier ('Cast')
                                    . ('.')
                                    property_identifier ('toString')
                                  arguments:
                                    ( ('(')
                                    member_expression:
                                      identifier ('args')
                                      . ('.')
                                      property_identifier ('UMODE')
                                    ) (')')
                              , (',')
                              comment ('// @ts-expect-error')
                              pair:
                                property_identifier ('addressModeV')
                                : (':')
                                call_expression:
                                  member_expression:
                                    member_expression:
                                      identifier ('Scratch')
                                      . ('.')
                                      property_identifier ('Cast')
                                    . ('.')
                                    property_identifier ('toString')
                                  arguments:
                                    ( ('(')
                                    member_expression:
                                      identifier ('args')
                                      . ('.')
                                      property_identifier ('VMODE')
                                    ) (')')
                              , (',')
                              comment ('// @ts-expect-error')
                              pair:
                                property_identifier ('magFilter')
                                : (':')
                                call_expression:
                                  member_expression:
                                    member_expression:
                                      identifier ('Scratch')
                                      . ('.')
                                      property_identifier ('Cast')
                                    . ('.')
                                    property_identifier ('toString')
                                  arguments:
                                    ( ('(')
                                    member_expression:
                                      identifier ('args')
                                      . ('.')
                                      property_identifier ('MAGFILTER')
                                    ) (')')
                              , (',')
                              } ('}')
                            ) (')')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('bytesFromFormat')
                  formal_parameters:
                    ( ('(')
                    identifier ('format')
                    ) (')')
                  statement_block:
                    { ('{')
                    comment ('// returns the bytes per pixel of a given format')
                    return_statement:
                      return ('return')
                      subscript_expression:
                        object:
                          { ('{')
                          pair:
                            property_identifier ('r8unorm')
                            : (':')
                            number ('1')
                          , (',')
                          pair:
                            property_identifier ('r8norm')
                            : (':')
                            number ('1')
                          , (',')
                          pair:
                            property_identifier ('r8uint')
                            : (':')
                            number ('1')
                          , (',')
                          pair:
                            property_identifier ('r8int')
                            : (':')
                            number ('1')
                          , (',')
                          pair:
                            property_identifier ('r16uint')
                            : (':')
                            number ('2')
                          , (',')
                          pair:
                            property_identifier ('r16sint')
                            : (':')
                            number ('2')
                          , (',')
                          pair:
                            property_identifier ('r16float')
                            : (':')
                            number ('2')
                          , (',')
                          pair:
                            property_identifier ('rg8unorm')
                            : (':')
                            number ('2')
                          , (',')
                          pair:
                            property_identifier ('rg8snorm')
                            : (':')
                            number ('2')
                          , (',')
                          pair:
                            property_identifier ('rg8uint')
                            : (':')
                            number ('2')
                          , (',')
                          pair:
                            property_identifier ('rg8sint')
                            : (':')
                            number ('2')
                          , (',')
                          pair:
                            property_identifier ('r32uint')
                            : (':')
                            number ('4')
                          , (',')
                          pair:
                            property_identifier ('r32sint')
                            : (':')
                            number ('4')
                          , (',')
                          pair:
                            property_identifier ('r32float')
                            : (':')
                            number ('4')
                          , (',')
                          pair:
                            property_identifier ('rg16uint')
                            : (':')
                            number ('4')
                          , (',')
                          pair:
                            property_identifier ('rg16sint')
                            : (':')
                            number ('4')
                          , (',')
                          pair:
                            property_identifier ('rg16float')
                            : (':')
                            number ('4')
                          , (',')
                          pair:
                            property_identifier ('rgba8unorm')
                            : (':')
                            number ('4')
                          , (',')
                          pair:
                            string:
                              " ('"')
                              string_fragment ('rgba8unorm-srgb')
                              " ('"')
                            : (':')
                            number ('4')
                          , (',')
                          pair:
                            property_identifier ('rgba8snorm')
                            : (':')
                            number ('4')
                          , (',')
                          pair:
                            property_identifier ('rgba8uint')
                            : (':')
                            number ('4')
                          , (',')
                          pair:
                            property_identifier ('bgra8unorm')
                            : (':')
                            number ('4')
                          , (',')
                          pair:
                            string:
                              " ('"')
                              string_fragment ('bgra8unorm-srgb')
                              " ('"')
                            : (':')
                            number ('4')
                          , (',')
                          pair:
                            property_identifier ('rgba10a2unorm')
                            : (':')
                            number ('4')
                          , (',')
                          pair:
                            property_identifier ('rg11b10ufloat')
                            : (':')
                            number ('4')
                          , (',')
                          pair:
                            property_identifier ('rgba9e5ufloat')
                            : (':')
                            number ('4')
                          , (',')
                          pair:
                            property_identifier ('rg32uint')
                            : (':')
                            number ('8')
                          , (',')
                          pair:
                            property_identifier ('rg32sint')
                            : (':')
                            number ('8')
                          , (',')
                          pair:
                            property_identifier ('rg32float')
                            : (':')
                            number ('8')
                          , (',')
                          pair:
                            property_identifier ('rgba16uint')
                            : (':')
                            number ('8')
                          , (',')
                          pair:
                            property_identifier ('rgba16sint')
                            : (':')
                            number ('8')
                          , (',')
                          pair:
                            property_identifier ('rgba16float')
                            : (':')
                            number ('8')
                          , (',')
                          pair:
                            property_identifier ('rgba32uint')
                            : (':')
                            number ('16')
                          , (',')
                          pair:
                            property_identifier ('rgba32sint')
                            : (':')
                            number ('16')
                          , (',')
                          pair:
                            property_identifier ('rgba32float')
                            : (':')
                            number ('16')
                          , (',')
                          } ('}')
                        [ ('[')
                        identifier ('format')
                        ] (']')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('textureType')
                  formal_parameters:
                    ( ('(')
                    ) (')')
                  statement_block:
                    { ('{')
                    return_statement:
                      return ('return')
                      string:
                        " ('"')
                        string_fragment ('This block allows you to add texture types to your shaders')
                        " ('"')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('samplerType')
                  formal_parameters:
                    ( ('(')
                    ) (')')
                  statement_block:
                    { ('{')
                    return_statement:
                      return ('return')
                      string:
                        " ('"')
                        string_fragment ('This block allows you to add sampler types to your shaders')
                        " ('"')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('textureEntryDescriptor')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    return_statement:
                      return ('return')
                      call_expression:
                        member_expression:
                          identifier ('JSON')
                          . ('.')
                          property_identifier ('stringify')
                        arguments:
                          ( ('(')
                          object:
                            { ('{')
                            pair:
                              property_identifier ('access')
                              : (':')
                              call_expression:
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('Cast')
                                  . ('.')
                                  property_identifier ('toString')
                                arguments:
                                  ( ('(')
                                  member_expression:
                                    identifier ('args')
                                    . ('.')
                                    property_identifier ('TYPE')
                                  ) (')')
                            , (',')
                            pair:
                              property_identifier ('format')
                              : (':')
                              call_expression:
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('Cast')
                                  . ('.')
                                  property_identifier ('toString')
                                arguments:
                                  ( ('(')
                                  member_expression:
                                    identifier ('args')
                                    . ('.')
                                    property_identifier ('FORMAT')
                                  ) (')')
                            , (',')
                            } ('}')
                          ) (')')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('samplerEntryDescriptor')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    return_statement:
                      return ('return')
                      call_expression:
                        member_expression:
                          identifier ('JSON')
                          . ('.')
                          property_identifier ('stringify')
                        arguments:
                          ( ('(')
                          object:
                            { ('{')
                            pair:
                              property_identifier ('samplerType')
                              : (':')
                              call_expression:
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('Cast')
                                  . ('.')
                                  property_identifier ('toString')
                                arguments:
                                  ( ('(')
                                  member_expression:
                                    identifier ('args')
                                    . ('.')
                                    property_identifier ('TYPE')
                                  ) (')')
                            , (',')
                            } ('}')
                          ) (')')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('copyTextureToBuffer')
                  formal_parameters:
                    ( ('(')
                    identifier ('args')
                    , (',')
                    identifier ('util')
                    ) (')')
                  statement_block:
                    { ('{')
                    lexical_declaration:
                      const ('const')
                      variable_declarator:
                        identifier ('commandEncoder')
                        = ('=')
                        call_expression:
                          member_expression:
                            member_expression:
                              this ('this')
                              . ('.')
                              property_identifier ('device')
                            . ('.')
                            property_identifier ('createCommandEncoder')
                          arguments:
                            ( ('(')
                            object:
                              { ('{')
                              pair:
                                property_identifier ('label')
                                : (':')
                                string:
                                  " ('"')
                                  string_fragment ('copyTextureToBuffer encoder')
                                  " ('"')
                              , (',')
                              } ('}')
                            ) (')')
                      ; (';')
                    expression_statement:
                      call_expression:
                        member_expression:
                          identifier ('commandEncoder')
                          . ('.')
                          property_identifier ('copyTextureToBuffer')
                        arguments:
                          ( ('(')
                          object:
                            { ('{')
                            pair:
                              property_identifier ('texture')
                              : (':')
                              subscript_expression:
                                member_expression:
                                  identifier ('resources')
                                  . ('.')
                                  property_identifier ('textures')
                                [ ('[')
                                call_expression:
                                  member_expression:
                                    member_expression:
                                      identifier ('Scratch')
                                      . ('.')
                                      property_identifier ('Cast')
                                    . ('.')
                                    property_identifier ('toString')
                                  arguments:
                                    ( ('(')
                                    member_expression:
                                      identifier ('args')
                                      . ('.')
                                      property_identifier ('TEXTURE')
                                    ) (')')
                                ] (']')
                            , (',')
                            comment ('// todo: origin here')
                            } ('}')
                          , (',')
                          object:
                            { ('{')
                            pair:
                              property_identifier ('buffer')
                              : (':')
                              subscript_expression:
                                member_expression:
                                  identifier ('resources')
                                  . ('.')
                                  property_identifier ('buffers')
                                [ ('[')
                                call_expression:
                                  member_expression:
                                    member_expression:
                                      identifier ('Scratch')
                                      . ('.')
                                      property_identifier ('Cast')
                                    . ('.')
                                    property_identifier ('toString')
                                  arguments:
                                    ( ('(')
                                    member_expression:
                                      identifier ('args')
                                      . ('.')
                                      property_identifier ('BUFFER')
                                    ) (')')
                                ] (']')
                            , (',')
                            } ('}')
                          , (',')
                          object:
                            { ('{')
                            pair:
                              property_identifier ('width')
                              : (':')
                              call_expression:
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('Cast')
                                  . ('.')
                                  property_identifier ('toNumber')
                                arguments:
                                  ( ('(')
                                  member_expression:
                                    identifier ('args')
                                    . ('.')
                                    property_identifier ('WIDTH')
                                  ) (')')
                            , (',')
                            pair:
                              property_identifier ('height')
                              : (':')
                              call_expression:
                                member_expression:
                                  member_expression:
                                    identifier ('Scratch')
                                    . ('.')
                                    property_identifier ('Cast')
                                  . ('.')
                                  property_identifier ('toNumber')
                                arguments:
                                  ( ('(')
                                  member_expression:
                                    identifier ('args')
                                    . ('.')
                                    property_identifier ('HEIGHT')
                                  ) (')')
                            , (',')
                            } ('}')
                          ) (')')
                      ; (';')
                    expression_statement:
                      call_expression:
                        member_expression:
                          member_expression:
                            member_expression:
                              this ('this')
                              . ('.')
                              property_identifier ('device')
                            . ('.')
                            property_identifier ('queue')
                          . ('.')
                          property_identifier ('submit')
                        arguments:
                          ( ('(')
                          array:
                            [ ('[')
                            call_expression:
                              member_expression:
                                identifier ('commandEncoder')
                                . ('.')
                                property_identifier ('finish')
                              arguments:
                                ( ('(')
                                ) (')')
                            ] (']')
                          ) (')')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('declareStruct')
                  formal_parameters:
                    ( ('(')
                    ) (')')
                  statement_block:
                    { ('{')
                    return_statement:
                      return ('return')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('structProperty')
                  formal_parameters:
                    ( ('(')
                    ) (')')
                  statement_block:
                    { ('{')
                    return_statement:
                      return ('return')
                      ; (';')
                    } ('}')
                method_definition:
                  property_identifier ('structType')
                  formal_parameters:
                    ( ('(')
                    ) (')')
                  statement_block:
                    { ('{')
                    return_statement:
                      return ('return')
                      string:
                        " ('"')
                        string_fragment ('This block lets you use a struct as a type.')
                        " ('"')
                      ; (';')
                    } ('}')
                } ('}')
            comment ('// @ts-ignore')
            expression_statement:
              call_expression:
                member_expression:
                  member_expression:
                    identifier ('Scratch')
                    . ('.')
                    property_identifier ('extensions')
                  . ('.')
                  property_identifier ('register')
                arguments:
                  ( ('(')
                  new_expression:
                    new ('new')
                    identifier ('GPUSb3')
                    arguments:
                      ( ('(')
                      ) (')')
                  ) (')')
              ; (';')
            } ('}')
        ) (')')
      arguments:
        ( ('(')
        identifier ('Scratch')
        ) (')')
    ; (';')