from pypenguin.opcode_info.data_imports import *

class ExtensionDropdownType(DropdownType):
    TYPES = DropdownTypeInfo(
        direct_values=["i32", "u32", "f32", "bool", "auto"],
        rules=[],
        old_direct_values=["i32", "u32", "f32", "bool", "auto"],
        fallback=None,
    )
    VARTYPES = DropdownTypeInfo(
        direct_values=["var", "let", "const"],
        rules=[],
        old_direct_values=["var", "let", "const"],
        fallback=None,
    )
    VAROPS = DropdownTypeInfo(
        direct_values=["=", "+=", "-=", "*=", "/=", "%=", "&=", "|=", "^=", ">>=", "<<="],
        rules=[],
        old_direct_values=["=", "+=", "-=", "*=", "/=", "%=", "&=", "|=", "^=", ">>=", "<<="],
        fallback=None,
    )
    WGSLFUNCS = DropdownTypeInfo(
        direct_values=[
            "all",
            "any",
            "arrayLength",
            "asinh",
            "bitcast",
            "bool",
            "cosh",
            "countLeadingZeros",
            "countOneBits",
            "countTrailingZeros",
            "degrees",
            "determinant",
            "exp",
            "exp2",
            "f32",
            "firstLeadingBit",
            "firstTrailingBit",
            "fract",
            "frexp",
            "i32",
            "inverseSqrt",
            "length",
            "log",
            "log2",
            "modf",
            "normalize",
            "pack2x16float",
            "pack2x16snorm",
            "pack2x16unorm",
            "pack4x8snorm",
            "pack4x8unorm",
            "quantizeToF16",
            "radians",
            "reverseBits",
            "saturate",
            "sign",
            "sinh",
            "tanh",
            "textureDimensions",
            "textureLoad",
            "textureStore",
            "textureNumLayers",
            "textureNumLevels",
            "textureNumSamples",
            "transpose",
            "trunc",
            "u32",
            "unpack2x16float",
            "unpack2x16snorm",
            "unpack2x16unorm",
            "unpack4x8snorm",
            "unpack4x8unorm",
        ],
        rules=[],
        old_direct_values=[
            "all",
            "any",
            "arrayLength",
            "asinh",
            "bitcast",
            "bool",
            "cosh",
            "countLeadingZeros",
            "countOneBits",
            "countTrailingZeros",
            "degrees",
            "determinant",
            "exp",
            "exp2",
            "f32",
            "firstLeadingBit",
            "firstTrailingBit",
            "fract",
            "frexp",
            "i32",
            "inverseSqrt",
            "length",
            "log",
            "log2",
            "modf",
            "normalize",
            "pack2x16float",
            "pack2x16snorm",
            "pack2x16unorm",
            "pack4x8snorm",
            "pack4x8unorm",
            "quantizeToF16",
            "radians",
            "reverseBits",
            "saturate",
            "sign",
            "sinh",
            "tanh",
            "textureDimensions",
            "textureLoad",
            "textureStore",
            "textureNumLayers",
            "textureNumLevels",
            "textureNumSamples",
            "transpose",
            "trunc",
            "u32",
            "unpack2x16float",
            "unpack2x16snorm",
            "unpack2x16unorm",
            "unpack4x8snorm",
            "unpack4x8unorm",
        ],
        fallback=None,
    )
    FUNCTYPES = DropdownTypeInfo(
        direct_values=["i32", "u32", "f32", "bool", "void"],
        rules=[],
        old_direct_values=["i32", "u32", "f32", "bool", "void"],
        fallback=None,
    )
    RAWTYPES = DropdownTypeInfo(
        direct_values=["i32", "u32", "f32", "bool"],
        rules=[],
        old_direct_values=["i32", "u32", "f32", "bool"],
        fallback=None,
    )
    BGLENTRYTYPES = DropdownTypeInfo(
        direct_values=["buffer", "storageTexture"],
        rules=[],
        old_direct_values=["buffer", "storageTexture"],
        fallback=None,
    )
    CONSTRUCTABLETYPES = DropdownTypeInfo(
        direct_values=["vec2", "vec3", "vec4", "array"],
        rules=[],
        old_direct_values=["vec2", "vec3", "vec4", "array"],
        fallback=None,
    )
    BUFFERUSAGE = DropdownTypeInfo(
        direct_values=[
            "COPY_SRC",
            "COPY_DST",
            "MAP_READ",
            "MAP_WRITE",
            "QUERY_RESOLVE",
            "STORAGE",
            "UNIFORM",
        ],
        rules=[],
        old_direct_values=[
            "COPY_SRC",
            "COPY_DST",
            "MAP_READ",
            "MAP_WRITE",
            "QUERY_RESOLVE",
            "STORAGE",
            "UNIFORM",
        ],
        fallback=None,
    )
    BUFFERENTRYTYPE = DropdownTypeInfo(
        direct_values=[
            "read-only-storage",
            "storage",
            "uniform",
        ],
        rules=[],
        old_direct_values=[
            "read-only-storage",
            "storage",
            "uniform",
        ],
        fallback=None,
    )
    VARUSAGE = DropdownTypeInfo(
        direct_values=[
            "read",
            "write",
            "read_write",
            "function",
            "private",
            "workgroup",
            "uniform",
            "storage",
        ],
        rules=[],
        old_direct_values=[
            "read",
            "write",
            "read_write",
            "function",
            "private",
            "workgroup",
            "uniform",
            "storage",
        ],
        fallback=None,
    )
    ATOMICBASES = DropdownTypeInfo(
        direct_values=["i32", "u32"],
        rules=[],
        old_direct_values=["i32", "u32"],
        fallback=None,
    )
    ATOMICFUNCTIONS = DropdownTypeInfo(
        direct_values=[
            "atomicStore",
            "atomicAdd",
            "atomicSub",
            "atomicMax",
            "atomicMin",
            "atomicAnd",
            "atomicOr",
            "atomicXor",
            "atomicExchange",
            "atomicCompareExchangeWeak",
        ],
        rules=[],
        old_direct_values=[
            "atomicStore",
            "atomicAdd",
            "atomicSub",
            "atomicMax",
            "atomicMin",
            "atomicAnd",
            "atomicOr",
            "atomicXor",
            "atomicExchange",
            "atomicCompareExchangeWeak",
        ],
        fallback=None,
    )
    BARRIERFUNCTIONS = DropdownTypeInfo(
        direct_values=[
            "storageBarrier",
            "workgroupBarrier",
            "textureBarrier",
        ],
        rules=[],
        old_direct_values=[
            "storageBarrier",
            "workgroupBarrier",
            "textureBarrier",
        ],
        fallback=None,
    )
    TYPEDARRAYTYPES = DropdownTypeInfo(
        direct_values=[
            "Int32Array",
            "Uint32Array",
            "Float32Array",
            "Int8Array",
            "Uint8Array",
            "Uint8ClampedArray",
            "Int16Array",
            "Uint16Array",
            "BigInt64Array",
            "BigUint64Array",
            "Float64Array",
        ],
        rules=[],
        old_direct_values=[
            "Int32Array",
            "Uint32Array",
            "Float32Array",
            "Int8Array",
            "Uint8Array",
            "Uint8ClampedArray",
            "Int16Array",
            "Uint16Array",
            "BigInt64Array",
            "BigUint64Array",
            "Float64Array",
        ],
        fallback=None,
    )
    ARRAYBUFFERS = DropdownTypeInfo(
        direct_values=[],
        rules=[DropdownValueRule.EXTENSION_UNPREDICTABLE],
        old_direct_values=[],
        fallback=None,
    )
    TYPEDARRAYPROPS = DropdownTypeInfo(
        direct_values=[
            "BYTES_PER_ELEMENT",
            "byteLength",
            "length",
        ],
        rules=[],
        old_direct_values=[
            "BYTES_PER_ELEMENT",
            "byteLength",
            "length",
        ],
        fallback=None,
    )
    TEXTURECOLORFORMATS = DropdownTypeInfo(
        direct_values=[
            "r8unorm",
            "r8snorm",
            "r8uint",
            "r8sint",
            "r16uint",
            "r16sint",
            "r16float",
            "rg8unorm",
            "rg8snorm",
            "rg8uint",
            "rg8sint",
            "r32uint",
            "r32sint",
            "r32float",
            "rg16uint",
            "rg16sint",
            "rg16float",
            "rgba8unorm",
            "rgba8snorm",
            "rgba8uint",
            "rgba8sint",
            "bgra8unorm",
            "bgra8unorm-srgb",
            "rg32uint",
            "rg32sint",
            "rg32float",
            "rgba16uint",
            "rgba16sint",
            "rgba16float",
            "rgba32uint",
            "rgba32sint",
            "rgba32float",
        ],
        rules=[],
        old_direct_values=[
            "r8unorm",
            "r8snorm",
            "r8uint",
            "r8sint",
            "r16uint",
            "r16sint",
            "r16float",
            "rg8unorm",
            "rg8snorm",
            "rg8uint",
            "rg8sint",
            "r32uint",
            "r32sint",
            "r32float",
            "rg16uint",
            "rg16sint",
            "rg16float",
            "rgba8unorm",
            "rgba8snorm",
            "rgba8uint",
            "rgba8sint",
            "bgra8unorm",
            "bgra8unorm-srgb",
            "rg32uint",
            "rg32sint",
            "rg32float",
            "rgba16uint",
            "rgba16sint",
            "rgba16float",
            "rgba32uint",
            "rgba32sint",
            "rgba32float",
        ],
        fallback=None,
    )
    TEXTUREUSAGE = DropdownTypeInfo(
        direct_values=[
            "COPY_SRC",
            "COPY_DST",
            "TEXTURE_BINDING",
            "STORAGE_BINDING",
        ],
        rules=[],
        old_direct_values=[
            "COPY_SRC",
            "COPY_DST",
            "TEXTURE_BINDING",
            "STORAGE_BINDING",
        ],
        fallback=None,
    )
    ADDRESSMODES = DropdownTypeInfo(
        direct_values=[
            "clamp-to-edge",
            "repeat",
            "mirror-repeat",
        ],
        rules=[],
        old_direct_values=[
            "clamp-to-edge",
            "repeat",
            "mirror-repeat",
        ],
        fallback=None,
    )
    FILTERMODES = DropdownTypeInfo(
        direct_values=["nearest", "filter"],
        rules=[],
        old_direct_values=["nearest", "filter"],
        fallback=None,
    )
    TEXTUREENTRYTYPE = DropdownTypeInfo(
        direct_values=[
            "write-only",
            "read-only",
            "read-write",
        ],
        rules=[],
        old_direct_values=[
            "write-only",
            "read-only",
            "read-write",
        ],
        fallback=None,
    )
    SAMPLERENTRYTYPE = DropdownTypeInfo(
        direct_values=[
            "float",
            "unfilterable-float",
            "sint",
            "uint",
        ],
        rules=[],
        old_direct_values=[
            "float",
            "unfilterable-float",
            "sint",
            "uint",
        ],
        fallback=None,
    )
    TEXTUREBASETYPES = DropdownTypeInfo(
        direct_values=["f32", "i32", "u32"],
        rules=[],
        old_direct_values=["f32", "i32", "u32"],
        fallback=None,
    )
    VARIABLEACCESSTYPES = DropdownTypeInfo(
        direct_values=[
            "read",
            "write",
            "read_write",
        ],
        rules=[],
        old_direct_values=[
            "read",
            "write",
            "read_write",
        ],
        fallback=None,
    )

class ExtensionInputType(InputType):
    TYPES = (
        InputMode.BLOCK_AND_DROPDOWN,
        None,
        ExtensionDropdownType.TYPES,
        0,
    )
    VARTYPES = (
        InputMode.BLOCK_AND_DROPDOWN,
        None,
        ExtensionDropdownType.VARTYPES,
        1,
    )
    VAROPS = (
        InputMode.BLOCK_AND_DROPDOWN,
        None,
        ExtensionDropdownType.VAROPS,
        2,
    )
    WGSLFUNCS = (
        InputMode.BLOCK_AND_DROPDOWN,
        None,
        ExtensionDropdownType.WGSLFUNCS,
        3,
    )
    FUNCTYPES = (
        InputMode.BLOCK_AND_DROPDOWN,
        None,
        ExtensionDropdownType.FUNCTYPES,
        4,
    )
    RAWTYPES = (
        InputMode.BLOCK_AND_DROPDOWN,
        None,
        ExtensionDropdownType.RAWTYPES,
        5,
    )
    BGLENTRYTYPES = (
        InputMode.BLOCK_AND_DROPDOWN,
        None,
        ExtensionDropdownType.BGLENTRYTYPES,
        6,
    )
    CONSTRUCTABLETYPES = (
        InputMode.BLOCK_AND_DROPDOWN,
        None,
        ExtensionDropdownType.CONSTRUCTABLETYPES,
        7,
    )
    BUFFERUSAGE = (
        InputMode.BLOCK_AND_DROPDOWN,
        None,
        ExtensionDropdownType.BUFFERUSAGE,
        8,
    )
    BUFFERENTRYTYPE = (
        InputMode.BLOCK_AND_DROPDOWN,
        None,
        ExtensionDropdownType.BUFFERENTRYTYPE,
        9,
    )
    VARUSAGE = (
        InputMode.BLOCK_AND_DROPDOWN,
        None,
        ExtensionDropdownType.VARUSAGE,
        10,
    )
    ATOMICBASES = (
        InputMode.BLOCK_AND_DROPDOWN,
        None,
        ExtensionDropdownType.ATOMICBASES,
        11,
    )
    ATOMICFUNCTIONS = (
        InputMode.BLOCK_AND_DROPDOWN,
        None,
        ExtensionDropdownType.ATOMICFUNCTIONS,
        12,
    )
    BARRIERFUNCTIONS = (
        InputMode.BLOCK_AND_DROPDOWN,
        None,
        ExtensionDropdownType.BARRIERFUNCTIONS,
        13,
    )
    TYPEDARRAYTYPES = (
        InputMode.BLOCK_AND_DROPDOWN,
        None,
        ExtensionDropdownType.TYPEDARRAYTYPES,
        14,
    )
    ARRAYBUFFERS = (
        InputMode.BLOCK_AND_DROPDOWN,
        None,
        ExtensionDropdownType.ARRAYBUFFERS,
        15,
    )
    TYPEDARRAYPROPS = (
        InputMode.BLOCK_AND_DROPDOWN,
        None,
        ExtensionDropdownType.TYPEDARRAYPROPS,
        16,
    )
    TEXTURECOLORFORMATS = (
        InputMode.BLOCK_AND_DROPDOWN,
        None,
        ExtensionDropdownType.TEXTURECOLORFORMATS,
        17,
    )
    TEXTUREUSAGE = (
        InputMode.BLOCK_AND_DROPDOWN,
        None,
        ExtensionDropdownType.TEXTUREUSAGE,
        18,
    )
    IMAGELIST = (
        InputMode.BLOCK_AND_DROPDOWN,
        None,
        ExtensionDropdownType.ARRAYBUFFERS,
        19,
    )
    ADDRESSMODES = (
        InputMode.BLOCK_AND_DROPDOWN,
        None,
        ExtensionDropdownType.ADDRESSMODES,
        20,
    )
    FILTERMODES = (
        InputMode.BLOCK_AND_DROPDOWN,
        None,
        ExtensionDropdownType.FILTERMODES,
        21,
    )
    TEXTUREENTRYTYPE = (
        InputMode.BLOCK_AND_DROPDOWN,
        None,
        ExtensionDropdownType.TEXTUREENTRYTYPE,
        22,
    )
    SAMPLERENTRYTYPE = (
        InputMode.BLOCK_AND_DROPDOWN,
        None,
        ExtensionDropdownType.SAMPLERENTRYTYPE,
        23,
    )
    TEXTUREBASETYPES = (
        InputMode.BLOCK_AND_DROPDOWN,
        None,
        ExtensionDropdownType.TEXTUREBASETYPES,
        24,
    )
    VARIABLEACCESSTYPES = (
        InputMode.BLOCK_AND_DROPDOWN,
        None,
        ExtensionDropdownType.VARIABLEACCESSTYPES,
        25,
    )

gpusb3 = OpcodeInfoGroup(
    name="gpusb3",
    opcode_info=DualKeyDict({
        ("gpusb3_compileHat", "gpusb3::Define shader (NAME) using bind group layout (BGL)"): OpcodeInfo(
            opcode_type=OpcodeType.HAT,
            inputs=DualKeyDict({
                ("NAME", "NAME"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("BGL", "BGL"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_compileStart", "gpusb3::compile shaders "): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_onError", "gpusb3::when error thrown"): OpcodeInfo(
            opcode_type=OpcodeType.HAT,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_clearError", "gpusb3::clear current error"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_error", "gpusb3::Error"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=True,
            monitor_id_behaviour=MonitorIdBehaviour.OPCFULL,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_init", "gpusb3::Reconnect to GPU"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_runGPU", "gpusb3::Run shader (GPUFUNC) using bind group (BINDGROUP) dimensions x: (X) y: (Y) z: (Z)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("GPUFUNC", "GPUFUNC"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("BINDGROUP", "BINDGROUP"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("X", "X"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("Y", "Y"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("Z", "Z"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_createBindGroupLayout", "gpusb3::Create bind group layout called (NAME) {SUBSTACK}"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("NAME", "NAME"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("SUBSTACK", "SUBSTACK"): InputInfo(type=BuiltinInputType.SCRIPT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_bindGroupLayoutEntry", "gpusb3::Add bind group layout entry with binding (BINDING) for type ([TYPE]) and descriptor (DESC)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("BINDING", "BINDING"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("TYPE", "TYPE"): InputInfo(
                    type=ExtensionInputType.BGLENTRYTYPES,
                    menu=MenuInfo(opcode="gpusb3_menu_BGLENTRYTYPES", inner="BGLENTRYTYPES"),
                ),
                ("DESC", "DESC"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_bufferEntryDescriptor", "gpusb3::Buffer layout entry descriptor with usage type ([TYPE])"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("TYPE", "TYPE"): InputInfo(
                    type=ExtensionInputType.BUFFERENTRYTYPE,
                    menu=MenuInfo(opcode="gpusb3_menu_BUFFERENTRYTYPE", inner="BUFFERENTRYTYPE"),
                ),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_textureEntryDescriptor", "gpusb3::Texture layout entry descriptor with usage type ([TYPE]) and format ([FORMAT])"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("TYPE", "TYPE"): InputInfo(
                    type=ExtensionInputType.TEXTUREENTRYTYPE,
                    menu=MenuInfo(opcode="gpusb3_menu_TEXTUREENTRYTYPE", inner="TEXTUREENTRYTYPE"),
                ),
                ("FORMAT", "FORMAT"): InputInfo(
                    type=ExtensionInputType.TEXTURECOLORFORMATS,
                    menu=MenuInfo(opcode="gpusb3_menu_TEXTURECOLORFORMATS", inner="TEXTURECOLORFORMATS"),
                ),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_samplerEntryDescriptor", "gpusb3::Sampler layout entry descriptor with sample type ([TYPE])"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("TYPE", "TYPE"): InputInfo(
                    type=ExtensionInputType.SAMPLERENTRYTYPE,
                    menu=MenuInfo(opcode="gpusb3_menu_SAMPLERENTRYTYPE", inner="SAMPLERENTRYTYPE"),
                ),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_createBindGroup", "gpusb3::Create bind group called (NAME) using layout (LAYOUT) {SUBSTACK}"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("NAME", "NAME"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("LAYOUT", "LAYOUT"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("SUBSTACK", "SUBSTACK"): InputInfo(type=BuiltinInputType.SCRIPT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_bindGroupEntry", "gpusb3::Add bind group entry with binding (BINDING) of type ([TYPE]) using resource named (RESOURCE)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("BINDING", "BINDING"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("TYPE", "TYPE"): InputInfo(
                    type=ExtensionInputType.BGLENTRYTYPES,
                    menu=MenuInfo(opcode="gpusb3_menu_BGLENTRYTYPES", inner="BGLENTRYTYPES"),
                ),
                ("RESOURCE", "RESOURCE"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_createBuffer", "gpusb3::Create buffer called (NAME) with size(in bytes) (SIZE) and usage flags (USAGE)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("NAME", "NAME"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("SIZE", "SIZE"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("USAGE", "USAGE"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_bufferUsage", "gpusb3::Buffer usage ([USAGE])"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("USAGE", "USAGE"): InputInfo(
                    type=ExtensionInputType.BUFFERUSAGE,
                    menu=MenuInfo(opcode="gpusb3_menu_BUFFERUSAGE", inner="BUFFERUSAGE"),
                ),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_createTexture", "gpusb3::Create texture called (NAME) width dimensions (WIDTH) [HEIGHT], color format ([FORMAT]) and usage (USAGE)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("NAME", "NAME"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("WIDTH", "WIDTH"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("HEIGHT", "HEIGHT"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("FORMAT", "FORMAT"): InputInfo(
                    type=ExtensionInputType.TEXTURECOLORFORMATS,
                    menu=MenuInfo(opcode="gpusb3_menu_TEXTURECOLORFORMATS", inner="TEXTURECOLORFORMATS"),
                ),
                ("USAGE", "USAGE"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_textureUsage", "gpusb3::Texture usage ([USAGE])"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("USAGE", "USAGE"): InputInfo(
                    type=ExtensionInputType.TEXTUREUSAGE,
                    menu=MenuInfo(opcode="gpusb3_menu_TEXTUREUSAGE", inner="TEXTUREUSAGE"),
                ),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_createSampler", "gpusb3::Create texture sampler called (NAME) with U address mode ([UMODE]) and v address mode ([VMODE]) and mag filter ([MAGFILTER])"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("NAME", "NAME"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("UMODE", "UMODE"): InputInfo(
                    type=ExtensionInputType.ADDRESSMODES,
                    menu=MenuInfo(opcode="gpusb3_menu_ADDRESSMODES", inner="ADDRESSMODES"),
                ),
                ("VMODE", "VMODE"): InputInfo(
                    type=ExtensionInputType.ADDRESSMODES,
                    menu=MenuInfo(opcode="gpusb3_menu_ADDRESSMODES", inner="ADDRESSMODES"),
                ),
                ("MAGFILTER", "MAGFILTER"): InputInfo(
                    type=ExtensionInputType.FILTERMODES,
                    menu=MenuInfo(opcode="gpusb3_menu_FILTERMODES", inner="FILTERMODES"),
                ),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_binaryOr", "gpusb3::Usage (A) | (B)"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("A", "A"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("B", "B"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_genF32", "gpusb3::F32 array from array (ARRAY)"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("ARRAY", "ARRAY"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_copyTextureToBuffer", "gpusb3::Copy texture (TEXTURE) to buffer (BUFFER) with dimensions (WIDTH) (HEIGHT)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("TEXTURE", "TEXTURE"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("BUFFER", "BUFFER"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("WIDTH", "WIDTH"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("HEIGHT", "HEIGHT"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_writeBuffer", "gpusb3::Write (SIZE) elements of data from arraybuffer (ARRAY) to buffer (BUFFER) from offset (OFF1) to offset (OFF2)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("SIZE", "SIZE"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("ARRAY", "ARRAY"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("BUFFER", "BUFFER"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("OFF1", "OFF1"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("OFF2", "OFF2"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_copyBufferToBuffer", "gpusb3::Copy (NUMBYTES) bytes of data from buffer (BUF1) from  position (BUF1OFF) to buffer (BUF2) at position (BUF2OFF)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("NUMBYTES", "NUMBYTES"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("BUF1", "BUF1"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("BUF1OFF", "BUF1OFF"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("BUF2", "BUF2"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("BUF2OFF", "BUF2OFF"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_clearBuffer", "gpusb3::Clear (NUMBYTES) bytes(-1 for all) of buffer (BUFFER) from offset (OFFSET)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("NUMBYTES", "NUMBYTES"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("BUFFER", "BUFFER"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("OFFSET", "OFFSET"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_readBuffer", "gpusb3::Read buffer (BUFFER) to arraybuffer (ARRAYBUFFER)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("BUFFER", "BUFFER"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("ARRAYBUFFER", "ARRAYBUFFER"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_writeTexture", "gpusb3::Write texture data from ([IMAGE]) to texture (TEXTURE)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("IMAGE", "IMAGE"): InputInfo(
                    type=ExtensionInputType.IMAGELIST,
                    menu=MenuInfo(opcode="gpusb3_menu_IMAGELIST", inner="IMAGELIST"),
                ),
                ("TEXTURE", "TEXTURE"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_listABs", "gpusb3::List arraybuffers"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=True,
            monitor_id_behaviour=MonitorIdBehaviour.OPCFULL,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_createAB", "gpusb3::Create arraybuffer called (ARRAYBUFFER) with length (LENGTH)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("ARRAYBUFFER", "ARRAYBUFFER"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("LENGTH", "LENGTH"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_createABFromArray", "gpusb3::Create arraybuffer and view called (ARRAYBUFFER) from array (ARRAY) of type ([TYPE]) "): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("ARRAYBUFFER", "ARRAYBUFFER"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("ARRAY", "ARRAY"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("TYPE", "TYPE"): InputInfo(
                    type=ExtensionInputType.TYPEDARRAYTYPES,
                    menu=MenuInfo(opcode="gpusb3_menu_TYPEDARRAYTYPES", inner="TYPEDARRAYTYPES"),
                ),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_deleteAB", "gpusb3::Delete arraybuffer (ARRAYBUFFER)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("ARRAYBUFFER", "ARRAYBUFFER"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_resizeAB", "gpusb3::Resize arraybuffer ([ARRAYBUFFER]) to (SIZE) bytes"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("ARRAYBUFFER", "ARRAYBUFFER"): InputInfo(
                    type=ExtensionInputType.ARRAYBUFFERS,
                    menu=MenuInfo(opcode="gpusb3_menu_ARRAYBUFFERS", inner="ARRAYBUFFERS"),
                ),
                ("SIZE", "SIZE"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_listViews", "gpusb3::List views"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=True,
            monitor_id_behaviour=MonitorIdBehaviour.OPCFULL,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_createABView", "gpusb3::View arraybuffer ([ARRAYBUFFER]) as ([TYPE]) called (NAME)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("ARRAYBUFFER", "ARRAYBUFFER"): InputInfo(
                    type=ExtensionInputType.ARRAYBUFFERS,
                    menu=MenuInfo(opcode="gpusb3_menu_ARRAYBUFFERS", inner="ARRAYBUFFERS"),
                ),
                ("TYPE", "TYPE"): InputInfo(
                    type=ExtensionInputType.TYPEDARRAYTYPES,
                    menu=MenuInfo(opcode="gpusb3_menu_TYPEDARRAYTYPES", inner="TYPEDARRAYTYPES"),
                ),
                ("NAME", "NAME"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_deleteView", "gpusb3::Delete view (NAME)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("NAME", "NAME"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_setItemInView", "gpusb3::Set item (INDEX) of view (VIEW) to (VALUE)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("INDEX", "INDEX"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("VIEW", "VIEW"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("VALUE", "VALUE"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_setView", "gpusb3::Copy data from array (ARRAY) to view (VIEW) from index (INDEX)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("ARRAY", "ARRAY"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("VIEW", "VIEW"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("INDEX", "INDEX"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_fillView", "gpusb3::Fill items (START) to (END) of view (VIEW) with (VALUE)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("START", "START"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("END", "END"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("VIEW", "VIEW"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("VALUE", "VALUE"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_itemOfView", "gpusb3::Item (INDEX) of arraybuffer view (VIEW)"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("INDEX", "INDEX"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("VIEW", "VIEW"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_sliceView", "gpusb3::Items (START) to (END) of view (VIEW)"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("START", "START"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("END", "END"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("VIEW", "VIEW"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_viewToArray", "gpusb3::Get view (VIEW) as array"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("VIEW", "VIEW"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_propFromView", "gpusb3::([PROP]) of view (VIEW)"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("PROP", "PROP"): InputInfo(
                    type=ExtensionInputType.TYPEDARRAYPROPS,
                    menu=MenuInfo(opcode="gpusb3_menu_TYPEDARRAYPROPS", inner="TYPEDARRAYPROPS"),
                ),
                ("VIEW", "VIEW"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_declareVar", "gpusb3::declare ([VARTYPE]) variable as (NAME) with value [VALUE]: ([TYPE])"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("VARTYPE", "VARTYPE"): InputInfo(
                    type=ExtensionInputType.VARTYPES,
                    menu=MenuInfo(opcode="gpusb3_menu_VARTYPES", inner="VARTYPES"),
                ),
                ("NAME", "NAME"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("VALUE", "VALUE"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("TYPE", "TYPE"): InputInfo(
                    type=ExtensionInputType.TYPES,
                    menu=MenuInfo(opcode="gpusb3_menu_TYPES", inner="TYPES"),
                ),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_bindInput", "gpusb3::Bind shader resource # (BINDNUM) to variable (VARNAME) with settings (SETTINGS) type (INPUTTYPE)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("BINDNUM", "BINDNUM"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("VARNAME", "VARNAME"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("SETTINGS", "SETTINGS"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("INPUTTYPE", "INPUTTYPE"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_variableUsage", "gpusb3::Variable usage ([USAGE]) next (NEXT)"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("USAGE", "USAGE"): InputInfo(
                    type=ExtensionInputType.VARUSAGE,
                    menu=MenuInfo(opcode="gpusb3_menu_VARUSAGE", inner="VARUSAGE"),
                ),
                ("NEXT", "NEXT"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_varOp", "gpusb3::Variable (VARNAME) ([VAROP])  (INPUT)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("VARNAME", "VARNAME"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("VAROP", "VAROP"): InputInfo(
                    type=ExtensionInputType.VAROPS,
                    menu=MenuInfo(opcode="gpusb3_menu_VAROPS", inner="VAROPS"),
                ),
                ("INPUT", "INPUT"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_getVar", "gpusb3::Get variable (NAME)"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("NAME", "NAME"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_variablePointer", "gpusb3::Pointer to variable (VAR)"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("VAR", "VAR"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_indexObject", "gpusb3::In object (ARRAY) get index (INDEX)"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("ARRAY", "ARRAY"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("INDEX", "INDEX"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_getProp", "gpusb3::In object (OBJECT) get property (PROP)"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("OBJECT", "OBJECT"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("PROP", "PROP"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_constructFromType", "gpusb3::Construct type ([TYPE]) with values (VALUES)"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("TYPE", "TYPE"): InputInfo(
                    type=ExtensionInputType.RAWTYPES,
                    menu=MenuInfo(opcode="gpusb3_menu_RAWTYPES", inner="RAWTYPES"),
                ),
                ("VALUES", "VALUES"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_typeConstructor", "gpusb3::Create type ([TYPE]) of [SUBTYPE], length(array only!) (LENGTH)"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("TYPE", "TYPE"): InputInfo(
                    type=ExtensionInputType.CONSTRUCTABLETYPES,
                    menu=MenuInfo(opcode="gpusb3_menu_CONSTRUCTABLETYPES", inner="CONSTRUCTABLETYPES"),
                ),
                ("SUBTYPE", "SUBTYPE"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("LENGTH", "LENGTH"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_matrixType", "gpusb3::Matrix type with (COLUMNS) columns and (ROWS) rows"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("COLUMNS", "COLUMNS"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("ROWS", "ROWS"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_textureType", "gpusb3::Texture type of ([TYPE]) with access ([ACCESS])"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("TYPE", "TYPE"): InputInfo(
                    type=ExtensionInputType.TEXTURECOLORFORMATS,
                    menu=MenuInfo(opcode="gpusb3_menu_TEXTURECOLORFORMATS", inner="TEXTURECOLORFORMATS"),
                ),
                ("ACCESS", "ACCESS"): InputInfo(
                    type=ExtensionInputType.VARIABLEACCESSTYPES,
                    menu=MenuInfo(opcode="gpusb3_menu_VARIABLEACCESSTYPES", inner="VARIABLEACCESSTYPES"),
                ),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_declareStruct", "gpusb3::Declare struct called (NAME) {SUBSTACK}"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("NAME", "NAME"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("SUBSTACK", "SUBSTACK"): InputInfo(type=BuiltinInputType.SCRIPT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_structProperty", "gpusb3::Add property called (PROPERTY) with type ([TYPE]) to struct"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("PROPERTY", "PROPERTY"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("TYPE", "TYPE"): InputInfo(
                    type=ExtensionInputType.RAWTYPES,
                    menu=MenuInfo(opcode="gpusb3_menu_RAWTYPES", inner="RAWTYPES"),
                ),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_structType", "gpusb3::Type of struct (STRUCT)"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("STRUCT", "STRUCT"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_samplerType", "gpusb3::Sampler type"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=True,
            monitor_id_behaviour=MonitorIdBehaviour.OPCFULL,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_rootType", "gpusb3::Base type ([TYPE])"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("TYPE", "TYPE"): InputInfo(
                    type=ExtensionInputType.RAWTYPES,
                    menu=MenuInfo(opcode="gpusb3_menu_RAWTYPES", inner="RAWTYPES"),
                ),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_wgslFunc", "gpusb3::WGSL builtin ([OPERATION]) with args (VALUE)"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("OPERATION", "OPERATION"): InputInfo(
                    type=ExtensionInputType.WGSLFUNCS,
                    menu=MenuInfo(opcode="gpusb3_menu_WGSLFUNCS", inner="WGSLFUNCS"),
                ),
                ("VALUE", "VALUE"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_funcArgs", "gpusb3::Func arg input [ARG], next (NEXT)"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("ARG", "ARG"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("NEXT", "NEXT"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_computeFunc", "gpusb3::Computer shader with workgroup size (WGSIZE) {SUBSTACK}"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("WGSIZE", "WGSIZE"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("SUBSTACK", "SUBSTACK"): InputInfo(type=BuiltinInputType.SCRIPT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_wgslForLoop", "gpusb3::For (VARNAME) in range [START], (END) {SUBSTACK}"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("VARNAME", "VARNAME"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("START", "START"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("END", "END"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("SUBSTACK", "SUBSTACK"): InputInfo(type=BuiltinInputType.SCRIPT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_wgslWhileLoop", "gpusb3::While (COND) {SUBSTACK}"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("COND", "COND"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("SUBSTACK", "SUBSTACK"): InputInfo(type=BuiltinInputType.SCRIPT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_break", "gpusb3::break"): OpcodeInfo(
            opcode_type=OpcodeType.ENDING_STATEMENT,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_continue", "gpusb3::continue"): OpcodeInfo(
            opcode_type=OpcodeType.ENDING_STATEMENT,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_defFunc", "gpusb3::Def function (FUNCNAME) that returns type ([TYPE]) with args (ARGS) {SUBSTACK}"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("FUNCNAME", "FUNCNAME"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("TYPE", "TYPE"): InputInfo(
                    type=ExtensionInputType.FUNCTYPES,
                    menu=MenuInfo(opcode="gpusb3_menu_FUNCTYPES", inner="FUNCTYPES"),
                ),
                ("SUBSTACK", "SUBSTACK"): InputInfo(type=BuiltinInputType.SCRIPT, menu=None),
                ("ARGS", "ARGS"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_defFuncArgs", "gpusb3::Def arg [ARGNAME]: [ARGTYPE], next (NEXTARG)"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("ARGNAME", "ARGNAME"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("ARGTYPE", "ARGTYPE"): InputInfo(
                    type=ExtensionInputType.RAWTYPES,
                    menu=MenuInfo(opcode="gpusb3_menu_RAWTYPES", inner="RAWTYPES"),
                ),
                ("NEXTARG", "NEXTARG"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_getFuncArg", "gpusb3::Get function arg (ARGNAME)"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("ARGNAME", "ARGNAME"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_funcReturn", "gpusb3::Return (TORETURN)"): OpcodeInfo(
            opcode_type=OpcodeType.ENDING_STATEMENT,
            inputs=DualKeyDict({
                ("TORETURN", "TORETURN"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_c_runFunc", "gpusb3::Run function (FUNCNAME) with args (ARGS)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("FUNCNAME", "FUNCNAME"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("ARGS", "ARGS"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_r_runFunc", "gpusb3::Run function (FUNCNAME) with args (ARGS)"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("FUNCNAME", "FUNCNAME"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("ARGS", "ARGS"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_atomicType", "gpusb3::Create atomic of type ([BASE])"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("BASE", "BASE"): InputInfo(
                    type=ExtensionInputType.ATOMICBASES,
                    menu=MenuInfo(opcode="gpusb3_menu_ATOMICBASES", inner="ATOMICBASES"),
                ),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_atomicLoad", "gpusb3::Load atomic (ATOMIC)"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("ATOMIC", "ATOMIC"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_c_atomicFunc", "gpusb3::Perform operation ([OP]) on atomic (ATOMIC) with value (VALUE)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("OP", "OP"): InputInfo(
                    type=ExtensionInputType.ATOMICFUNCTIONS,
                    menu=MenuInfo(opcode="gpusb3_menu_ATOMICFUNCTIONS", inner="ATOMICFUNCTIONS"),
                ),
                ("ATOMIC", "ATOMIC"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("VALUE", "VALUE"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_r_atomicFunc", "gpusb3::Perform operation ([OP]) on atomic (ATOMIC) with value (VALUE)"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("OP", "OP"): InputInfo(
                    type=ExtensionInputType.ATOMICFUNCTIONS,
                    menu=MenuInfo(opcode="gpusb3_menu_ATOMICFUNCTIONS", inner="ATOMICFUNCTIONS"),
                ),
                ("ATOMIC", "ATOMIC"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("VALUE", "VALUE"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_barrier", "gpusb3::Barrier ([TYPE])"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("TYPE", "TYPE"): InputInfo(
                    type=ExtensionInputType.BARRIERFUNCTIONS,
                    menu=MenuInfo(opcode="gpusb3_menu_BARRIERFUNCTIONS", inner="BARRIERFUNCTIONS"),
                ),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_c_arbitraryWGSL", "gpusb3::Arbitrary WGSL (TEXT)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("TEXT", "TEXT"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_r_arbitraryWGSL", "gpusb3::Arbitrary WGSL (TEXT)"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("TEXT", "TEXT"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_menu_TYPES", "gpusb3_menu_TYPES"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_menu_VARTYPES", "gpusb3_menu_VARTYPES"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_menu_VAROPS", "gpusb3_menu_VAROPS"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_menu_WGSLFUNCS", "gpusb3_menu_WGSLFUNCS"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_menu_FUNCTYPES", "gpusb3_menu_FUNCTYPES"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_menu_RAWTYPES", "gpusb3_menu_RAWTYPES"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_menu_BGLENTRYTYPES", "gpusb3_menu_BGLENTRYTYPES"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_menu_CONSTRUCTABLETYPES", "gpusb3_menu_CONSTRUCTABLETYPES"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_menu_BUFFERUSAGE", "gpusb3_menu_BUFFERUSAGE"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_menu_BUFFERENTRYTYPE", "gpusb3_menu_BUFFERENTRYTYPE"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_menu_VARUSAGE", "gpusb3_menu_VARUSAGE"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_menu_ATOMICBASES", "gpusb3_menu_ATOMICBASES"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_menu_ATOMICFUNCTIONS", "gpusb3_menu_ATOMICFUNCTIONS"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_menu_BARRIERFUNCTIONS", "gpusb3_menu_BARRIERFUNCTIONS"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_menu_TYPEDARRAYTYPES", "gpusb3_menu_TYPEDARRAYTYPES"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_menu_ARRAYBUFFERS", "gpusb3_menu_ARRAYBUFFERS"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_menu_TYPEDARRAYPROPS", "gpusb3_menu_TYPEDARRAYPROPS"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_menu_TEXTURECOLORFORMATS", "gpusb3_menu_TEXTURECOLORFORMATS"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_menu_TEXTUREUSAGE", "gpusb3_menu_TEXTUREUSAGE"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_menu_IMAGELIST", "gpusb3_menu_IMAGELIST"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_menu_ADDRESSMODES", "gpusb3_menu_ADDRESSMODES"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_menu_FILTERMODES", "gpusb3_menu_FILTERMODES"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_menu_TEXTUREENTRYTYPE", "gpusb3_menu_TEXTUREENTRYTYPE"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_menu_SAMPLERENTRYTYPE", "gpusb3_menu_SAMPLERENTRYTYPE"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_menu_TEXTUREBASETYPES", "gpusb3_menu_TEXTUREBASETYPES"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("gpusb3_menu_VARIABLEACCESSTYPES", "gpusb3_menu_VARIABLEACCESSTYPES"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
    }),
)

extension_fingerprint = ContentFingerprint(length=146585, hash=b'%v\x1e\x0c\x8c\xf7\x81o\xae\x0e\xd9\xbb\xa1E\xef)\x8c\xd2\x85\x84\xd94)\x1c\x1f\xe6\x1bn\xfavn\xd5')