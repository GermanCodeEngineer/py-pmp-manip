from pypenguin.opcode_info.data_imports import *

class ExtensionDropdownType(DropdownType):
    sceneType = DropdownTypeInfo(
        direct_values=[
            "semi-closed stage",
            "boxed stage",
            "opened stage",
            "nothing",
        ],
        rules=[],
        old_direct_values=[
            "semi-closed stage",
            "boxed stage",
            "opened stage",
            "nothing",
        ],
        fallback=None,
    )
    BodyTypePK = DropdownTypeInfo(
        direct_values=["dynamic", "static"],
        rules=[],
        old_direct_values=["dynamic", "static"],
        fallback=None,
    )
    BodyTypePK2 = DropdownTypeInfo(
        direct_values=["dynamic", "static", "any"],
        rules=[],
        old_direct_values=["dynamic", "static", "any"],
        fallback=None,
    )
    bodyAttr = DropdownTypeInfo(
        direct_values=["damping", "rotational damping"],
        rules=[],
        old_direct_values=["damping", "rotational damping"],
        fallback=None,
    )
    bodyAttrRead = DropdownTypeInfo(
        direct_values=[
            "x",
            "y",
            "Xvel",
            "Yvel",
            "Dvel",
            "direction",
            "awake",
            "type",
            "friction",
            "pressure",
        ],
        rules=[],
        old_direct_values=[
            "x",
            "y",
            "Xvel",
            "Yvel",
            "Dvel",
            "direction",
            "awake",
            "type",
            "friction",
            "pressure",
        ],
        fallback=None,
    )
    ForceType = DropdownTypeInfo(
        direct_values=["Impulse", "World Impulse"],
        rules=[],
        old_direct_values=["Impulse", "World Impulse"],
        fallback=None,
    )
    AngForceType = DropdownTypeInfo(
        direct_values=["Impulse"],
        rules=[],
        old_direct_values=["Impulse"],
        fallback=None,
    )
    JointType = DropdownTypeInfo(
        direct_values=["Rotating", "Spring", "Weld", "Slider"],
        rules=[],
        old_direct_values=["Rotating", "Spring", "Weld", "Slider"],
        fallback=None,
    )
    JointAttr = DropdownTypeInfo(
        direct_values=[
            "Motor On",
            "Motor Speed",
            "Max Torque",
            "Limits On",
            "Lower Limit",
            "Upper Limit",
        ],
        rules=[],
        old_direct_values=[
            "Motor On",
            "Motor Speed",
            "Max Torque",
            "Limits On",
            "Lower Limit",
            "Upper Limit",
        ],
        fallback=None,
    )
    JointAttrRead = DropdownTypeInfo(
        direct_values=[
            "Angle",
            "Speed",
            "Motor Torque",
            "Reaction Torque",
            "tension",
        ],
        rules=[],
        old_direct_values=[
            "Angle",
            "Speed",
            "Motor Torque",
            "Reaction Torque",
            "tension",
        ],
        fallback=None,
    )
    xyp = DropdownTypeInfo(
        direct_values=["x", "y", "point"],
        rules=[],
        old_direct_values=["x", "y", "point"],
        fallback=None,
    )
    xy = DropdownTypeInfo(
        direct_values=["x", "y"],
        rules=[],
        old_direct_values=["x", "y"],
        fallback=None,
    )
    costumeType = DropdownTypeInfo(
        direct_values=["Convex Hull", "Edge points"],
        rules=[],
        old_direct_values=["hull", "img"],
        fallback=None,
    )

class ExtensionInputType(InputType):
    pass

P7BoxPhys = OpcodeInfoGroup(
    name="P7BoxPhys",
    opcode_info=DualKeyDict({
        ("P7BoxPhys_get_debug", "P7BoxPhys::Get debug (VAL)"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("VAL", "VAL"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_setBodyAttrs", "P7BoxPhys::Define base, Type: [BODYTYPE] Density: (DENSITY) Friction: (FRICTION) Bounce: (BOUNCE)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("DENSITY", "DENSITY"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("FRICTION", "FRICTION"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("BOUNCE", "BOUNCE"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
            }),
            dropdowns=DualKeyDict({
                ("BODYTYPE", "BODYTYPE"): DropdownInfo(type=ExtensionDropdownType.BodyTypePK),
            }),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=True,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_defineCircle", "P7BoxPhys::Define Circle, Size: (SIZE)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("SIZE", "SIZE"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_defineRect", "P7BoxPhys::Define Box, Width: (WIDTH) Height: (HEIGHT)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("WIDTH", "WIDTH"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("HEIGHT", "HEIGHT"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_definePoly", "P7BoxPhys::Define polygon, Points: (POINTS)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("POINTS", "POINTS"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_difineCostume", "P7BoxPhys::Define polygon as this costume"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict({
                ("TYPE", "TYPE"): DropdownInfo(type=ExtensionDropdownType.costumeType),
            }),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=True,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_placeBody", "P7BoxPhys::Make object (NAME) at X: (X)  y: (Y)  Dir: (DIR)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("NAME", "NAME"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("X", "X"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("Y", "Y"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("DIR", "DIR"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_ispoly", "P7BoxPhys::Is (POINTS) a polygon?"): OpcodeInfo(
            opcode_type=OpcodeType.BOOLEAN_REPORTER,
            inputs=DualKeyDict({
                ("POINTS", "POINTS"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_destroyBody", "P7BoxPhys::Destroy object (NAME)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("NAME", "NAME"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_destroyBodys", "P7BoxPhys::Destroy every object"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_setObjectLayer", "P7BoxPhys::Set object (NAME) to be on collision layer (LAYERS)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("LAYERS", "LAYERS"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("NAME", "NAME"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_setBodyAttr", "P7BoxPhys::Set [BODYATTR] of object (NAME) to (VALUE)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("NAME", "NAME"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("VALUE", "VALUE"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
            }),
            dropdowns=DualKeyDict({
                ("BODYATTR", "BODYATTR"): DropdownInfo(type=ExtensionDropdownType.bodyAttr),
            }),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=True,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_applyForceToBody", "P7BoxPhys::Apply [FORCETYPE] to object (NAME) at X: (X) Y: (Y) with power (POWER) in direction (DIR)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("NAME", "NAME"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("X", "X"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("Y", "Y"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("POWER", "POWER"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("DIR", "DIR"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
            }),
            dropdowns=DualKeyDict({
                ("FORCETYPE", "FORCETYPE"): DropdownInfo(type=ExtensionDropdownType.ForceType),
            }),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=True,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_applyAngForceToBody", "P7BoxPhys::Apply Angular Impulse to object (NAME) power: (POWER)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("NAME", "NAME"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("POWER", "POWER"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
            }),
            dropdowns=DualKeyDict({
                ("ANGFORCETYPE", "ANGFORCETYPE"): DropdownInfo(type=ExtensionDropdownType.AngForceType),
            }),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=True,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_changevel", "P7BoxPhys::Set Velocity of object (NAME) to X: (X) Y: (Y) Dir: (DIR)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("X", "X"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("Y", "Y"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("DIR", "DIR"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("NAME", "NAME"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_moveto", "P7BoxPhys::Move object (NAME) to X: (X) Y: (Y)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("X", "X"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("Y", "Y"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("NAME", "NAME"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_rotateto", "P7BoxPhys::Set rotation of object (NAME) to (ROT)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("ROT", "ROT"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("NAME", "NAME"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_clearvel", "P7BoxPhys::Clear velocity of object (NAME)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("NAME", "NAME"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_whenImpactDetected", "P7BoxPhys::When (NAME) has an impact"): OpcodeInfo(
            opcode_type=OpcodeType.HAT,
            inputs=DualKeyDict({
                ("NAME", "NAME"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_impactDetectionBool", "P7BoxPhys::(NAME) had an impact"): OpcodeInfo(
            opcode_type=OpcodeType.BOOLEAN_REPORTER,
            inputs=DualKeyDict({
                ("NAME", "NAME"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_scrapingDetectionBool", "P7BoxPhys::(NAME) is touching anything"): OpcodeInfo(
            opcode_type=OpcodeType.BOOLEAN_REPORTER,
            inputs=DualKeyDict({
                ("NAME", "NAME"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_getTouching", "P7BoxPhys::Get all objects touching (NAME)"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("NAME", "NAME"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_getBodyIDAt", "P7BoxPhys::Get object of type [type] at x: (X)  y: (Y)"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("X", "X"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("Y", "Y"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
            }),
            dropdowns=DualKeyDict({
                ("type", "type"): DropdownInfo(type=ExtensionDropdownType.BodyTypePK2),
            }),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=True,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_getBodyAttr", "P7BoxPhys::Get [BODYATTRREAD] from object (NAME)"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("NAME", "NAME"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict({
                ("BODYATTRREAD", "BODYATTRREAD"): DropdownInfo(type=ExtensionDropdownType.bodyAttrRead),
            }),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=True,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_getobjects", "P7BoxPhys::All objects"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_defineSpring", "P7BoxPhys::Define Spring, Length: (LENGTH) Damping: (DAMPING) Freq: (FREQ)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("LENGTH", "LENGTH"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("DAMPING", "DAMPING"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("FREQ", "FREQ"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_definePrismatic", "P7BoxPhys::Define Slider, Angle: (DIR) Lower stop: (LOW) Upper stop: (HIGH)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("DIR", "DIR"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("LOW", "LOW"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("HIGH", "HIGH"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_createJointOfType", "P7BoxPhys::Create joint (JOINTID) of type [JOINTTYPE] between (BODY1) at (X1) (Y1) and (BODY2) at (X2) (Y2)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("JOINTID", "JOINTID"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("BODY1", "BODY1"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("X1", "X1"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("Y1", "Y1"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("BODY2", "BODY2"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("X2", "X2"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("Y2", "Y2"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
            }),
            dropdowns=DualKeyDict({
                ("JOINTTYPE", "JOINTTYPE"): DropdownInfo(type=ExtensionDropdownType.JointType),
            }),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=True,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_CreateMouseJoint", "P7BoxPhys::Create pin (JOINTID) with force (FORCE) for (BODY1) at (X1) (Y1)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("JOINTID", "JOINTID"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("FORCE", "FORCE"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("BODY1", "BODY1"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("X1", "X1"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("Y1", "Y1"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_destroyJoint", "P7BoxPhys::Destroy Joint (JOINTID)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("JOINTID", "JOINTID"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_destroyJoints", "P7BoxPhys::Destroy every joint"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_setJointAttr", "P7BoxPhys::Set [JOINTATTR] of joint (JOINTID) to (VALUE)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("JOINTID", "JOINTID"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("VALUE", "VALUE"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
            }),
            dropdowns=DualKeyDict({
                ("JOINTATTR", "JOINTATTR"): DropdownInfo(type=ExtensionDropdownType.JointAttr),
            }),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=True,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_setJointTarget", "P7BoxPhys::Move pin (JOINTID) to x: (X)  y: (Y)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("JOINTID", "JOINTID"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("X", "X"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("Y", "Y"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_getJointAttr", "P7BoxPhys::Get [JOINTATTRREAD] of joint: (JOINTID)"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("JOINTID", "JOINTID"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict({
                ("JOINTATTRREAD", "JOINTATTRREAD"): DropdownInfo(type=ExtensionDropdownType.JointAttrRead),
            }),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=True,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_getjoints", "P7BoxPhys::All joints"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_init", "P7BoxPhys::Make world, Scale 1m: (SCALE) Gravity: (GRAVITY) Wind: (WIND) Scene: [SCENE]"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("SCALE", "SCALE"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("GRAVITY", "GRAVITY"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("WIND", "WIND"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
            }),
            dropdowns=DualKeyDict({
                ("SCENE", "SCENE"): DropdownInfo(type=ExtensionDropdownType.sceneType),
            }),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=True,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_physoptions", "P7BoxPhys::Set physics options, Position iterations: (POS) Velocity iterations: (VEL) Continuous physics: <CONPHYS> Warm starting: <WARMSTART>"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("POS", "POS"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("VEL", "VEL"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("CONPHYS", "CONPHYS"): InputInfo(type=BuiltinInputType.BOOLEAN, menu=None),
                ("WARMSTART", "WARMSTART"): InputInfo(type=BuiltinInputType.BOOLEAN, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_setWorldForces", "P7BoxPhys::Set world options, Gravity: (GRAVITY) Wind: (WIND)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("GRAVITY", "GRAVITY"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("WIND", "WIND"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_getsimspeed", "P7BoxPhys::Slow motion"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=True,
            monitor_id_behaviour=MonitorIdBehaviour.OPCFULL,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_setsimspeed", "P7BoxPhys::Set slow motion to (VALUE)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("VALUE", "VALUE"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_stepSimulation", "P7BoxPhys::Step Simulation"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_rotatePoint", "P7BoxPhys::Get [PART] from point x (X) y (Y) rotated by (ANGLE)"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("X", "X"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("Y", "Y"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("ANGLE", "ANGLE"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
            }),
            dropdowns=DualKeyDict({
                ("PART", "PART"): DropdownInfo(type=ExtensionDropdownType.xy),
            }),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=True,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_rotationFromPoint", "P7BoxPhys::Get rotation from x (x1) y (y1) to x (x2) y (y2)"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("x1", "x1"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("y1", "y1"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("x2", "x2"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
                ("y2", "y2"): InputInfo(type=BuiltinInputType.NUMBER, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_magnitudeOfPoint", "P7BoxPhys::Magnitude of x (a1) y (a2)"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("a1", "a1"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("a2", "a2"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_distanceOfPoint", "P7BoxPhys::Distance between x (a1) y (a2) and x (b1) y (b2)"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict({
                ("a1", "a1"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("a2", "a2"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("b1", "b1"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
                ("b2", "b2"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_createNoCollideSet", "P7BoxPhys::Disable collision between (NAMES)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("NAMES", "NAMES"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_createYesCollideSet", "P7BoxPhys::Reset collision of objects (NAMES)"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("NAMES", "NAMES"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_ignore", "P7BoxPhys::the ids on any of the following blocks can change or be removed, so it's YOUR fault if you use them and your project brakes"): OpcodeInfo(
            opcode_type=OpcodeType.STATEMENT,
            inputs=DualKeyDict({
                ("VALUE", "VALUE"): InputInfo(type=BuiltinInputType.TEXT, menu=None),
            }),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_getImpacts", "P7BoxPhys::Get all impacts"): OpcodeInfo(
            opcode_type=OpcodeType.STRING_REPORTER,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=True,
            monitor_id_behaviour=MonitorIdBehaviour.OPCFULL,
            has_shadow=False,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_menu_sceneType", "P7BoxPhys_menu_sceneType"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_menu_BodyTypePK", "P7BoxPhys_menu_BodyTypePK"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_menu_BodyTypePK2", "P7BoxPhys_menu_BodyTypePK2"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_menu_bodyAttr", "P7BoxPhys_menu_bodyAttr"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_menu_bodyAttrRead", "P7BoxPhys_menu_bodyAttrRead"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_menu_ForceType", "P7BoxPhys_menu_ForceType"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_menu_AngForceType", "P7BoxPhys_menu_AngForceType"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_menu_JointType", "P7BoxPhys_menu_JointType"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_menu_JointAttr", "P7BoxPhys_menu_JointAttr"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_menu_JointAttrRead", "P7BoxPhys_menu_JointAttrRead"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_menu_xyp", "P7BoxPhys_menu_xyp"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_menu_xy", "P7BoxPhys_menu_xy"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
        ("P7BoxPhys_menu_costumeType", "P7BoxPhys_menu_costumeType"): OpcodeInfo(
            opcode_type=OpcodeType.MENU,
            inputs=DualKeyDict(),
            dropdowns=DualKeyDict(),
            can_have_monitor=False,
            monitor_id_behaviour=None,
            has_shadow=True,
            has_variable_id=False,
            special_cases={},
            old_mutation_cls=None,
            new_mutation_cls=None,
        ),
    }),
)

extension_fingerprint = ContentFingerprint(length=436150, hash=b'\x88h\xb3^B\x91\xc4\xa1g\x82\xe4\xb0\x122d\xa3\x11\xca\xa9?\x86\xf6\xb7\xe7?h\xba\xcb\xc9\x0c\xaa\x1b')